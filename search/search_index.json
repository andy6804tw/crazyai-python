{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u5168\u6c11\u760bAI\u7cfb\u5217 [Python\u5f9e\u96f6\u958b\u59cb] \u95dc\u65bc Python Python \u662f\u7576\u4eca\u4e16\u754c\u4e0a\u6700\u6d41\u884c\u4e14\u5ee3\u6cdb\u4f7f\u7528\u7684\u7a0b\u5f0f\u8a9e\u8a00\u4e4b\u4e00\uff0c\u4ee5\u5176\u7c21\u55ae\u6613\u5b78\u548c\u5f37\u5927\u529f\u80fd\u800c\u8457\u7a31\u3002\u7121\u8ad6\u662f\u521d\u5b78\u8005\u9084\u662f\u5c08\u696d\u958b\u767c\u8005\uff0cPython \u90fd\u662f\u4e00\u500b\u7406\u60f3\u7684\u9078\u64c7\uff0c\u56e0\u70ba\u5b83\u80fd\u5920\u61c9\u7528\u65bc\u5404\u7a2e\u9818\u57df\uff0c\u5f9e\u7db2\u8def\u958b\u767c\u5230\u8cc7\u6599\u79d1\u5b78\uff0c\u751a\u81f3\u662f\u4eba\u5de5\u667a\u6167\u548c\u6a5f\u5668\u5b78\u7fd2\u3002 Python \u540d\u7a31\u7684\u7531\u4f86 Python \u7684\u5275\u9020\u8005\u662f\u8377\u862d\u7684\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u5409\u591a\u00b7\u8303\u7f85\u8607\u59c6 (Guido van Rossum)\u30021989 \u5e74\u7684\u8056\u8a95\u7bc0\u671f\u9593\uff0c\u4ed6\u6c7a\u5b9a\u82b1\u4e09\u500b\u6708\u7684\u6642\u9593\u8a2d\u8a08\u4e00\u7a2e\u65b0\u7684\u7a0b\u5f0f\u8a9e\u8a00\uff0c\u65e8\u5728\u89e3\u6c7a\u7576\u6642\u4e00\u4e9b\u7a0b\u5f0f\u8a9e\u8a00\u7684\u7f3a\u9ede\u3002\u9019\u500b\u5c08\u6848\u5f8c\u4f86\u6210\u70ba\u4e86 Python\u3002\u540d\u5b57\u7684\u9748\u611f\u4f86\u81ea\u65bc\u5409\u591a\u975e\u5e38\u559c\u611b\u7684\u4e00\u500b\u82f1\u570b\u96fb\u8996\u559c\u5287\u5718\u9ad4\u2014\u2014\u8499\u63d0\u00b7\u6d3e\u68ee (Monty Python)\uff0c\u56e0\u6b64\u4ed6\u6c7a\u5b9a\u5c07\u9019\u500b\u8a9e\u8a00\u547d\u540d\u70ba \"Python\"\u3002 Python \u7684\u7279\u8272 Python \u662f\u4e00\u7a2e\u529f\u80fd\u5f37\u5927\u7684\u76f4\u8b6f\u5f0f\u3001\u9ad8\u968e\u901a\u7528\u7a0b\u5f0f\u8a9e\u8a00\u3002\u5b83\u652f\u63f4\u591a\u7a2e\u7a0b\u5f0f\u8a2d\u8a08\u7bc4\u5f0f\uff0c\u5305\u62ec\u7d50\u69cb\u5316\u3001\u7a0b\u5e8f\u5f0f\u3001\u7269\u4ef6\u5c0e\u5411\u3001\u51fd\u6578\u5f0f\u548c\u53cd\u5c04\u5f0f\u7de8\u7a0b\u3002Python \u63a1\u7528\u52d5\u614b\u578b\u5225\u7cfb\u7d71\u548c\u81ea\u52d5\u8a18\u61b6\u9ad4\u7ba1\u7406\uff0c\u4f7f\u5f97\u958b\u767c\u8005\u7121\u9700\u904e\u65bc\u95dc\u6ce8\u4f4e\u5c64\u6b21\u7684\u7d30\u7bc0\uff0c\u800c\u80fd\u5c08\u6ce8\u65bc\u5be6\u73fe\u7a0b\u5f0f\u7684\u908f\u8f2f\u3002 \u7c21\u6f54\u6613\u8b80: Python \u7684\u8a9e\u6cd5\u8a2d\u8a08\u975e\u5e38\u7c21\u6f54\uff0c\u8b93\u7a0b\u5f0f\u78bc\u7684\u53ef\u8b80\u6027\u548c\u7dad\u8b77\u6027\u6975\u9ad8\uff0c\u9069\u5408\u521d\u5b78\u8005\u5feb\u901f\u4e0a\u624b\u3002 \u5f37\u5927\u7684\u793e\u7fa4\u652f\u63f4: \u64c1\u6709\u5168\u7403\u6d3b\u8e8d\u7684\u958b\u767c\u8005\u793e\u7fa4\uff0c\u63d0\u4f9b\u8c50\u5bcc\u7684\u8cc7\u6e90\u548c\u652f\u6301\uff0c\u7121\u8ad6\u662f\u5b78\u7fd2\u9084\u662f\u89e3\u6c7a\u554f\u984c\uff0c\u90fd\u80fd\u627e\u5230\u5408\u9069\u7684\u7b54\u6848\u3002 \u9f90\u5927\u7684\u6a19\u6e96\u5eab: Python \u7684\u6a19\u6e96\u5eab\u6db5\u84cb\u4e86\u5f9e\u7db2\u8def\u3001\u6587\u4ef6\u8655\u7406\u5230\u8cc7\u6599\u5eab\u7ba1\u7406\u3001GUI \u958b\u767c\u7b49\u5404\u500b\u65b9\u9762\uff0c\u70ba\u958b\u767c\u8005\u63d0\u4f9b\u4e86\u591a\u7a2e\u958b\u7bb1\u5373\u7528\u7684\u529f\u80fd\u3002 \u8c50\u5bcc\u7684\u7b2c\u4e09\u65b9\u5eab: \u7121\u8ad6\u4f60\u9700\u8981\u9032\u884c\u8cc7\u6599\u79d1\u5b78\u5206\u6790\u3001\u7db2\u8def\u958b\u767c\uff0c\u9084\u662f\u69cb\u5efa\u4eba\u5de5\u667a\u6167\u6a21\u578b\uff0c\u90fd\u80fd\u627e\u5230\u5408\u9069\u7684\u7b2c\u4e09\u65b9\u5eab\u4f86\u52a0\u901f\u958b\u767c\u3002 \u61c9\u7528\u7bc4\u570d\u5ee3\u6cdb: Python \u88ab\u5ee3\u6cdb\u61c9\u7528\u65bc\u8cc7\u6599\u79d1\u5b78\u3001\u81ea\u52d5\u5316\u6e2c\u8a66\u3001\u7db2\u7ad9\u958b\u767c\u3001\u8edf\u9ad4\u958b\u767c\u3001\u5546\u696d\u61c9\u7528\u3001\u591a\u5a92\u9ad4\u8655\u7406\u7b49\u9818\u57df\uff0c\u662f\u4e00\u500b\u771f\u6b63\u7684\u901a\u7528\u8a9e\u8a00\u3002 Python \u53ef\u4ee5\u505a\u4ec0\u9ebc\uff1f Python \u7684\u61c9\u7528\u9818\u57df\u6975\u5176\u5ee3\u6cdb\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4e3b\u8981\u7684\u61c9\u7528\u5834\u666f\uff1a \u7db2\u8def\u722c\u87f2\u8207\u8cc7\u8a0a\u64f7\u53d6: \u5229\u7528 Python \u53ef\u4ee5\u8f15\u9b06\u69cb\u5efa\u7db2\u8def\u722c\u87f2\uff0c\u5f9e\u7db2\u7ad9\u4e0a\u81ea\u52d5\u64f7\u53d6\u8cc7\u6599\uff0c\u4e26\u9032\u884c\u5f8c\u7e8c\u8655\u7406\u3002 \u6578\u64da\u8655\u7406\u8207\u8996\u89ba\u5316: Python \u63d0\u4f9b\u4e86\u5982 Pandas\u3001NumPy \u548c Matplotlib \u7b49\u5f37\u5927\u7684\u5de5\u5177\uff0c\u7528\u65bc\u6578\u64da\u8655\u7406\u3001\u5206\u6790\u8207\u8996\u89ba\u5316\u5c55\u793a\u3002 \u6a5f\u5668\u5b78\u7fd2\u8207\u4eba\u5de5\u667a\u6167: Python \u662f\u69cb\u5efa\u6a5f\u5668\u5b78\u7fd2\u6a21\u578b\u548c\u4eba\u5de5\u667a\u6167\u61c9\u7528\u7684\u4e3b\u6d41\u8a9e\u8a00\uff0c\u64c1\u6709\u5982 TensorFlow\u3001PyTorch \u7b49\u591a\u7a2e\u6846\u67b6\u3002 \u81ea\u52d5\u5316\u6e2c\u8a66: \u5229\u7528 Python \u53ef\u4ee5\u9032\u884c\u8edf\u9ad4\u6e2c\u8a66\u81ea\u52d5\u5316\uff0c\u7bc0\u7701\u5927\u91cf\u4eba\u529b\u548c\u6642\u9593\u3002 \u7db2\u7ad9\u958b\u767c: Django \u548c FastAPI \u7b49 Python \u6846\u67b6\u4f7f\u5f97\u7db2\u7ad9\u958b\u767c\u8b8a\u5f97\u7c21\u55ae\u800c\u9ad8\u6548\u3002 \u8edf\u9ad4\u958b\u767c: Python \u4e0d\u50c5\u9069\u5408\u5c0f\u578b\u61c9\u7528\u958b\u767c\uff0c\u4e5f\u80fd\u652f\u6490\u5927\u578b\u8edf\u9ad4\u9805\u76ee\uff0c\u5177\u5099\u6975\u9ad8\u7684\u53ef\u64f4\u5c55\u6027\u3002 \u5546\u696d\u61c9\u7528: Python \u5728\u5546\u696d\u9818\u57df\u4e2d\u5ee3\u6cdb\u61c9\u7528\uff0c\u5f9eERP\u7cfb\u7d71\u5230\u91d1\u878d\u5206\u6790\uff0c\u5747\u6709\u5b83\u7684\u8eab\u5f71\u3002 \u591a\u5a92\u9ad4\u61c9\u7528: Python \u53ef\u7528\u65bc\u97f3\u8a0a\u3001\u8996\u8a0a\u8655\u7406\uff0c\u751a\u81f3\u662f\u5716\u50cf\u751f\u6210\u8207\u7de8\u8f2f\uff0c\u63d0\u4f9b\u4e86\u8c50\u5bcc\u7684\u591a\u5a92\u9ad4\u8655\u7406\u5de5\u5177\u3002 Python \u5b78\u7fd2\u5730\u5716 \u9019\u5f35\u5b78\u7fd2\u5730\u5716\u4f5c\u70ba\u4e00\u500b\u6307\u5357\uff0c\u63d0\u4f9b\u4e86\u5b78\u7fd2Python\u7684\u7cfb\u7d71\u5316\u8def\u5f91\u3002\u6839\u64da\u9019\u500b\u5730\u5716\uff0c\u4f60\u53ef\u4ee5\u6709\u689d\u7406\u5730\u5b78\u7fd2Python\uff0c\u5f9e\u57fa\u790e\u5230\u9032\u968e\uff0c\u9010\u6b65\u638c\u63e1\u9019\u9580\u5f37\u5927\u7684\u7a0b\u5f0f\u8a9e\u8a00\u3002","title":"\u5168\u6c11\u760bAI\u7cfb\u5217 [Python\u5f9e\u96f6\u958b\u59cb]"},{"location":"#ai-python","text":"","title":"\u5168\u6c11\u760bAI\u7cfb\u5217 [Python\u5f9e\u96f6\u958b\u59cb]"},{"location":"#python","text":"Python \u662f\u7576\u4eca\u4e16\u754c\u4e0a\u6700\u6d41\u884c\u4e14\u5ee3\u6cdb\u4f7f\u7528\u7684\u7a0b\u5f0f\u8a9e\u8a00\u4e4b\u4e00\uff0c\u4ee5\u5176\u7c21\u55ae\u6613\u5b78\u548c\u5f37\u5927\u529f\u80fd\u800c\u8457\u7a31\u3002\u7121\u8ad6\u662f\u521d\u5b78\u8005\u9084\u662f\u5c08\u696d\u958b\u767c\u8005\uff0cPython \u90fd\u662f\u4e00\u500b\u7406\u60f3\u7684\u9078\u64c7\uff0c\u56e0\u70ba\u5b83\u80fd\u5920\u61c9\u7528\u65bc\u5404\u7a2e\u9818\u57df\uff0c\u5f9e\u7db2\u8def\u958b\u767c\u5230\u8cc7\u6599\u79d1\u5b78\uff0c\u751a\u81f3\u662f\u4eba\u5de5\u667a\u6167\u548c\u6a5f\u5668\u5b78\u7fd2\u3002","title":"\u95dc\u65bc Python"},{"location":"#python_1","text":"Python \u7684\u5275\u9020\u8005\u662f\u8377\u862d\u7684\u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u5409\u591a\u00b7\u8303\u7f85\u8607\u59c6 (Guido van Rossum)\u30021989 \u5e74\u7684\u8056\u8a95\u7bc0\u671f\u9593\uff0c\u4ed6\u6c7a\u5b9a\u82b1\u4e09\u500b\u6708\u7684\u6642\u9593\u8a2d\u8a08\u4e00\u7a2e\u65b0\u7684\u7a0b\u5f0f\u8a9e\u8a00\uff0c\u65e8\u5728\u89e3\u6c7a\u7576\u6642\u4e00\u4e9b\u7a0b\u5f0f\u8a9e\u8a00\u7684\u7f3a\u9ede\u3002\u9019\u500b\u5c08\u6848\u5f8c\u4f86\u6210\u70ba\u4e86 Python\u3002\u540d\u5b57\u7684\u9748\u611f\u4f86\u81ea\u65bc\u5409\u591a\u975e\u5e38\u559c\u611b\u7684\u4e00\u500b\u82f1\u570b\u96fb\u8996\u559c\u5287\u5718\u9ad4\u2014\u2014\u8499\u63d0\u00b7\u6d3e\u68ee (Monty Python)\uff0c\u56e0\u6b64\u4ed6\u6c7a\u5b9a\u5c07\u9019\u500b\u8a9e\u8a00\u547d\u540d\u70ba \"Python\"\u3002","title":"Python \u540d\u7a31\u7684\u7531\u4f86"},{"location":"#python_2","text":"Python \u662f\u4e00\u7a2e\u529f\u80fd\u5f37\u5927\u7684\u76f4\u8b6f\u5f0f\u3001\u9ad8\u968e\u901a\u7528\u7a0b\u5f0f\u8a9e\u8a00\u3002\u5b83\u652f\u63f4\u591a\u7a2e\u7a0b\u5f0f\u8a2d\u8a08\u7bc4\u5f0f\uff0c\u5305\u62ec\u7d50\u69cb\u5316\u3001\u7a0b\u5e8f\u5f0f\u3001\u7269\u4ef6\u5c0e\u5411\u3001\u51fd\u6578\u5f0f\u548c\u53cd\u5c04\u5f0f\u7de8\u7a0b\u3002Python \u63a1\u7528\u52d5\u614b\u578b\u5225\u7cfb\u7d71\u548c\u81ea\u52d5\u8a18\u61b6\u9ad4\u7ba1\u7406\uff0c\u4f7f\u5f97\u958b\u767c\u8005\u7121\u9700\u904e\u65bc\u95dc\u6ce8\u4f4e\u5c64\u6b21\u7684\u7d30\u7bc0\uff0c\u800c\u80fd\u5c08\u6ce8\u65bc\u5be6\u73fe\u7a0b\u5f0f\u7684\u908f\u8f2f\u3002 \u7c21\u6f54\u6613\u8b80: Python \u7684\u8a9e\u6cd5\u8a2d\u8a08\u975e\u5e38\u7c21\u6f54\uff0c\u8b93\u7a0b\u5f0f\u78bc\u7684\u53ef\u8b80\u6027\u548c\u7dad\u8b77\u6027\u6975\u9ad8\uff0c\u9069\u5408\u521d\u5b78\u8005\u5feb\u901f\u4e0a\u624b\u3002 \u5f37\u5927\u7684\u793e\u7fa4\u652f\u63f4: \u64c1\u6709\u5168\u7403\u6d3b\u8e8d\u7684\u958b\u767c\u8005\u793e\u7fa4\uff0c\u63d0\u4f9b\u8c50\u5bcc\u7684\u8cc7\u6e90\u548c\u652f\u6301\uff0c\u7121\u8ad6\u662f\u5b78\u7fd2\u9084\u662f\u89e3\u6c7a\u554f\u984c\uff0c\u90fd\u80fd\u627e\u5230\u5408\u9069\u7684\u7b54\u6848\u3002 \u9f90\u5927\u7684\u6a19\u6e96\u5eab: Python \u7684\u6a19\u6e96\u5eab\u6db5\u84cb\u4e86\u5f9e\u7db2\u8def\u3001\u6587\u4ef6\u8655\u7406\u5230\u8cc7\u6599\u5eab\u7ba1\u7406\u3001GUI \u958b\u767c\u7b49\u5404\u500b\u65b9\u9762\uff0c\u70ba\u958b\u767c\u8005\u63d0\u4f9b\u4e86\u591a\u7a2e\u958b\u7bb1\u5373\u7528\u7684\u529f\u80fd\u3002 \u8c50\u5bcc\u7684\u7b2c\u4e09\u65b9\u5eab: \u7121\u8ad6\u4f60\u9700\u8981\u9032\u884c\u8cc7\u6599\u79d1\u5b78\u5206\u6790\u3001\u7db2\u8def\u958b\u767c\uff0c\u9084\u662f\u69cb\u5efa\u4eba\u5de5\u667a\u6167\u6a21\u578b\uff0c\u90fd\u80fd\u627e\u5230\u5408\u9069\u7684\u7b2c\u4e09\u65b9\u5eab\u4f86\u52a0\u901f\u958b\u767c\u3002 \u61c9\u7528\u7bc4\u570d\u5ee3\u6cdb: Python \u88ab\u5ee3\u6cdb\u61c9\u7528\u65bc\u8cc7\u6599\u79d1\u5b78\u3001\u81ea\u52d5\u5316\u6e2c\u8a66\u3001\u7db2\u7ad9\u958b\u767c\u3001\u8edf\u9ad4\u958b\u767c\u3001\u5546\u696d\u61c9\u7528\u3001\u591a\u5a92\u9ad4\u8655\u7406\u7b49\u9818\u57df\uff0c\u662f\u4e00\u500b\u771f\u6b63\u7684\u901a\u7528\u8a9e\u8a00\u3002","title":"Python \u7684\u7279\u8272"},{"location":"#python_3","text":"Python \u7684\u61c9\u7528\u9818\u57df\u6975\u5176\u5ee3\u6cdb\uff0c\u4ee5\u4e0b\u662f\u4e00\u4e9b\u4e3b\u8981\u7684\u61c9\u7528\u5834\u666f\uff1a \u7db2\u8def\u722c\u87f2\u8207\u8cc7\u8a0a\u64f7\u53d6: \u5229\u7528 Python \u53ef\u4ee5\u8f15\u9b06\u69cb\u5efa\u7db2\u8def\u722c\u87f2\uff0c\u5f9e\u7db2\u7ad9\u4e0a\u81ea\u52d5\u64f7\u53d6\u8cc7\u6599\uff0c\u4e26\u9032\u884c\u5f8c\u7e8c\u8655\u7406\u3002 \u6578\u64da\u8655\u7406\u8207\u8996\u89ba\u5316: Python \u63d0\u4f9b\u4e86\u5982 Pandas\u3001NumPy \u548c Matplotlib \u7b49\u5f37\u5927\u7684\u5de5\u5177\uff0c\u7528\u65bc\u6578\u64da\u8655\u7406\u3001\u5206\u6790\u8207\u8996\u89ba\u5316\u5c55\u793a\u3002 \u6a5f\u5668\u5b78\u7fd2\u8207\u4eba\u5de5\u667a\u6167: Python \u662f\u69cb\u5efa\u6a5f\u5668\u5b78\u7fd2\u6a21\u578b\u548c\u4eba\u5de5\u667a\u6167\u61c9\u7528\u7684\u4e3b\u6d41\u8a9e\u8a00\uff0c\u64c1\u6709\u5982 TensorFlow\u3001PyTorch \u7b49\u591a\u7a2e\u6846\u67b6\u3002 \u81ea\u52d5\u5316\u6e2c\u8a66: \u5229\u7528 Python \u53ef\u4ee5\u9032\u884c\u8edf\u9ad4\u6e2c\u8a66\u81ea\u52d5\u5316\uff0c\u7bc0\u7701\u5927\u91cf\u4eba\u529b\u548c\u6642\u9593\u3002 \u7db2\u7ad9\u958b\u767c: Django \u548c FastAPI \u7b49 Python \u6846\u67b6\u4f7f\u5f97\u7db2\u7ad9\u958b\u767c\u8b8a\u5f97\u7c21\u55ae\u800c\u9ad8\u6548\u3002 \u8edf\u9ad4\u958b\u767c: Python \u4e0d\u50c5\u9069\u5408\u5c0f\u578b\u61c9\u7528\u958b\u767c\uff0c\u4e5f\u80fd\u652f\u6490\u5927\u578b\u8edf\u9ad4\u9805\u76ee\uff0c\u5177\u5099\u6975\u9ad8\u7684\u53ef\u64f4\u5c55\u6027\u3002 \u5546\u696d\u61c9\u7528: Python \u5728\u5546\u696d\u9818\u57df\u4e2d\u5ee3\u6cdb\u61c9\u7528\uff0c\u5f9eERP\u7cfb\u7d71\u5230\u91d1\u878d\u5206\u6790\uff0c\u5747\u6709\u5b83\u7684\u8eab\u5f71\u3002 \u591a\u5a92\u9ad4\u61c9\u7528: Python \u53ef\u7528\u65bc\u97f3\u8a0a\u3001\u8996\u8a0a\u8655\u7406\uff0c\u751a\u81f3\u662f\u5716\u50cf\u751f\u6210\u8207\u7de8\u8f2f\uff0c\u63d0\u4f9b\u4e86\u8c50\u5bcc\u7684\u591a\u5a92\u9ad4\u8655\u7406\u5de5\u5177\u3002","title":"Python \u53ef\u4ee5\u505a\u4ec0\u9ebc\uff1f"},{"location":"#python_4","text":"\u9019\u5f35\u5b78\u7fd2\u5730\u5716\u4f5c\u70ba\u4e00\u500b\u6307\u5357\uff0c\u63d0\u4f9b\u4e86\u5b78\u7fd2Python\u7684\u7cfb\u7d71\u5316\u8def\u5f91\u3002\u6839\u64da\u9019\u500b\u5730\u5716\uff0c\u4f60\u53ef\u4ee5\u6709\u689d\u7406\u5730\u5b78\u7fd2Python\uff0c\u5f9e\u57fa\u790e\u5230\u9032\u968e\uff0c\u9010\u6b65\u638c\u63e1\u9019\u9580\u5f37\u5927\u7684\u7a0b\u5f0f\u8a9e\u8a00\u3002","title":"Python \u5b78\u7fd2\u5730\u5716"},{"location":"10.\u932f\u8aa4\u8207\u4f8b\u5916\u8655\u7406/","text":"10.\u932f\u8aa4\u8207\u4f8b\u5916\u8655\u7406","title":"10.\u932f\u8aa4\u8207\u4f8b\u5916\u8655\u7406"},{"location":"10.\u932f\u8aa4\u8207\u4f8b\u5916\u8655\u7406/#10","text":"","title":"10.\u932f\u8aa4\u8207\u4f8b\u5916\u8655\u7406"},{"location":"11.\u7522\u751f\u5668/","text":"11.\u7522\u751f\u5668 Generator with for loop \u751f\u6210\u5668\u6703\u4f9d\u64dayield\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0b\u8d70\u76f4\u9047\u5230return\u4e1f\u51faerror\u70ba\u6b62 # with for loop def generator_example (): a = 1 yield print ( a ) # 1 a += 1 yield print ( a ) # 2 return for i in generator_example (): continue # Output: 1 2 Generator with next, avoid StopIteration Error \u624b\u52d5\u57f7\u884c\u751f\u6210\u5668 # with next def generator_example (): yield print ( 1 ) yield print ( 2 ) return gen = generator_example () gen . __next__ () # 1 gen . __next__ () # 2 gen . __next__ () # raise StopIteration Error \u4f7f\u7528\u4f8b\u5916\u63a5\u53d6\u932f\u8aa4 # avoid StopIteration Error try : gen . __next__ () except StopIteration : pass # do nothing Benefits - Memory Usage \u751f\u6210\u5668\u7684\u597d\u8655 \u6e1b\u5c11\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf # \u5229\u7528 list \u8fed\u4ee3 range_num = 10 for i in [ x * x for x in range ( range_num )]: pass # do something # \u5229\u7528 generator \u8fed\u4ee3 for i in ( x * x for x in range ( range_num )): pass # do something Module # A module is a file containing Python definitions and statements. import re import re as r from re import findall from re import * Module - os import os # \u986f\u793a\u7d55\u5c0d\u8def\u5f91 os . path . abspath ( \"session_1-ans.ipynb\" ) # '/Users/felix/Python/session_1-ans.ipynb' # \u5c07\u591a\u500b\u5b57\u4e32\u7d44\u5408\u70ba\u8def\u5f91 '/' . join ([ 'path' , 'result' , 'a.csv' ]) # 'path/result/a.csv' # \u5c07\u591a\u500b\u5b57\u4e32\u7d44\u5408\u70ba\u8def\u5f91 os . path . join ( 'path' , 'result' , 'a.csv' ) # 'path/result/a.csv' # \u6aa2\u67e5\u67d0\u8def\u5f91/\u8cc7\u6599\u593e\u662f\u5426\u5b58\u5728 os . path . exists ( \"python\\session_1-ans.ipynb\" ) # False Test5 Q1: \u82e5\u67d0 k \u4f4d\u6578\u7684\u6b63\u6574\u6578,\u5176\u6240\u6709\u4f4d\u6578\u6578\u5b57\u7684 k \u6b21\u65b9\u548c\u7b49\u65bc\u8a72\u6578\u76f8\u7b49,\u5247\u7a31\u70ba\u963f\u59c6\u65af\u58ef\u6578 (Armstrong number)\u3002 \u4f8b\u5982 1^3 + 5^3 + 3^3 = 153, \u5247 153 \u662f\u4e00\u500b\u963f\u59c6\u65af\u58ef\u6578\u3002 \u8acb\u5275\u5efa\u4e00\u500b Generator \u51fd\u5f0f,\u627e\u51fa 100 ~ 999 \u7684\u6240\u6709\u4e09\u4f4d\u6578\u7684\u963f\u59c6\u65af\u58ef\u6578; \u5229\u7528 yield \u56de\u50b3\u6578\u503c,\u4e26\u4e14\u7528\u591a\u6b21\u547c\u53eb\u7684\u65b9\u5f0f,\u4f9d\u5e8f\u5217\u5370\u51fa\u6240\u627e\u5230\u7684\u963f\u59c6\u65af\u58ef\u6578\u3002 for i in range ( 100 , 1000 ): arr = str ( i ) ans = int ( arr [ 0 ]) ** 3 + int ( arr [ 1 ]) ** 3 + int ( arr [ 2 ]) ** 3 if ans == i : print ( i ) def armstrong_number (): for i in range ( 100 , 1000 ): ans = 0 temp = i while temp > 0 : digit = temp % 10 ans += digit ** 3 temp //= 10 if ans == i : yield ans a = armstrong_number () try : while ( True ): print ( a . __next__ ()) except StopIteration : print ( \"The End\" )","title":"11.\u7522\u751f\u5668"},{"location":"11.\u7522\u751f\u5668/#11","text":"","title":"11.\u7522\u751f\u5668"},{"location":"11.\u7522\u751f\u5668/#generator-with-for-loop","text":"\u751f\u6210\u5668\u6703\u4f9d\u64dayield\u4e00\u6b65\u4e00\u6b65\u5f80\u4e0b\u8d70\u76f4\u9047\u5230return\u4e1f\u51faerror\u70ba\u6b62 # with for loop def generator_example (): a = 1 yield print ( a ) # 1 a += 1 yield print ( a ) # 2 return for i in generator_example (): continue # Output: 1 2","title":"Generator with for loop"},{"location":"11.\u7522\u751f\u5668/#generator-with-next-avoid-stopiteration-error","text":"\u624b\u52d5\u57f7\u884c\u751f\u6210\u5668 # with next def generator_example (): yield print ( 1 ) yield print ( 2 ) return gen = generator_example () gen . __next__ () # 1 gen . __next__ () # 2 gen . __next__ () # raise StopIteration Error \u4f7f\u7528\u4f8b\u5916\u63a5\u53d6\u932f\u8aa4 # avoid StopIteration Error try : gen . __next__ () except StopIteration : pass # do nothing","title":"Generator with next, avoid StopIteration Error"},{"location":"11.\u7522\u751f\u5668/#benefits-memory-usage","text":"\u751f\u6210\u5668\u7684\u597d\u8655 \u6e1b\u5c11\u8a18\u61b6\u9ad4\u4f7f\u7528\u91cf # \u5229\u7528 list \u8fed\u4ee3 range_num = 10 for i in [ x * x for x in range ( range_num )]: pass # do something # \u5229\u7528 generator \u8fed\u4ee3 for i in ( x * x for x in range ( range_num )): pass # do something","title":"Benefits - Memory Usage"},{"location":"11.\u7522\u751f\u5668/#module","text":"# A module is a file containing Python definitions and statements. import re import re as r from re import findall from re import *","title":"Module"},{"location":"11.\u7522\u751f\u5668/#module-os","text":"import os # \u986f\u793a\u7d55\u5c0d\u8def\u5f91 os . path . abspath ( \"session_1-ans.ipynb\" ) # '/Users/felix/Python/session_1-ans.ipynb' # \u5c07\u591a\u500b\u5b57\u4e32\u7d44\u5408\u70ba\u8def\u5f91 '/' . join ([ 'path' , 'result' , 'a.csv' ]) # 'path/result/a.csv' # \u5c07\u591a\u500b\u5b57\u4e32\u7d44\u5408\u70ba\u8def\u5f91 os . path . join ( 'path' , 'result' , 'a.csv' ) # 'path/result/a.csv' # \u6aa2\u67e5\u67d0\u8def\u5f91/\u8cc7\u6599\u593e\u662f\u5426\u5b58\u5728 os . path . exists ( \"python\\session_1-ans.ipynb\" ) # False","title":"Module - os"},{"location":"11.\u7522\u751f\u5668/#test5","text":"Q1: \u82e5\u67d0 k \u4f4d\u6578\u7684\u6b63\u6574\u6578,\u5176\u6240\u6709\u4f4d\u6578\u6578\u5b57\u7684 k \u6b21\u65b9\u548c\u7b49\u65bc\u8a72\u6578\u76f8\u7b49,\u5247\u7a31\u70ba\u963f\u59c6\u65af\u58ef\u6578 (Armstrong number)\u3002 \u4f8b\u5982 1^3 + 5^3 + 3^3 = 153, \u5247 153 \u662f\u4e00\u500b\u963f\u59c6\u65af\u58ef\u6578\u3002 \u8acb\u5275\u5efa\u4e00\u500b Generator \u51fd\u5f0f,\u627e\u51fa 100 ~ 999 \u7684\u6240\u6709\u4e09\u4f4d\u6578\u7684\u963f\u59c6\u65af\u58ef\u6578; \u5229\u7528 yield \u56de\u50b3\u6578\u503c,\u4e26\u4e14\u7528\u591a\u6b21\u547c\u53eb\u7684\u65b9\u5f0f,\u4f9d\u5e8f\u5217\u5370\u51fa\u6240\u627e\u5230\u7684\u963f\u59c6\u65af\u58ef\u6578\u3002 for i in range ( 100 , 1000 ): arr = str ( i ) ans = int ( arr [ 0 ]) ** 3 + int ( arr [ 1 ]) ** 3 + int ( arr [ 2 ]) ** 3 if ans == i : print ( i ) def armstrong_number (): for i in range ( 100 , 1000 ): ans = 0 temp = i while temp > 0 : digit = temp % 10 ans += digit ** 3 temp //= 10 if ans == i : yield ans a = armstrong_number () try : while ( True ): print ( a . __next__ ()) except StopIteration : print ( \"The End\" )","title":"Test5"},{"location":"12.\u96a8\u6a5f\u6578random/","text":"12.\u96a8\u6a5f\u6578random","title":"12.\u96a8\u6a5f\u6578random"},{"location":"12.\u96a8\u6a5f\u6578random/#12random","text":"","title":"12.\u96a8\u6a5f\u6578random"},{"location":"13.\u6578\u5b78math/","text":"13.\u6578\u5b78math","title":"13.\u6578\u5b78math"},{"location":"13.\u6578\u5b78math/#13math","text":"","title":"13.\u6578\u5b78math"},{"location":"14.\u65e5\u671f\u548c\u6642\u9593datetime/","text":"14.\u65e5\u671f\u548c\u6642\u9593datetime","title":"14.\u65e5\u671f\u548c\u6642\u9593datetime"},{"location":"14.\u65e5\u671f\u548c\u6642\u9593datetime/#14datetime","text":"","title":"14.\u65e5\u671f\u548c\u6642\u9593datetime"},{"location":"15.\u6b63\u898f\u8868\u793a\u5f0fre/","text":"15.\u6b63\u898f\u8868\u793a\u5f0fre import re string = \"This is demo string, do nothing!\" pattern = \"is\" # Return a list of all non-overlapping matches in the string. print ( re . findall ( pattern , string )) # ['is', 'is'] find numbers, letters import re # find numbers pattern = \"[0-9]+\" string = '12 drummers drumming, 111 pipers piping, 1006 lords a - leaping ' re . findall ( pattern , string ) # ['12', '111', '1006'] # find letters pattern = \"[cmf]an\" string = 'find: can, man, fan, skip: dan, ran, pan' re . findall ( pattern , string ) # ['can', 'man', 'fan'] find e-mail import re email_text = \"\"\" Big Data Analytics/ Deep LearningSocial Computing / Computational Social Science / Crowdsourcing Multimediaand Network SystemsQuality of ExperienceInformation SecurityPh.D. candidate at NTU EEchihfan02-27883799#1602Camera CalibrationComputer VisionData Analysiscmchang02-27883799#1671System OptimizationMachine LearningyusraBig data analysiscclin02-27883799#1668Data Analysisrusi02-27883799#1668Government Procurement ActFinancial Managementkatekuen02-27883799#1602AdministrationEvent Planningseanyu02-27883799#1668Data AnalysisPsychology & NeuroscienceMarketingxinchinchenEmbedded Systemkyoyachuan062602-27883799 #1601FinTechActuarial ScienceData Analysiskai0604602-27883799#1601Data AnalysisMachine Learningchloe02-27839427Accountingafun02-27883799 felix2018@iis.sinica.edu.tw #1673Data AnalysisWeb developmentyunhsu198902-27883799#1668MarketingTIGP Ph.D. Fellow at Academia Sinica & NCCUbaowalyMachine LearningData AnalysisSocial Computingchangyc1427883799#1678 Data Analysisjimmy1592302-2788379 jimmy15923@iis.sinica.com.tw#1688Data AnalysisjasontangAnalysisMachine Learninguchen02-27883799#1668Deep Learningpjwu02-27883799#1604Computational PhotographyData Analysis \"\"\" re . findall ( \"([A-Za-z0-9._]+@[A-Za-z.]+[com|edu]\\.tw)\" , email_text ) # Output: ['felix2018@iis.sinica.edu.tw', 'jimmy15923@iis.sinica.com.tw'] Test6 Q1. \u540c\u6642\u5339\u914d abcdefg, abcde, abc Q2. \u540c\u6642\u5339\u914d abc123xyz, abcde22a, abc456aaa Q3. \u5339\u914d \"catcat\" (\u5305\u542b \") Q4. \u540c\u6642\u5339\u914d wazzzzzup, wazzzup Q5. \u540c\u6642\u5339\u914d aaaabcc, aabbbbc, aacc Q6. \u5339\u914d\u624b\u6a5f\u865f\u78bc, \u683c\u5f0f\u70ba:0987-654-321 Q7. \u5339\u914d\u53f3\u65b9\u683c\u5f0f, xxx.xxx.xxx.xxx (\u5176\u4e2d x \u662f 0~9 \u7684\u6578\u5b57) Q1. [a-z]* Q2. [a-z]*[0-9]*[a-z]* Q3. \\\"(cat){2}\\\" Q4. wa(z{3}|z{5})up \u6216 waz{3,5}up Q5. [abc]+ Q6. [0-9]{4}\\-[0-9]{3}\\-[0-9]{3} Q7. [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3} \u6216 ([0-9]{1,3}\\.){3}[0-9]{1,3}","title":"15.\u6b63\u898f\u8868\u793a\u5f0fre"},{"location":"15.\u6b63\u898f\u8868\u793a\u5f0fre/#15re","text":"import re string = \"This is demo string, do nothing!\" pattern = \"is\" # Return a list of all non-overlapping matches in the string. print ( re . findall ( pattern , string )) # ['is', 'is']","title":"15.\u6b63\u898f\u8868\u793a\u5f0fre"},{"location":"15.\u6b63\u898f\u8868\u793a\u5f0fre/#find-numbers-letters","text":"import re # find numbers pattern = \"[0-9]+\" string = '12 drummers drumming, 111 pipers piping, 1006 lords a - leaping ' re . findall ( pattern , string ) # ['12', '111', '1006'] # find letters pattern = \"[cmf]an\" string = 'find: can, man, fan, skip: dan, ran, pan' re . findall ( pattern , string ) # ['can', 'man', 'fan']","title":"find numbers, letters"},{"location":"15.\u6b63\u898f\u8868\u793a\u5f0fre/#find-e-mail","text":"import re email_text = \"\"\" Big Data Analytics/ Deep LearningSocial Computing / Computational Social Science / Crowdsourcing Multimediaand Network SystemsQuality of ExperienceInformation SecurityPh.D. candidate at NTU EEchihfan02-27883799#1602Camera CalibrationComputer VisionData Analysiscmchang02-27883799#1671System OptimizationMachine LearningyusraBig data analysiscclin02-27883799#1668Data Analysisrusi02-27883799#1668Government Procurement ActFinancial Managementkatekuen02-27883799#1602AdministrationEvent Planningseanyu02-27883799#1668Data AnalysisPsychology & NeuroscienceMarketingxinchinchenEmbedded Systemkyoyachuan062602-27883799 #1601FinTechActuarial ScienceData Analysiskai0604602-27883799#1601Data AnalysisMachine Learningchloe02-27839427Accountingafun02-27883799 felix2018@iis.sinica.edu.tw #1673Data AnalysisWeb developmentyunhsu198902-27883799#1668MarketingTIGP Ph.D. Fellow at Academia Sinica & NCCUbaowalyMachine LearningData AnalysisSocial Computingchangyc1427883799#1678 Data Analysisjimmy1592302-2788379 jimmy15923@iis.sinica.com.tw#1688Data AnalysisjasontangAnalysisMachine Learninguchen02-27883799#1668Deep Learningpjwu02-27883799#1604Computational PhotographyData Analysis \"\"\" re . findall ( \"([A-Za-z0-9._]+@[A-Za-z.]+[com|edu]\\.tw)\" , email_text ) # Output: ['felix2018@iis.sinica.edu.tw', 'jimmy15923@iis.sinica.com.tw']","title":"find e-mail"},{"location":"15.\u6b63\u898f\u8868\u793a\u5f0fre/#test6","text":"Q1. \u540c\u6642\u5339\u914d abcdefg, abcde, abc Q2. \u540c\u6642\u5339\u914d abc123xyz, abcde22a, abc456aaa Q3. \u5339\u914d \"catcat\" (\u5305\u542b \") Q4. \u540c\u6642\u5339\u914d wazzzzzup, wazzzup Q5. \u540c\u6642\u5339\u914d aaaabcc, aabbbbc, aacc Q6. \u5339\u914d\u624b\u6a5f\u865f\u78bc, \u683c\u5f0f\u70ba:0987-654-321 Q7. \u5339\u914d\u53f3\u65b9\u683c\u5f0f, xxx.xxx.xxx.xxx (\u5176\u4e2d x \u662f 0~9 \u7684\u6578\u5b57) Q1. [a-z]* Q2. [a-z]*[0-9]*[a-z]* Q3. \\\"(cat){2}\\\" Q4. wa(z{3}|z{5})up \u6216 waz{3,5}up Q5. [abc]+ Q6. [0-9]{4}\\-[0-9]{3}\\-[0-9]{3} Q7. [0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3} \u6216 ([0-9]{1,3}\\.){3}[0-9]{1,3}","title":"Test6"},{"location":"16.\u6a94\u6848\u8655\u7406os/","text":"16.\u6a94\u6848\u8655\u7406os","title":"16.\u6a94\u6848\u8655\u7406os"},{"location":"16.\u6a94\u6848\u8655\u7406os/#16os","text":"","title":"16.\u6a94\u6848\u8655\u7406os"},{"location":"17.Numpy/","text":"17.Numpy axis=0 \u5217 axis=1 \u884c # one axis [ 1 , 3 , 5 ] # 3 elements, it has a length of 3. # 2 axes [[ 1 , 3 , 5 ], [ 2 , 4 , 6 ]] # The first axis has a length of 2, # the second axis has a length of 3. Create ndarray import numpy as np # create 1 axis array x = np . arange ( 3 ) # [0, 1, 2] print ( type ( x )) # <class 'numpy.ndarray'> # check if ndarray type isinstance ( x , np . ndarray ) # True # be explicitly specified type y = np . arange ( 3 , dtype = 'float64' ) # [ 0. 1. 2.] import numpy as np existed_list = [ 18 , 15 , 21 , 10 , 88 , 76 , 29 , 20 ] np_array = np . array ( existed_list ) print ( np_array ) # [18 15 21 10 88 76 29 20] Attributes of ndarray import numpy as np x = np . arange ( 3 ) # [0, 1, 2] # ndim - the number of axes (dimensions) of the array. print ( x . ndim ) # 1 dim # shape - the dimensions of the array. print ( x . shape ) # (3, ) # size - the total number of elements of the array. print ( x . size ) # 3 # dtype - the type of the elements in the array. print ( x . dtype ) # int64 Axes reshape x = np . arange ( 6 ) print ( x ) # [0 1 2 3 4 5] new_shape = x . reshape ( 2 , 3 ) print ( new_shape ) # [[0 1 2] # [3 4 5]] # equivalently new_shape = np . reshape ( x , ( 2 , 3 )) # also can be one line to create and reshpae y = np . arange ( 6 ) . reshape ( 2 , 3 ) Initial placeholder content # np.zeros - full of zeros np . zeros ( 3 ) # array([ 0., 0., 0.]) np . zeros (( 2 , 3 )) # array([[ 0., 0., 0.], # [ 0., 0., 0.]]) # np.ones - full of ones np . ones (( 2 , 3 )) # array([[ 1., 1., 1.], # [ 1., 1., 1.]]) # np.identity - a square array with ones on the main diagonal np . identity ( 3 ) # array([[ 1., 0., 0.], # [ 0., 1., 0.], # [ 0., 0., 1.]]) Array Index import numpy as np # 1-D array x = np . arange ( 6 ) # array([0, 1, 2, 3, 4, 5]) x [ 2 ] # 2 x [ - 2 ] # 4 # 2-D array x = np . arange ( 6 ) . reshape ( 2 , 3 ) #[[0, 1, 2], # [3, 4, 5]]) x [ 0 , 2 ] # 2 x [ 1 , - 1 ] # 5 Array Slice & Stride (1-D array) import numpy as np x = np . arange ( 6 ) # array([0, 1, 2, 3, 4, 5]) x [ 1 : 5 ] # [1, 2, 3, 4] x [: 2 ] # [0, 1] x [ 1 : 5 : 2 ] # [1, 3] Array Slice & Stride (2-D array) import numpy as np x = np . arange ( 6 ) . reshape ( 2 , 3 ) #[[0, 1, 2], # [3, 4, 5]]) x [ 0 , 0 : 2 ] # [0, 1] x [:, 1 :] # [[1, 2], # [4, 5]] x [:: 1 , :: 2 ] # [[0, 2], # [3, 5]] Boolean / Mask Index import numpy as np x = np . arange ( 6 ) # array([0, 1, 2, 3, 4, 5]) condition = x < 3 x [ condition ] # [0, 1, 2] x [ condition ] = 0 x # [0, 0, 0, 3, 4, 5] Concatenate import numpy as np a = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) b = np . array ([[ 7 , 8 , 9 ]]) np . concatenate (( a , b ), axis = 0 ) # [[1, 2, 3], # [4, 5, 6], # [7, 8, 9]] c = [[ 0 ], [ 0 ]] np . concatenate (( a , c ), axis = 1 ) # [[1, 2, 3, 0], # [4, 5, 6, 0]] Basic Operations \u53ef\u4ee5\u505a\u4e00\u500b\u6216\u5169\u500barray\u7684\u6578\u5b78\u904b\u7b97 import numpy as np a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 5 , 6 ], [ 7 , 8 ]]) print ( a + b ) # array([[6, 8], [10, 12]]) print ( a - b ) # array([[-4, -4], [-4, -4]]) print ( a * b ) # array([[5, 12], [21, 32]]) print ( a / b ) # array([[0.2, 0.33333333], [0.42857143, 0.5]] print ( a - 1 ) # array([[0, 1], [2, 3]]) print ( a * 2 ) # array([[2, 4], [6, 8]]) Basic Linear Algebra \u8f49\u7f6e\u77e9\u9663:m * n \u77e9\u9663\u5728\u5411\u91cf\u7a7a\u9593\u4e0a\u8f49\u7f6e\u70ba n * m \u77e9\u9663 \u9006\u77e9\u9663:n * n \u77e9\u9663 A \u5b58\u5728\u4e00\u500b n * n \u77e9\u9663 B,\u4f7f\u5f97 AB = BA = I import numpy as np a = np . array ([[ 0 , 1 ],[ 2 , 3 ]]) # \u8f49\u7f6e\u77e9\u9663 print ( a . T ) #[[0, 2], # [1, 3]] # \u9006\u77e9\u9663 inverse = np . linalg . inv ( a ) print ( inverse ) # [[-1.5, 0.5] # [1, 0]] # \u5167\u7a4d print ( np . dot ( a , inverse )) # [[ 1. 0.] # [ 0. 1.]] Test Q1. Create a vector with values ranging from 10 to 49 by np.arange Q2. Reverse a vector (first element becomes last) Q3. Create a 3x3x3 array with random values by np.random.random Q4. Create a 10x10 array with random values and find the minimum and maximum values by np.min, np.max Q5. Add a border (filled with 0's) around an 3 * 3 matrix with 1 by np.pad Q6. Normalize a 5x5 random matrix by divide max number #Q1 arr = np . arange ( 10 , 50 ) print ( arr ) #Q2 arr = np . arange ( 10 , 50 ) arr = arr [:: - 1 ] print ( arr ) #Q3 arr = np . random . random (( 3 , 3 , 3 )) print ( arr ) #Q4 arr = np . random . random (( 10 , 10 )) print ( arr ) np . min ( arr ) np . max ( arr ) #Q5 arr = np . ones (( 3 , 3 )) arr = np . pad ( arr , pad_width = 1 , mode = 'constant' , constant_values = 0 ) print ( arr ) #Q6 arr = np . random . random (( 5 , 5 )) print ( arr ) max = np . max ( arr ) arr = arr / max print ( arr ) Q7. Given a 1D array, negate all elements which are between 3 and 8, in place. Q8. Extract from the array np.array([3,4,6,10,24,89,45,43,46,99,100]) with Boolean masking all the number: (1) which are not divisible by 3 (2) which are divisible by 5 (3) which are divisible by 3 and 5 Q9. Create random vector of size 10 and replace the maximum value by 0 (np.argmax) Q10. Create a 5x5 matrix with row values ranging from 0 to 4 #Q7 arr = np . arange ( 11 ) arr [( 3 <= arr ) & ( 8 >= arr )] *=- 1 print ( arr ) #Q8 arr = np . array ([ 3 , 4 , 6 , 10 , 24 , 89 , 45 , 43 , 46 , 99 , 100 ]) arr1 = arr [ arr % 3 != 0 ] print ( arr1 ) arr2 = arr [ arr % 5 == 0 ] print ( arr2 ) arr3 = arr [( arr % 3 == 0 ) & ( arr % 5 == 0 )] print ( arr3 ) #Q9 arr = np . random . random ( 10 ) print ( arr ) arr [ arr . argmax ()] = 0 print ( arr ) #Q10 Z = np . zeros (( 5 , 5 )) Z += np . arange ( 5 ) print ( Z ) \u6578\u64da\u62fc\u63a5 \u65b0\u589e\u8cc7\u6599 a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 5 , 6 ]]) np . concatenate (( a , b ), axis = 0 ) array([[1, 2], [3, 4], [5, 6]]) \u65b0\u589e\u6b04\u4f4d a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 5 , 6 ]]) np . concatenate (( a , b . T ), axis = 1 ) array([[1, 2, 5], [3, 4, 6]])","title":"17.Numpy"},{"location":"17.Numpy/#17numpy","text":"axis=0 \u5217 axis=1 \u884c # one axis [ 1 , 3 , 5 ] # 3 elements, it has a length of 3. # 2 axes [[ 1 , 3 , 5 ], [ 2 , 4 , 6 ]] # The first axis has a length of 2, # the second axis has a length of 3.","title":"17.Numpy"},{"location":"17.Numpy/#create-ndarray","text":"import numpy as np # create 1 axis array x = np . arange ( 3 ) # [0, 1, 2] print ( type ( x )) # <class 'numpy.ndarray'> # check if ndarray type isinstance ( x , np . ndarray ) # True # be explicitly specified type y = np . arange ( 3 , dtype = 'float64' ) # [ 0. 1. 2.] import numpy as np existed_list = [ 18 , 15 , 21 , 10 , 88 , 76 , 29 , 20 ] np_array = np . array ( existed_list ) print ( np_array ) # [18 15 21 10 88 76 29 20]","title":"Create ndarray"},{"location":"17.Numpy/#attributes-of-ndarray","text":"import numpy as np x = np . arange ( 3 ) # [0, 1, 2] # ndim - the number of axes (dimensions) of the array. print ( x . ndim ) # 1 dim # shape - the dimensions of the array. print ( x . shape ) # (3, ) # size - the total number of elements of the array. print ( x . size ) # 3 # dtype - the type of the elements in the array. print ( x . dtype ) # int64","title":"Attributes of ndarray"},{"location":"17.Numpy/#axes-reshape","text":"x = np . arange ( 6 ) print ( x ) # [0 1 2 3 4 5] new_shape = x . reshape ( 2 , 3 ) print ( new_shape ) # [[0 1 2] # [3 4 5]] # equivalently new_shape = np . reshape ( x , ( 2 , 3 )) # also can be one line to create and reshpae y = np . arange ( 6 ) . reshape ( 2 , 3 )","title":"Axes reshape"},{"location":"17.Numpy/#initial-placeholder-content","text":"# np.zeros - full of zeros np . zeros ( 3 ) # array([ 0., 0., 0.]) np . zeros (( 2 , 3 )) # array([[ 0., 0., 0.], # [ 0., 0., 0.]]) # np.ones - full of ones np . ones (( 2 , 3 )) # array([[ 1., 1., 1.], # [ 1., 1., 1.]]) # np.identity - a square array with ones on the main diagonal np . identity ( 3 ) # array([[ 1., 0., 0.], # [ 0., 1., 0.], # [ 0., 0., 1.]])","title":"Initial placeholder content"},{"location":"17.Numpy/#array-index","text":"import numpy as np # 1-D array x = np . arange ( 6 ) # array([0, 1, 2, 3, 4, 5]) x [ 2 ] # 2 x [ - 2 ] # 4 # 2-D array x = np . arange ( 6 ) . reshape ( 2 , 3 ) #[[0, 1, 2], # [3, 4, 5]]) x [ 0 , 2 ] # 2 x [ 1 , - 1 ] # 5","title":"Array Index"},{"location":"17.Numpy/#array-slice-stride-1-d-array","text":"import numpy as np x = np . arange ( 6 ) # array([0, 1, 2, 3, 4, 5]) x [ 1 : 5 ] # [1, 2, 3, 4] x [: 2 ] # [0, 1] x [ 1 : 5 : 2 ] # [1, 3]","title":"Array Slice &amp; Stride (1-D array)"},{"location":"17.Numpy/#array-slice-stride-2-d-array","text":"import numpy as np x = np . arange ( 6 ) . reshape ( 2 , 3 ) #[[0, 1, 2], # [3, 4, 5]]) x [ 0 , 0 : 2 ] # [0, 1] x [:, 1 :] # [[1, 2], # [4, 5]] x [:: 1 , :: 2 ] # [[0, 2], # [3, 5]]","title":"Array Slice &amp; Stride (2-D array)"},{"location":"17.Numpy/#boolean-mask-index","text":"import numpy as np x = np . arange ( 6 ) # array([0, 1, 2, 3, 4, 5]) condition = x < 3 x [ condition ] # [0, 1, 2] x [ condition ] = 0 x # [0, 0, 0, 3, 4, 5]","title":"Boolean / Mask Index"},{"location":"17.Numpy/#concatenate","text":"import numpy as np a = np . array ([[ 1 , 2 , 3 ], [ 4 , 5 , 6 ]]) b = np . array ([[ 7 , 8 , 9 ]]) np . concatenate (( a , b ), axis = 0 ) # [[1, 2, 3], # [4, 5, 6], # [7, 8, 9]] c = [[ 0 ], [ 0 ]] np . concatenate (( a , c ), axis = 1 ) # [[1, 2, 3, 0], # [4, 5, 6, 0]]","title":"Concatenate"},{"location":"17.Numpy/#basic-operations","text":"\u53ef\u4ee5\u505a\u4e00\u500b\u6216\u5169\u500barray\u7684\u6578\u5b78\u904b\u7b97 import numpy as np a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 5 , 6 ], [ 7 , 8 ]]) print ( a + b ) # array([[6, 8], [10, 12]]) print ( a - b ) # array([[-4, -4], [-4, -4]]) print ( a * b ) # array([[5, 12], [21, 32]]) print ( a / b ) # array([[0.2, 0.33333333], [0.42857143, 0.5]] print ( a - 1 ) # array([[0, 1], [2, 3]]) print ( a * 2 ) # array([[2, 4], [6, 8]])","title":"Basic Operations"},{"location":"17.Numpy/#basic-linear-algebra","text":"\u8f49\u7f6e\u77e9\u9663:m * n \u77e9\u9663\u5728\u5411\u91cf\u7a7a\u9593\u4e0a\u8f49\u7f6e\u70ba n * m \u77e9\u9663 \u9006\u77e9\u9663:n * n \u77e9\u9663 A \u5b58\u5728\u4e00\u500b n * n \u77e9\u9663 B,\u4f7f\u5f97 AB = BA = I import numpy as np a = np . array ([[ 0 , 1 ],[ 2 , 3 ]]) # \u8f49\u7f6e\u77e9\u9663 print ( a . T ) #[[0, 2], # [1, 3]] # \u9006\u77e9\u9663 inverse = np . linalg . inv ( a ) print ( inverse ) # [[-1.5, 0.5] # [1, 0]] # \u5167\u7a4d print ( np . dot ( a , inverse )) # [[ 1. 0.] # [ 0. 1.]]","title":"Basic Linear Algebra"},{"location":"17.Numpy/#test","text":"Q1. Create a vector with values ranging from 10 to 49 by np.arange Q2. Reverse a vector (first element becomes last) Q3. Create a 3x3x3 array with random values by np.random.random Q4. Create a 10x10 array with random values and find the minimum and maximum values by np.min, np.max Q5. Add a border (filled with 0's) around an 3 * 3 matrix with 1 by np.pad Q6. Normalize a 5x5 random matrix by divide max number #Q1 arr = np . arange ( 10 , 50 ) print ( arr ) #Q2 arr = np . arange ( 10 , 50 ) arr = arr [:: - 1 ] print ( arr ) #Q3 arr = np . random . random (( 3 , 3 , 3 )) print ( arr ) #Q4 arr = np . random . random (( 10 , 10 )) print ( arr ) np . min ( arr ) np . max ( arr ) #Q5 arr = np . ones (( 3 , 3 )) arr = np . pad ( arr , pad_width = 1 , mode = 'constant' , constant_values = 0 ) print ( arr ) #Q6 arr = np . random . random (( 5 , 5 )) print ( arr ) max = np . max ( arr ) arr = arr / max print ( arr ) Q7. Given a 1D array, negate all elements which are between 3 and 8, in place. Q8. Extract from the array np.array([3,4,6,10,24,89,45,43,46,99,100]) with Boolean masking all the number: (1) which are not divisible by 3 (2) which are divisible by 5 (3) which are divisible by 3 and 5 Q9. Create random vector of size 10 and replace the maximum value by 0 (np.argmax) Q10. Create a 5x5 matrix with row values ranging from 0 to 4 #Q7 arr = np . arange ( 11 ) arr [( 3 <= arr ) & ( 8 >= arr )] *=- 1 print ( arr ) #Q8 arr = np . array ([ 3 , 4 , 6 , 10 , 24 , 89 , 45 , 43 , 46 , 99 , 100 ]) arr1 = arr [ arr % 3 != 0 ] print ( arr1 ) arr2 = arr [ arr % 5 == 0 ] print ( arr2 ) arr3 = arr [( arr % 3 == 0 ) & ( arr % 5 == 0 )] print ( arr3 ) #Q9 arr = np . random . random ( 10 ) print ( arr ) arr [ arr . argmax ()] = 0 print ( arr ) #Q10 Z = np . zeros (( 5 , 5 )) Z += np . arange ( 5 ) print ( Z )","title":"Test"},{"location":"17.Numpy/#_1","text":"\u65b0\u589e\u8cc7\u6599 a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 5 , 6 ]]) np . concatenate (( a , b ), axis = 0 ) array([[1, 2], [3, 4], [5, 6]]) \u65b0\u589e\u6b04\u4f4d a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 5 , 6 ]]) np . concatenate (( a , b . T ), axis = 1 ) array([[1, 2, 5], [3, 4, 6]])","title":"\u6578\u64da\u62fc\u63a5"},{"location":"18.Pandas/","text":"18.Pandas Why Pandas? - Easy to visualize - Easy to present - Easy to manipulate data as SQL - High-performance containers for data analysis What will you learn ? - How to work with pandas - Exploratory data analysis - statistical & graphical methods - Using pandas to deal with time series data - Time indices, resampling Store Data in DataFrame method_1 import pandas as pd df = pd . DataFrame ({ 'names' : [ 'Bob' , 'Jessica' , 'Mary' , 'John' , 'Mel' ], 'births' : [ 968 , 155 , 77 , 578 , 973 ] }) method_2 import pandas as pd # The inital set of baby names and bith rates names = [ 'Bob' , 'Jessica' , 'Mary' , 'John' , 'Mel' , 'Jim' ] births = [ 968 , 155 , 77 , 578 , 973 , 968 ] BabyDataSet = list ( zip ( names , births )) df = pd . DataFrame ( BabyDataSet , columns = [ 'Names' , 'Births' ]) # \u5c07\u8cc7\u6599\u5132\u5b58\u6210 csv df . to_csv ( \"birth_data.csv\" , index = True ) # \u8b80\u53d6 csv df = pd . read_csv ( \"birth_data.csv\" ) ## \u89c0\u5bdf\u524d\u4e94\u5217 df . head () Work With CSV Check point of CSV file - header - row index - encoding Work With CSV - check header import pandas as pd df = pd . read_csv ( 'birth_data.csv' , names = [ 'births' , 'names' ]) Work With CSV - check row index import pandas as pd df = pd . read_csv ( 'birth_data.csv' , index_col = 0 ) Partial Data Instead of viewing the whole data, sometimes we just need to check the brief information. df . head ( n = 5 ) # top n rows df . tail ( n = 5 ) # last n rows df [ 1 : 5 ] # 1 to 4 rows df . sample ( 5 ) # random pick n rows Make a Dataset import numpy as np import pandas as pd # # set seed np . random . seed ( 111 ) # Function to generate test data def CreateDataSet ( Number = 1 ): Output = [] for i in range ( Number ): # Create a weekly (mondays) date range rng = pd . date_range ( start = '1/1/2009' , end = '12/31/2012' , freq = 'W-MON' ) #random number generator # Create random data data = np . random . randint ( low = 25 , high = 1000 , size = len ( rng )) # Status pool status = [ 1 , 2 , 3 ] # Make a random list of statuses random_status = [ status [ np . random . randint ( low = 0 , high = len ( status ))] for i in range ( len ( rng ))] # State pool states = [ 'GA' , 'FL' , 'fl' , 'NY' , 'NJ' , 'TX' ] # Make a random list of states random_states = [ states [ np . random . randint ( low = 0 , high = len ( states ))] for i in range ( len ( rng ))] Output . extend ( zip ( random_states , random_status , data , rng )) #extend& append \u5dee\u7570 return Output ``` ``` py dataset = CreateDataSet ( 4 ) dataset len ( dataset ) #check shape df = pd . DataFrame ( data = dataset , columns = [ 'State' , 'Status' , 'CustomerCount' , 'StatusDate' ]) df . head ( 10 ) Data Observation Exploring data with useful method df [ 'State' ] . unique () # get the set of unique value df [ 'State' ] . value_counts () # get the counts of each value df . info () # get the brief info Index and Select Data Square brackets Advanced methods loc iloc Column Access # DataFrame this would be a DataFrame df [[ \"CustomerCount\" ]] df [[ \"State\" , \"Status\" ]][ 1 : 3 ] # Series this would be a series df [ \"CustomerCount\" ] df [ \"StatusDate\" ][ 100 : 105 ] Index and Select Data - Row Access df[2:9] \u2192\u6703\u5370\u51faindex\u70ba2 \u5230 index\u70ba8 \u7684\u503c Slicing with Pandas Pandas slicing - DataFrame.loc (label-based) - DataFrame.iloc (integer position-based) slicing with pandas - loc # select specific row(0 1 2 3) print ( df . loc [ 0 : 3 ]) # subset all row and specific columns print ( df . loc [:,[ \"State\" , \"Status\" ]] . head ()) # \u53ea\u53d6State\u6b04\u4f4d print ( df . loc [ 0 : 5 , \"State\" ]) Slicing with Pandas -iloc # row access(\u5207\u7247\u6240\u4ee5\u53ea\u67090 1 2) print ( df . iloc [ 0 : 3 ]) # subset all row and specific columns print ( df . iloc [ 1 : 5 ,[ 0 , 1 ]]) # \u53ea\u53d6State\u6b04\u4f4d print ( df . iloc [:, 1 ] . head ()) print ( df . iloc [:, 1 ] . head () . values ) Conditional Data Sometimes, we need to estimate data behavior with given statement df . loc [ df . State == 'FL' ] df . loc [( df . State == 'FL' ) & ( df [ 'Status' ] == 3 )] Columns Observation Intuitively, a column of values is a vector print ( df [ 'Status' ]) print ( df [ 'Status' ] . values ) Generate a vector - numerical operation We know we can create a new column by assigning new vector.How about basic numerical operation? print ( df [ 'Status' ] + 1 ) Generate a vector by function But we want more than numerical operation. Try functional programming ! # apply func to each column print ( df . apply ( len , axis = 0 )) # apply func to each row print ( df . apply ( len , axis = 1 )) Generate a vector by function Design our own function and do more ! def text ( x ): status = x [ 'Status' ] return 'correct' if status == 1 else 'error' df [ 'StatusText' ] = df . apply ( text , axis = 1 ) Get the summary data by group We just learned how to get the data with condition! e.g. I want to know the total count in each state df2 = df . loc [ df [ 'State' ] == 'NJ' ] total = 0 for count in df2 [ 'CustomerCount' ]: total += count print ( total ) # could we do calculation only once? How to grouping data? # group the data by given column name g_state = df . groupby ([ 'State' ]) g_state . size () Get the grouped dataframe # group the data by given column name g_state = df . groupby ([ 'State' ]) # get the group data g_state . get_group ( 'NJ' ) Get the grouped data summary # group the data by given column name g_state = df . groupby ([ 'State' ]) # sum all the numerical data g_state . sum () Group by multiple indexes and hierarchical # group the data by given column name g_state = df . groupby ( [ 'StatusDate' , 'State' ], sort = True ) . sum () Combine DataFrame When we try to combine similar Dataframe, we can easily use pd . concat ([ df1 , df2 ]) Concept of Joint Dataframe When the row and column do not fully match, we have to consider the strategy to merge Dataframe. - LEFT join - RIGHT join - OUTER join - INNER join Left join pd . merge ( left , right , on = [ 'key1' , 'key2' ], how = 'left' ) Right join pd . merge ( left , right , on = [ 'key1' , 'key2' ], how = 'right' ) Full Outer join pd . merge ( left , right , on = [ 'key1' , 'key2' ], how = 'outer' ) Inner join pd . merge ( left , right , on = [ 'key1' , 'key2' ], how = 'inner' ) Pandas \u6b04\u4f4d\u540d\u7a31\u6392\u5e8f data = pd . read_csv ( './data.csv' ) newData = data [ sorted ( data ) ]","title":"18.Pandas"},{"location":"18.Pandas/#18pandas","text":"Why Pandas? - Easy to visualize - Easy to present - Easy to manipulate data as SQL - High-performance containers for data analysis What will you learn ? - How to work with pandas - Exploratory data analysis - statistical & graphical methods - Using pandas to deal with time series data - Time indices, resampling","title":"18.Pandas"},{"location":"18.Pandas/#store-data-in-dataframe","text":"method_1 import pandas as pd df = pd . DataFrame ({ 'names' : [ 'Bob' , 'Jessica' , 'Mary' , 'John' , 'Mel' ], 'births' : [ 968 , 155 , 77 , 578 , 973 ] }) method_2 import pandas as pd # The inital set of baby names and bith rates names = [ 'Bob' , 'Jessica' , 'Mary' , 'John' , 'Mel' , 'Jim' ] births = [ 968 , 155 , 77 , 578 , 973 , 968 ] BabyDataSet = list ( zip ( names , births )) df = pd . DataFrame ( BabyDataSet , columns = [ 'Names' , 'Births' ]) # \u5c07\u8cc7\u6599\u5132\u5b58\u6210 csv df . to_csv ( \"birth_data.csv\" , index = True ) # \u8b80\u53d6 csv df = pd . read_csv ( \"birth_data.csv\" ) ## \u89c0\u5bdf\u524d\u4e94\u5217 df . head ()","title":"Store Data in DataFrame"},{"location":"18.Pandas/#work-with-csv","text":"Check point of CSV file - header - row index - encoding","title":"Work With CSV"},{"location":"18.Pandas/#work-with-csv-check-header","text":"import pandas as pd df = pd . read_csv ( 'birth_data.csv' , names = [ 'births' , 'names' ])","title":"Work With CSV - check header"},{"location":"18.Pandas/#work-with-csv-check-row-index","text":"import pandas as pd df = pd . read_csv ( 'birth_data.csv' , index_col = 0 )","title":"Work With CSV - check row index"},{"location":"18.Pandas/#partial-data","text":"Instead of viewing the whole data, sometimes we just need to check the brief information. df . head ( n = 5 ) # top n rows df . tail ( n = 5 ) # last n rows df [ 1 : 5 ] # 1 to 4 rows df . sample ( 5 ) # random pick n rows","title":"Partial Data"},{"location":"18.Pandas/#make-a-dataset","text":"import numpy as np import pandas as pd # # set seed np . random . seed ( 111 ) # Function to generate test data def CreateDataSet ( Number = 1 ): Output = [] for i in range ( Number ): # Create a weekly (mondays) date range rng = pd . date_range ( start = '1/1/2009' , end = '12/31/2012' , freq = 'W-MON' ) #random number generator # Create random data data = np . random . randint ( low = 25 , high = 1000 , size = len ( rng )) # Status pool status = [ 1 , 2 , 3 ] # Make a random list of statuses random_status = [ status [ np . random . randint ( low = 0 , high = len ( status ))] for i in range ( len ( rng ))] # State pool states = [ 'GA' , 'FL' , 'fl' , 'NY' , 'NJ' , 'TX' ] # Make a random list of states random_states = [ states [ np . random . randint ( low = 0 , high = len ( states ))] for i in range ( len ( rng ))] Output . extend ( zip ( random_states , random_status , data , rng )) #extend& append \u5dee\u7570 return Output ``` ``` py dataset = CreateDataSet ( 4 ) dataset len ( dataset ) #check shape df = pd . DataFrame ( data = dataset , columns = [ 'State' , 'Status' , 'CustomerCount' , 'StatusDate' ]) df . head ( 10 )","title":"Make a Dataset"},{"location":"18.Pandas/#data-observation","text":"Exploring data with useful method df [ 'State' ] . unique () # get the set of unique value df [ 'State' ] . value_counts () # get the counts of each value df . info () # get the brief info","title":"Data Observation"},{"location":"18.Pandas/#index-and-select-data","text":"Square brackets Advanced methods loc iloc","title":"Index and Select Data"},{"location":"18.Pandas/#column-access","text":"# DataFrame this would be a DataFrame df [[ \"CustomerCount\" ]] df [[ \"State\" , \"Status\" ]][ 1 : 3 ] # Series this would be a series df [ \"CustomerCount\" ] df [ \"StatusDate\" ][ 100 : 105 ]","title":"Column Access"},{"location":"18.Pandas/#index-and-select-data-row-access","text":"df[2:9] \u2192\u6703\u5370\u51faindex\u70ba2 \u5230 index\u70ba8 \u7684\u503c","title":"Index and Select Data - Row Access"},{"location":"18.Pandas/#slicing-with-pandas","text":"Pandas slicing - DataFrame.loc (label-based) - DataFrame.iloc (integer position-based)","title":"Slicing with Pandas"},{"location":"18.Pandas/#slicing-with-pandas-loc","text":"# select specific row(0 1 2 3) print ( df . loc [ 0 : 3 ]) # subset all row and specific columns print ( df . loc [:,[ \"State\" , \"Status\" ]] . head ()) # \u53ea\u53d6State\u6b04\u4f4d print ( df . loc [ 0 : 5 , \"State\" ])","title":"slicing with pandas - loc"},{"location":"18.Pandas/#slicing-with-pandas-iloc","text":"# row access(\u5207\u7247\u6240\u4ee5\u53ea\u67090 1 2) print ( df . iloc [ 0 : 3 ]) # subset all row and specific columns print ( df . iloc [ 1 : 5 ,[ 0 , 1 ]]) # \u53ea\u53d6State\u6b04\u4f4d print ( df . iloc [:, 1 ] . head ()) print ( df . iloc [:, 1 ] . head () . values )","title":"Slicing with Pandas -iloc"},{"location":"18.Pandas/#conditional-data","text":"Sometimes, we need to estimate data behavior with given statement df . loc [ df . State == 'FL' ] df . loc [( df . State == 'FL' ) & ( df [ 'Status' ] == 3 )]","title":"Conditional Data"},{"location":"18.Pandas/#columns-observation","text":"Intuitively, a column of values is a vector print ( df [ 'Status' ]) print ( df [ 'Status' ] . values )","title":"Columns Observation"},{"location":"18.Pandas/#generate-a-vector-numerical-operation","text":"We know we can create a new column by assigning new vector.How about basic numerical operation? print ( df [ 'Status' ] + 1 )","title":"Generate a vector - numerical operation"},{"location":"18.Pandas/#generate-a-vector-by-function","text":"But we want more than numerical operation. Try functional programming ! # apply func to each column print ( df . apply ( len , axis = 0 )) # apply func to each row print ( df . apply ( len , axis = 1 ))","title":"Generate a vector by function"},{"location":"18.Pandas/#generate-a-vector-by-function_1","text":"Design our own function and do more ! def text ( x ): status = x [ 'Status' ] return 'correct' if status == 1 else 'error' df [ 'StatusText' ] = df . apply ( text , axis = 1 )","title":"Generate a vector by function"},{"location":"18.Pandas/#get-the-summary-data-by-group","text":"We just learned how to get the data with condition! e.g. I want to know the total count in each state df2 = df . loc [ df [ 'State' ] == 'NJ' ] total = 0 for count in df2 [ 'CustomerCount' ]: total += count print ( total ) # could we do calculation only once?","title":"Get the summary data by group"},{"location":"18.Pandas/#how-to-grouping-data","text":"# group the data by given column name g_state = df . groupby ([ 'State' ]) g_state . size ()","title":"How to grouping data?"},{"location":"18.Pandas/#get-the-grouped-dataframe","text":"# group the data by given column name g_state = df . groupby ([ 'State' ]) # get the group data g_state . get_group ( 'NJ' )","title":"Get the grouped dataframe"},{"location":"18.Pandas/#get-the-grouped-data-summary","text":"# group the data by given column name g_state = df . groupby ([ 'State' ]) # sum all the numerical data g_state . sum ()","title":"Get the grouped data summary"},{"location":"18.Pandas/#group-by-multiple-indexes-and-hierarchical","text":"# group the data by given column name g_state = df . groupby ( [ 'StatusDate' , 'State' ], sort = True ) . sum ()","title":"Group by multiple indexes and hierarchical"},{"location":"18.Pandas/#combine-dataframe","text":"When we try to combine similar Dataframe, we can easily use pd . concat ([ df1 , df2 ])","title":"Combine DataFrame"},{"location":"18.Pandas/#concept-of-joint-dataframe","text":"When the row and column do not fully match, we have to consider the strategy to merge Dataframe. - LEFT join - RIGHT join - OUTER join - INNER join","title":"Concept of Joint Dataframe"},{"location":"18.Pandas/#left-join","text":"pd . merge ( left , right , on = [ 'key1' , 'key2' ], how = 'left' )","title":"Left join"},{"location":"18.Pandas/#right-join","text":"pd . merge ( left , right , on = [ 'key1' , 'key2' ], how = 'right' )","title":"Right join"},{"location":"18.Pandas/#full-outer-join","text":"pd . merge ( left , right , on = [ 'key1' , 'key2' ], how = 'outer' )","title":"Full Outer join"},{"location":"18.Pandas/#inner-join","text":"pd . merge ( left , right , on = [ 'key1' , 'key2' ], how = 'inner' )","title":"Inner join"},{"location":"18.Pandas/#pandas","text":"data = pd . read_csv ( './data.csv' ) newData = data [ sorted ( data ) ]","title":"Pandas \u6b04\u4f4d\u540d\u7a31\u6392\u5e8f"},{"location":"19.Matplotlib/","text":"19.Matplotlib The iris data set Famous data set in pattern recognition 150 observations, 4 features each Sepal length Sepal width Petal length Petal width 3 species: setosa, versicolor, virginica reference: http://scikit-learn.org/stable/datasets/index.html Load Dataset import matplotlib.pyplot as plt import numpy as np from sklearn import datasets import pandas as pd iris = datasets . load_iris () #use dataset offerd by sklearn # Make a DF iris_DF = pd . DataFrame ( iris . data , columns = iris . feature_names ) iris_DF . head () # Add Species Columns iris_DF [ \"species\" ] = \"temp\" iris_DF . loc [: 49 , 'species' ] = \"setosa\" iris_DF . loc [ 50 : 99 , 'species' ] = \"versicolor\" iris_DF . loc [ 100 : 149 , 'species' ] = \"virginica\" iris_DF # \u67e5\u770b\u6bcf\u4e00\u500b\u54c1\u7a2e\u5404\u6709\u5e7e\u500b iris_DF . groupby ( \"species\" ) . size () # \u53d6\u5f97\u8a73\u7d30\u540d\u7a31 iris_DF [ 'species' ] . describe () # EDA # Print summary statistics of the fare column with .describe() \u7b2c\u4e00\u500b\u6b04\u4f4d\u4f7f\u7528iloc\u7684\u5207\u7247\u7d22\u5f15\u503c print ( iris_DF . iloc [:, 1 ] . describe ()) # Generate a box plot of the fare column iris_DF . iloc [:, 1 ] . plot ( kind = \"box\" ) # Show the plot \u756b\u5716 plt . show () # \u756b\u51fa\u6240\u6709\u7684Box plot ## \u4f7f\u7528\u9663\u5217\u547c\u53eb ## \u505aquantile\u7684EDA # Print the 5th and 95th percentiles kind = iris_DF . columns q = [ 0.05 , 0.25 , 0.75 , 0.95 ] print ( iris_DF [ kind ] . count ()) print ( iris_DF [ kind ] . quantile ( q )) # Generate a box plot iris_DF [ kind ] . plot ( kind = 'box' ) #draw all the column plt . show () # Scatter Plot iris_DF . plot ( x = \"petal length (cm)\" , y = \"petal width (cm)\" , kind = \"scatter\" ) iris_DF . plot ( x = \"petal length (cm)\" , y = \"sepal length (cm)\" , kind = \"scatter\" , logx = True ) plt . show () Visual EDA: all data # \u89c0\u770b\u5168\u90e8\u8cc7\u6599\u5206\u5e03\u76f4\u65b9\u5716 iris_DF . plot ( kind = 'hist' , bins = 50 , range = ( 0 , 8 ), alpha = 0.3 , edgecolor = 'black' ) plt . title ( 'Entire iris data set' ) plt . xlabel ( '[cm]' ) plt . figure ( figsize = ( 18 , 12 ), dpi = 600 ) plt . show () # \u89c0\u770b\u67d0\u4e00\u985e # visualize setosa data setosa . plot ( kind = \"hist\" , bins = 50 , range = ( 0 , 8 ), alpha = 0.3 , edgecolor = \"black\" ) plt . title ( \"setosa data set\" ) plt . xlabel ( \"[cm]\" ) plt . show ()","title":"19.Matplotlib"},{"location":"19.Matplotlib/#19matplotlib","text":"","title":"19.Matplotlib"},{"location":"19.Matplotlib/#the-iris-data-set","text":"Famous data set in pattern recognition 150 observations, 4 features each Sepal length Sepal width Petal length Petal width 3 species: setosa, versicolor, virginica reference: http://scikit-learn.org/stable/datasets/index.html","title":"The iris data set"},{"location":"19.Matplotlib/#load-dataset","text":"import matplotlib.pyplot as plt import numpy as np from sklearn import datasets import pandas as pd iris = datasets . load_iris () #use dataset offerd by sklearn # Make a DF iris_DF = pd . DataFrame ( iris . data , columns = iris . feature_names ) iris_DF . head () # Add Species Columns iris_DF [ \"species\" ] = \"temp\" iris_DF . loc [: 49 , 'species' ] = \"setosa\" iris_DF . loc [ 50 : 99 , 'species' ] = \"versicolor\" iris_DF . loc [ 100 : 149 , 'species' ] = \"virginica\" iris_DF # \u67e5\u770b\u6bcf\u4e00\u500b\u54c1\u7a2e\u5404\u6709\u5e7e\u500b iris_DF . groupby ( \"species\" ) . size () # \u53d6\u5f97\u8a73\u7d30\u540d\u7a31 iris_DF [ 'species' ] . describe () # EDA # Print summary statistics of the fare column with .describe() \u7b2c\u4e00\u500b\u6b04\u4f4d\u4f7f\u7528iloc\u7684\u5207\u7247\u7d22\u5f15\u503c print ( iris_DF . iloc [:, 1 ] . describe ()) # Generate a box plot of the fare column iris_DF . iloc [:, 1 ] . plot ( kind = \"box\" ) # Show the plot \u756b\u5716 plt . show () # \u756b\u51fa\u6240\u6709\u7684Box plot ## \u4f7f\u7528\u9663\u5217\u547c\u53eb ## \u505aquantile\u7684EDA # Print the 5th and 95th percentiles kind = iris_DF . columns q = [ 0.05 , 0.25 , 0.75 , 0.95 ] print ( iris_DF [ kind ] . count ()) print ( iris_DF [ kind ] . quantile ( q )) # Generate a box plot iris_DF [ kind ] . plot ( kind = 'box' ) #draw all the column plt . show () # Scatter Plot iris_DF . plot ( x = \"petal length (cm)\" , y = \"petal width (cm)\" , kind = \"scatter\" ) iris_DF . plot ( x = \"petal length (cm)\" , y = \"sepal length (cm)\" , kind = \"scatter\" , logx = True ) plt . show ()","title":"Load Dataset"},{"location":"19.Matplotlib/#visual-eda-all-data","text":"# \u89c0\u770b\u5168\u90e8\u8cc7\u6599\u5206\u5e03\u76f4\u65b9\u5716 iris_DF . plot ( kind = 'hist' , bins = 50 , range = ( 0 , 8 ), alpha = 0.3 , edgecolor = 'black' ) plt . title ( 'Entire iris data set' ) plt . xlabel ( '[cm]' ) plt . figure ( figsize = ( 18 , 12 ), dpi = 600 ) plt . show () # \u89c0\u770b\u67d0\u4e00\u985e # visualize setosa data setosa . plot ( kind = \"hist\" , bins = 50 , range = ( 0 , 8 ), alpha = 0.3 , edgecolor = \"black\" ) plt . title ( \"setosa data set\" ) plt . xlabel ( \"[cm]\" ) plt . show ()","title":"Visual EDA: all data"},{"location":"8.\u985e\u5225/","text":"8.\u985e\u5225 # Attribute references class MyClass : var = 123 def method ( self ): return \"hello world\" # Instantiation my_object = MyClass () # \u7528 . \u4f86\u8a2a\u554f\u7269\u4ef6\u7684\u5c6c\u6027\u6216\u65b9\u6cd5 print ( my_object . var ) # 123 print ( my_object . method ()) # hello world init myself # no arguments class MyClass : def __init__ ( self ): print ( \"do nothing\" ) my_object = MyClass () # do nothing \u8b8a\u6578\u521d\u59cb\u5316 # with arguments class MyClass : def __init__ ( self , var1 , var2 ): self . var1 = var1 self . var2 = var2 my_object = MyClass ( 123 , 456 ) print ( my_object . var1 ) # 123 print ( my_object . var2 ) # 456 Example class Person : bmi = 0.0 height = 0.0 weight = 0 def __init__ ( self ): pass def ask_person_info ( self ): self . height = float ( input ( \"What is your height? (meter) : \" )) self . weight = int ( input ( \"What is your weight? (kg) : \" )) def cal_BMI ( self ): self . bmi = round (( self . weight / ( self . height ** 2 )), 2 ) print ( \"Your BMI is \" + str ( self . bmi )) Test7 Q1. \u5beb\u4e00\u500b Class, \u5305\u542b\u4e00\u500b\u8b8a\u6578(str1)\u4ee5\u53ca\u5169\u500b\u51fd\u5f0f(set_string \u548c print_string). set_string \u63a5\u53d7\u4e00\u500b\u5b57\u4e32\u53c3\u6578,\u8ce6\u503c\u7d66 str1\u3002 print_string \u5370\u51fa str1 \u7684\u5927\u5beb\u5b57\u4e32 hint: \u5148\u5ba3\u544a\u4e00\u500b\u6210\u54e1\u8b8a\u6578,\u518d\u900f\u904e\u4e0a\u8ff0\u5169\u500b\u51fd\u5f0f\u5c0d\u8a72\u8b8a\u6578\u505a\u64cd\u4f5c\u3002 class Test7 : def __init__ ( self ): self . str1 = \"\" def set_string ( self , str1 ): self . str1 = str1 def print_string ( self ): print ( self . str1 . upper ()) myClass = Test7 () myClass . set_string ( 'hello world' ) myClass . print_string ()","title":"8.\u985e\u5225"},{"location":"8.\u985e\u5225/#8","text":"# Attribute references class MyClass : var = 123 def method ( self ): return \"hello world\" # Instantiation my_object = MyClass () # \u7528 . \u4f86\u8a2a\u554f\u7269\u4ef6\u7684\u5c6c\u6027\u6216\u65b9\u6cd5 print ( my_object . var ) # 123 print ( my_object . method ()) # hello world","title":"8.\u985e\u5225"},{"location":"8.\u985e\u5225/#init-myself","text":"# no arguments class MyClass : def __init__ ( self ): print ( \"do nothing\" ) my_object = MyClass () # do nothing \u8b8a\u6578\u521d\u59cb\u5316 # with arguments class MyClass : def __init__ ( self , var1 , var2 ): self . var1 = var1 self . var2 = var2 my_object = MyClass ( 123 , 456 ) print ( my_object . var1 ) # 123 print ( my_object . var2 ) # 456","title":"init myself"},{"location":"8.\u985e\u5225/#example","text":"class Person : bmi = 0.0 height = 0.0 weight = 0 def __init__ ( self ): pass def ask_person_info ( self ): self . height = float ( input ( \"What is your height? (meter) : \" )) self . weight = int ( input ( \"What is your weight? (kg) : \" )) def cal_BMI ( self ): self . bmi = round (( self . weight / ( self . height ** 2 )), 2 ) print ( \"Your BMI is \" + str ( self . bmi ))","title":"Example"},{"location":"8.\u985e\u5225/#test7","text":"Q1. \u5beb\u4e00\u500b Class, \u5305\u542b\u4e00\u500b\u8b8a\u6578(str1)\u4ee5\u53ca\u5169\u500b\u51fd\u5f0f(set_string \u548c print_string). set_string \u63a5\u53d7\u4e00\u500b\u5b57\u4e32\u53c3\u6578,\u8ce6\u503c\u7d66 str1\u3002 print_string \u5370\u51fa str1 \u7684\u5927\u5beb\u5b57\u4e32 hint: \u5148\u5ba3\u544a\u4e00\u500b\u6210\u54e1\u8b8a\u6578,\u518d\u900f\u904e\u4e0a\u8ff0\u5169\u500b\u51fd\u5f0f\u5c0d\u8a72\u8b8a\u6578\u505a\u64cd\u4f5c\u3002 class Test7 : def __init__ ( self ): self . str1 = \"\" def set_string ( self , str1 ): self . str1 = str1 def print_string ( self ): print ( self . str1 . upper ()) myClass = Test7 () myClass . set_string ( 'hello world' ) myClass . print_string ()","title":"Test7"},{"location":"9.\u6a21\u7d44/","text":"9.\u6a21\u7d44","title":"9.\u6a21\u7d44"},{"location":"9.\u6a21\u7d44/#9","text":"","title":"9.\u6a21\u7d44"},{"location":"material/","text":"Python \u662f Pass By Value, Pass by Reference, \u9084\u662f Pass by Sharing\uff1f \u6210\u5927\u9ad8\u5b8f\u5b87\u5be6\u9a57\u5ba4\u57fa\u790e PythonForDataAnalysis \u57fa\u790e\u908f\u8f2f Python \u6559\u5b78 Python\u7cfb\u5217\u6559\u5b78 python \u8cc7\u6599\u79d1\u5b78 Pandas\u57fa\u790e\u5b78\u7fd2\u7b46\u8a18 matplotlib\u57fa\u790e\u5b78\u7fd2 Python \u5b78\u7fd2\u5730\u5716\u8207\u653b\u7565 matplotlib, numpy, pandas, seaborn\u53c3\u8003 numpy, pandas\u53c3\u8003","title":"Material"},{"location":"material/#_1","text":"Python \u6559\u5b78 Python\u7cfb\u5217\u6559\u5b78 python","title":"\u57fa\u790e\u908f\u8f2f"},{"location":"material/#_2","text":"Pandas\u57fa\u790e\u5b78\u7fd2\u7b46\u8a18 matplotlib\u57fa\u790e\u5b78\u7fd2 Python \u5b78\u7fd2\u5730\u5716\u8207\u653b\u7565 matplotlib, numpy, pandas, seaborn\u53c3\u8003 numpy, pandas\u53c3\u8003","title":"\u8cc7\u6599\u79d1\u5b78"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/","text":"1.1 \u74b0\u5883\u5b89\u88dd\u6307\u5357 \u5728\u958b\u59cb\u5b78\u7fd2 Python \u4e4b\u524d\uff0c\u5efa\u7acb\u4e00\u500b\u9069\u5408\u7684\u958b\u767c\u74b0\u5883\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u826f\u597d\u7684\u74b0\u5883\u80fd\u5920\u63d0\u5347\u5b78\u7fd2\u6548\u7387\uff0c\u8b93\u60a8\u5c08\u6ce8\u65bc\u7a0b\u5f0f\u8a9e\u8a00\u7684\u5b78\u7fd2\u3002\u672c\u6307\u5357\u5c07\u4ecb\u7d39\u5169\u7a2e\u5e38\u898b\u7684 Python \u64b0\u5beb\u5f62\u5f0f\uff0c\u4ee5\u53ca\u4e0d\u540c\u7684\u74b0\u5883\u5b89\u88dd\u65b9\u5f0f\uff0c\u4f9b\u521d\u5b78\u8005\u53c3\u8003\u3002 \u5169\u7a2e\u64b0\u5beb Python \u7684\u5f62\u5f0f \u7b2c\u4e00\u7a2e\u65b9\u5f0f\uff1a .py \u6a94 .py \u6a94\u662f Python \u7684\u539f\u59cb\u78bc\u6a94\u6848\u683c\u5f0f\uff0c\u4f7f\u7528\u7d14\u6587\u5b57\u7de8\u8f2f\u5668\uff08\u5982 Notepad++\u3001Sublime Text\uff09\u6216\u6574\u5408\u958b\u767c\u74b0\u5883\uff08IDE\uff0c\u5982 PyCharm\u3001Visual Studio Code\uff09\u9032\u884c\u7de8\u5beb\u3002\u64b0\u5beb\u5b8c\u6210\u5f8c\uff0c\u9700\u5728\u7d42\u7aef\u6a5f\u4e2d\u900f\u904e python \u6307\u4ee4\u904b\u884c\u7a0b\u5f0f\u78bc\uff0c\u4e26\u89c0\u5bdf\u57f7\u884c\u7d50\u679c\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u9069\u5408\u64b0\u5beb\u5b8c\u6574\u7684\u61c9\u7528\u7a0b\u5f0f\u6216\u6a21\u7d44\u3002 \u65b9\u4fbf\u7ba1\u7406\u5927\u578b\u5c08\u6848\u7684\u7a0b\u5f0f\u78bc\u7d50\u69cb\u3002 \u6613\u65bc\u8207\u7248\u672c\u63a7\u5236\u7cfb\u7d71\uff08\u5982 Git\uff09\u6574\u5408\u3002 \u7b2c\u4e8c\u7a2e\u65b9\u5f0f\uff1a Jupyter Notebook Jupyter Notebook \u662f\u4e00\u500b\u4e92\u52d5\u5f0f\u7684\u958b\u767c\u74b0\u5883\uff0c\u5141\u8a31\u5c07\u7a0b\u5f0f\u78bc\u3001\u57f7\u884c\u7d50\u679c\u3001\u6587\u5b57\u8aaa\u660e\u548c\u5716\u8868\u6574\u5408\u5728\u540c\u4e00\u500b\u6587\u4ef6\u4e2d\u3002\u5b83\u7684\u6a94\u6848\u683c\u5f0f\u70ba .ipynb \uff0c\u975e\u5e38\u9069\u5408\u7528\u65bc\u8cc7\u6599\u79d1\u5b78\u7684\u958b\u767c\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u975e\u5e38\u9069\u5408\u8cc7\u6599\u5206\u6790\u3001\u6a5f\u5668\u5b78\u7fd2\u548c\u6559\u5b78\u7528\u9014\u3002 \u65b9\u4fbf\u9032\u884c\u5373\u6642\u7a0b\u5f0f\u78bc\u57f7\u884c\u548c\u7d50\u679c\u8996\u89ba\u5316\u3002 \u6709\u52a9\u65bc\u5206\u4eab\u548c\u5c55\u793a\u5de5\u4f5c\u6d41\u7a0b\u548c\u7d50\u679c\u3002 \u74b0\u5883\u5b89\u88dd\u65b9\u5f0f \u5728\u9078\u64c7 Python \u7684\u958b\u767c\u74b0\u5883\u6642\uff0c\u4e3b\u8981\u6709\u5169\u7a2e\u65b9\u5f0f\uff1a\u4f7f\u7528\u96f2\u7aef\u8cc7\u6e90\u6216\u5728\u672c\u6a5f\u96fb\u8166\u4e0a\u5efa\u7f6e Python \u74b0\u5883\u3002\u5c0d\u65bc\u525b\u958b\u59cb\u5b78\u7fd2 Python \u7684\u65b0\u624b\uff0c\u5efa\u8b70\u5148\u4ee5\u514d\u8cbb\u7684\u96f2\u7aef\u670d\u52d9\u70ba\u4e3b\uff0c\u4f8b\u5982 Google Colab\uff0c\u5c07\u91cd\u5fc3\u653e\u5728\u5b78\u7fd2 Python \u7a0b\u5f0f\u8a2d\u8a08\u7684\u57fa\u790e\u3002\u7576\u60a8\u5b78\u7fd2\u5230\u4e00\u5b9a\u968e\u6bb5\u5f8c\uff0c\u518d\u56de\u904e\u982d\u4f86\u8003\u616e\u5728\u672c\u6a5f\u96fb\u8166\u4e0a\u5b89\u88dd Anaconda \u6216 Miniconda\uff0c\u4ee5\u6eff\u8db3\u66f4\u9032\u968e\u7684\u958b\u767c\u9700\u6c42\u3002 \u96f2\u7aef\u8cc7\u6e90 Google Colab\uff08Python\u521d\u5b78\u8005\u53cb\u5584\uff09 \u672c\u6a5f\u96fb\u8166\u5efa\u7f6e Python \u74b0\u5883 Anaconda\uff08\u8cc7\u6599\u79d1\u5b78\u65b0\u624b\u53cb\u5584\uff09 Miniconda\uff08\u8cc7\u6df1\u8001\u624b\u9996\u9078\uff09 Google Colab Google Colab \u662f Google \u63d0\u4f9b\u7684\u514d\u8cbb\u96f2\u7aef Jupyter Notebook \u670d\u52d9\uff0c\u7121\u9700\u5728\u672c\u6a5f\u5b89\u88dd\u4efb\u4f55\u8edf\u9ad4\uff0c\u5373\u53ef\u5728\u700f\u89bd\u5668\u4e2d\u64b0\u5beb\u548c\u57f7\u884c Python \u7a0b\u5f0f\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u9069\u5408\u5e0c\u671b\u5feb\u901f\u958b\u59cb\u5b78\u7fd2 Python \u7684\u521d\u5b78\u8005\u3002 \u4e0d\u53d7\u9650\u65bc\u672c\u6a5f\u96fb\u8166\u7684\u786c\u9ad4\u8cc7\u6e90\uff0c\u7279\u5225\u9069\u7528\u65bc\u9700\u8981\u5927\u91cf\u8a08\u7b97\u7684\u4efb\u52d9\u3002 \u6709\u514d\u8cbb\u984d\u5ea6\u4f7f\u7528 GPU \u904b\u7b97\u8cc7\u6e90 \u65b9\u4fbf\u8207\u4ed6\u4eba\u5354\u4f5c\u548c\u5206\u4eab Notebook\u3002 Anaconda Anaconda \u662f\u4e00\u500b\u958b\u6e90\u7684 Python \u767c\u884c\u7248\u672c\uff0c\u5167\u542b\u5927\u91cf\u7684\u79d1\u5b78\u8a08\u7b97\u548c\u8cc7\u6599\u5206\u6790\u5957\u4ef6\uff0c\u4e26\u9644\u5e36 Conda \u5957\u4ef6\u7ba1\u7406\u5668\u548c\u865b\u64ec\u74b0\u5883\u529f\u80fd\u3002\u9069\u5408\u521d\u5b78\u8005\u5728\u672c\u6a5f\u96fb\u8166\u4e00\u9375\u5feb\u901f\u5efa\u7f6e\u958b\u767c\u6240\u9700\u74b0\u5883\uff0c\u4f46\u7f3a\u9ede\u662f\u5b89\u88dd\u5305\u8f03\u5927\uff0c\u6703\u4f54\u7528\u8f03\u591a\u7684\u786c\u789f\u5bb9\u91cf\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u9069\u5408\u9700\u8981\u5b8c\u6574\u8cc7\u6599\u79d1\u5b78\u5de5\u5177\u7684\u4f7f\u7528\u8005\u3002 \u63d0\u4f9b\u4e00\u7ad9\u5f0f\u7684\u74b0\u5883\u914d\u7f6e\uff0c\u7701\u53bb\u500b\u5225\u5b89\u88dd\u5957\u4ef6\u7684\u9ebb\u7169\u3002 \u5305\u542b Spyder\u3001Jupyter Notebook \u7b49\u958b\u767c\u5de5\u5177\u3002 Miniconda Miniconda \u662f Anaconda \u7684\u7cbe\u7c21\u7248\uff0c\u53ea\u5305\u542b Conda \u5957\u4ef6\u7ba1\u7406\u5668\u548c Python\uff0c\u8b93\u4f7f\u7528\u8005\u53ef\u4ee5\u81ea\u884c\u9078\u64c7\u4e26\u5b89\u88dd\u6240\u9700\u7684\u5957\u4ef6\u3002\u9069\u5408\u5c0d Python \u751f\u614b\u7cfb\u8f03\u70ba\u719f\u6089\u7684\u958b\u767c\u8005\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u9069\u5408\u5e0c\u671b\u8f15\u91cf\u5316\u5b89\u88dd\u7684\u4f7f\u7528\u8005\u3002 \u63d0\u4f9b\u66f4\u5927\u7684\u9748\u6d3b\u6027\uff0c\u81ea\u884c\u7ba1\u7406\u74b0\u5883\u548c\u5957\u4ef6\u3002 \u9069\u7528\u65bc\u786c\u789f\u7a7a\u9593\u6709\u9650\u6216\u53ea\u9700\u7279\u5b9a\u5957\u4ef6\u7684\u60c5\u6cc1\u3002 \u7d50\u8a9e \u9078\u64c7\u9069\u5408\u7684\u958b\u767c\u74b0\u5883\u80fd\u5920\u5927\u5927\u63d0\u5347\u5728\u5b78\u7fd2 Python \u6642\u7684\u6548\u7387\u548c\u9ad4\u9a57\u3002\u7121\u8ad6\u662f\u4f7f\u7528 .py \u6a94\u9084\u662f Jupyter Notebook\uff0c\u9078\u64c7\u96f2\u7aef\u8cc7\u6e90\u9084\u662f\u672c\u6a5f\u5b89\u88dd\uff0c\u90fd\u53d6\u6c7a\u65bc\u60a8\u7684\u5b78\u7fd2\u9700\u6c42\u548c\u74b0\u5883\u689d\u4ef6\u3002\u63a5\u4e0b\u4f86\u7684\u7ae0\u7bc0\uff0c\u6211\u5011\u5c07\u8a73\u7d30\u4ecb\u7d39\u5404\u7a2e\u74b0\u5883\u7684\u5b89\u88dd\u6b65\u9a5f\u548c\u4f7f\u7528\u65b9\u6cd5\uff0c\u52a9\u60a8\u9806\u5229\u8e0f\u4e0a Python \u7684\u5b78\u7fd2\u4e4b\u8def\u3002","title":"1.1 \u74b0\u5883\u5b89\u88dd\u6307\u5357"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/#11","text":"\u5728\u958b\u59cb\u5b78\u7fd2 Python \u4e4b\u524d\uff0c\u5efa\u7acb\u4e00\u500b\u9069\u5408\u7684\u958b\u767c\u74b0\u5883\u662f\u975e\u5e38\u91cd\u8981\u7684\u3002\u826f\u597d\u7684\u74b0\u5883\u80fd\u5920\u63d0\u5347\u5b78\u7fd2\u6548\u7387\uff0c\u8b93\u60a8\u5c08\u6ce8\u65bc\u7a0b\u5f0f\u8a9e\u8a00\u7684\u5b78\u7fd2\u3002\u672c\u6307\u5357\u5c07\u4ecb\u7d39\u5169\u7a2e\u5e38\u898b\u7684 Python \u64b0\u5beb\u5f62\u5f0f\uff0c\u4ee5\u53ca\u4e0d\u540c\u7684\u74b0\u5883\u5b89\u88dd\u65b9\u5f0f\uff0c\u4f9b\u521d\u5b78\u8005\u53c3\u8003\u3002","title":"1.1 \u74b0\u5883\u5b89\u88dd\u6307\u5357"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/#python","text":"","title":"\u5169\u7a2e\u64b0\u5beb Python \u7684\u5f62\u5f0f"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/#py","text":".py \u6a94\u662f Python \u7684\u539f\u59cb\u78bc\u6a94\u6848\u683c\u5f0f\uff0c\u4f7f\u7528\u7d14\u6587\u5b57\u7de8\u8f2f\u5668\uff08\u5982 Notepad++\u3001Sublime Text\uff09\u6216\u6574\u5408\u958b\u767c\u74b0\u5883\uff08IDE\uff0c\u5982 PyCharm\u3001Visual Studio Code\uff09\u9032\u884c\u7de8\u5beb\u3002\u64b0\u5beb\u5b8c\u6210\u5f8c\uff0c\u9700\u5728\u7d42\u7aef\u6a5f\u4e2d\u900f\u904e python \u6307\u4ee4\u904b\u884c\u7a0b\u5f0f\u78bc\uff0c\u4e26\u89c0\u5bdf\u57f7\u884c\u7d50\u679c\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u9069\u5408\u64b0\u5beb\u5b8c\u6574\u7684\u61c9\u7528\u7a0b\u5f0f\u6216\u6a21\u7d44\u3002 \u65b9\u4fbf\u7ba1\u7406\u5927\u578b\u5c08\u6848\u7684\u7a0b\u5f0f\u78bc\u7d50\u69cb\u3002 \u6613\u65bc\u8207\u7248\u672c\u63a7\u5236\u7cfb\u7d71\uff08\u5982 Git\uff09\u6574\u5408\u3002","title":"\u7b2c\u4e00\u7a2e\u65b9\u5f0f\uff1a .py \u6a94"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/#jupyter-notebook","text":"Jupyter Notebook \u662f\u4e00\u500b\u4e92\u52d5\u5f0f\u7684\u958b\u767c\u74b0\u5883\uff0c\u5141\u8a31\u5c07\u7a0b\u5f0f\u78bc\u3001\u57f7\u884c\u7d50\u679c\u3001\u6587\u5b57\u8aaa\u660e\u548c\u5716\u8868\u6574\u5408\u5728\u540c\u4e00\u500b\u6587\u4ef6\u4e2d\u3002\u5b83\u7684\u6a94\u6848\u683c\u5f0f\u70ba .ipynb \uff0c\u975e\u5e38\u9069\u5408\u7528\u65bc\u8cc7\u6599\u79d1\u5b78\u7684\u958b\u767c\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u975e\u5e38\u9069\u5408\u8cc7\u6599\u5206\u6790\u3001\u6a5f\u5668\u5b78\u7fd2\u548c\u6559\u5b78\u7528\u9014\u3002 \u65b9\u4fbf\u9032\u884c\u5373\u6642\u7a0b\u5f0f\u78bc\u57f7\u884c\u548c\u7d50\u679c\u8996\u89ba\u5316\u3002 \u6709\u52a9\u65bc\u5206\u4eab\u548c\u5c55\u793a\u5de5\u4f5c\u6d41\u7a0b\u548c\u7d50\u679c\u3002","title":"\u7b2c\u4e8c\u7a2e\u65b9\u5f0f\uff1a Jupyter Notebook"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/#_1","text":"\u5728\u9078\u64c7 Python \u7684\u958b\u767c\u74b0\u5883\u6642\uff0c\u4e3b\u8981\u6709\u5169\u7a2e\u65b9\u5f0f\uff1a\u4f7f\u7528\u96f2\u7aef\u8cc7\u6e90\u6216\u5728\u672c\u6a5f\u96fb\u8166\u4e0a\u5efa\u7f6e Python \u74b0\u5883\u3002\u5c0d\u65bc\u525b\u958b\u59cb\u5b78\u7fd2 Python \u7684\u65b0\u624b\uff0c\u5efa\u8b70\u5148\u4ee5\u514d\u8cbb\u7684\u96f2\u7aef\u670d\u52d9\u70ba\u4e3b\uff0c\u4f8b\u5982 Google Colab\uff0c\u5c07\u91cd\u5fc3\u653e\u5728\u5b78\u7fd2 Python \u7a0b\u5f0f\u8a2d\u8a08\u7684\u57fa\u790e\u3002\u7576\u60a8\u5b78\u7fd2\u5230\u4e00\u5b9a\u968e\u6bb5\u5f8c\uff0c\u518d\u56de\u904e\u982d\u4f86\u8003\u616e\u5728\u672c\u6a5f\u96fb\u8166\u4e0a\u5b89\u88dd Anaconda \u6216 Miniconda\uff0c\u4ee5\u6eff\u8db3\u66f4\u9032\u968e\u7684\u958b\u767c\u9700\u6c42\u3002 \u96f2\u7aef\u8cc7\u6e90 Google Colab\uff08Python\u521d\u5b78\u8005\u53cb\u5584\uff09 \u672c\u6a5f\u96fb\u8166\u5efa\u7f6e Python \u74b0\u5883 Anaconda\uff08\u8cc7\u6599\u79d1\u5b78\u65b0\u624b\u53cb\u5584\uff09 Miniconda\uff08\u8cc7\u6df1\u8001\u624b\u9996\u9078\uff09","title":"\u74b0\u5883\u5b89\u88dd\u65b9\u5f0f"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/#google-colab","text":"Google Colab \u662f Google \u63d0\u4f9b\u7684\u514d\u8cbb\u96f2\u7aef Jupyter Notebook \u670d\u52d9\uff0c\u7121\u9700\u5728\u672c\u6a5f\u5b89\u88dd\u4efb\u4f55\u8edf\u9ad4\uff0c\u5373\u53ef\u5728\u700f\u89bd\u5668\u4e2d\u64b0\u5beb\u548c\u57f7\u884c Python \u7a0b\u5f0f\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u9069\u5408\u5e0c\u671b\u5feb\u901f\u958b\u59cb\u5b78\u7fd2 Python \u7684\u521d\u5b78\u8005\u3002 \u4e0d\u53d7\u9650\u65bc\u672c\u6a5f\u96fb\u8166\u7684\u786c\u9ad4\u8cc7\u6e90\uff0c\u7279\u5225\u9069\u7528\u65bc\u9700\u8981\u5927\u91cf\u8a08\u7b97\u7684\u4efb\u52d9\u3002 \u6709\u514d\u8cbb\u984d\u5ea6\u4f7f\u7528 GPU \u904b\u7b97\u8cc7\u6e90 \u65b9\u4fbf\u8207\u4ed6\u4eba\u5354\u4f5c\u548c\u5206\u4eab Notebook\u3002","title":"Google Colab"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/#anaconda","text":"Anaconda \u662f\u4e00\u500b\u958b\u6e90\u7684 Python \u767c\u884c\u7248\u672c\uff0c\u5167\u542b\u5927\u91cf\u7684\u79d1\u5b78\u8a08\u7b97\u548c\u8cc7\u6599\u5206\u6790\u5957\u4ef6\uff0c\u4e26\u9644\u5e36 Conda \u5957\u4ef6\u7ba1\u7406\u5668\u548c\u865b\u64ec\u74b0\u5883\u529f\u80fd\u3002\u9069\u5408\u521d\u5b78\u8005\u5728\u672c\u6a5f\u96fb\u8166\u4e00\u9375\u5feb\u901f\u5efa\u7f6e\u958b\u767c\u6240\u9700\u74b0\u5883\uff0c\u4f46\u7f3a\u9ede\u662f\u5b89\u88dd\u5305\u8f03\u5927\uff0c\u6703\u4f54\u7528\u8f03\u591a\u7684\u786c\u789f\u5bb9\u91cf\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u9069\u5408\u9700\u8981\u5b8c\u6574\u8cc7\u6599\u79d1\u5b78\u5de5\u5177\u7684\u4f7f\u7528\u8005\u3002 \u63d0\u4f9b\u4e00\u7ad9\u5f0f\u7684\u74b0\u5883\u914d\u7f6e\uff0c\u7701\u53bb\u500b\u5225\u5b89\u88dd\u5957\u4ef6\u7684\u9ebb\u7169\u3002 \u5305\u542b Spyder\u3001Jupyter Notebook \u7b49\u958b\u767c\u5de5\u5177\u3002","title":"Anaconda"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/#miniconda","text":"Miniconda \u662f Anaconda \u7684\u7cbe\u7c21\u7248\uff0c\u53ea\u5305\u542b Conda \u5957\u4ef6\u7ba1\u7406\u5668\u548c Python\uff0c\u8b93\u4f7f\u7528\u8005\u53ef\u4ee5\u81ea\u884c\u9078\u64c7\u4e26\u5b89\u88dd\u6240\u9700\u7684\u5957\u4ef6\u3002\u9069\u5408\u5c0d Python \u751f\u614b\u7cfb\u8f03\u70ba\u719f\u6089\u7684\u958b\u767c\u8005\u3002 \u4f7f\u7528\u60c5\u5883 \uff1a \u9069\u5408\u5e0c\u671b\u8f15\u91cf\u5316\u5b89\u88dd\u7684\u4f7f\u7528\u8005\u3002 \u63d0\u4f9b\u66f4\u5927\u7684\u9748\u6d3b\u6027\uff0c\u81ea\u884c\u7ba1\u7406\u74b0\u5883\u548c\u5957\u4ef6\u3002 \u9069\u7528\u65bc\u786c\u789f\u7a7a\u9593\u6709\u9650\u6216\u53ea\u9700\u7279\u5b9a\u5957\u4ef6\u7684\u60c5\u6cc1\u3002","title":"Miniconda"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.1\u74b0\u5883\u5b89\u88dd\u6307\u5357/#_2","text":"\u9078\u64c7\u9069\u5408\u7684\u958b\u767c\u74b0\u5883\u80fd\u5920\u5927\u5927\u63d0\u5347\u5728\u5b78\u7fd2 Python \u6642\u7684\u6548\u7387\u548c\u9ad4\u9a57\u3002\u7121\u8ad6\u662f\u4f7f\u7528 .py \u6a94\u9084\u662f Jupyter Notebook\uff0c\u9078\u64c7\u96f2\u7aef\u8cc7\u6e90\u9084\u662f\u672c\u6a5f\u5b89\u88dd\uff0c\u90fd\u53d6\u6c7a\u65bc\u60a8\u7684\u5b78\u7fd2\u9700\u6c42\u548c\u74b0\u5883\u689d\u4ef6\u3002\u63a5\u4e0b\u4f86\u7684\u7ae0\u7bc0\uff0c\u6211\u5011\u5c07\u8a73\u7d30\u4ecb\u7d39\u5404\u7a2e\u74b0\u5883\u7684\u5b89\u88dd\u6b65\u9a5f\u548c\u4f7f\u7528\u65b9\u6cd5\uff0c\u52a9\u60a8\u9806\u5229\u8e0f\u4e0a Python \u7684\u5b78\u7fd2\u4e4b\u8def\u3002","title":"\u7d50\u8a9e"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/","text":"1.2 Google Colab\uff1a\u9069\u5408 Python \u521d\u5b78\u8005\u7684\u96f2\u7aef\u958b\u767c\u74b0\u5883 \u96a8\u8457 Python \u6210\u70ba\u6a5f\u5668\u5b78\u7fd2\u3001\u6578\u64da\u5206\u6790\u548c\u4eba\u5de5\u667a\u6167\u9818\u57df\u7684\u4e3b\u8981\u7de8\u7a0b\u8a9e\u8a00\uff0c\u5982\u4f55\u5feb\u901f\u4e0a\u624b\u4e26\u958b\u59cb\u958b\u767c\u6210\u70ba\u8a31\u591a\u521d\u5b78\u8005\u95dc\u6ce8\u7684\u554f\u984c\u3002\u5c0d\u65bc\u90a3\u4e9b\u4e0d\u60f3\u5728\u672c\u5730\u8a2d\u7f6e\u958b\u767c\u74b0\u5883\u7684\u4eba\u4f86\u8aaa\uff0cGoogle Colaboratory\uff08\u7c21\u7a31 Colab\uff09\u662f\u4e00\u500b\u975e\u5e38\u7406\u60f3\u7684\u89e3\u6c7a\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u662f\u5b8c\u5168\u7684\u521d\u5b78\u8005\uff0c\u5efa\u8b70\u4e00\u958b\u59cb\u5148\u4e0d\u8981\u6025\u8457\u5728\u672c\u5730\u7aef\u67b6\u8a2d\u74b0\u5883\uff0c\u800c\u662f\u5229\u7528\u514d\u8cbb\u7684\u96f2\u7aef\u8cc7\u6e90\u3002\u9019\u6a23\u53ef\u4ee5\u8b93\u4f60\u5c08\u6ce8\u65bc\u5b78\u7fd2 Python\uff0c\u800c\u4e0d\u5fc5\u70ba\u74b0\u5883\u8a2d\u5b9a\u800c\u7169\u60f1\u3002 \u4ec0\u9ebc\u662f Google Colaboratory\uff1f Google Colaboratory \u662f\u4e00\u500b\u514d\u8cbb\u7684\u96f2\u7aef\u7de8\u7a0b\u74b0\u5883\uff0c\u5b83\u57fa\u65bc Jupyter Notebook\uff0c\u8b93\u7528\u6236\u53ef\u4ee5\u5728\u7dda\u7de8\u5beb\u548c\u57f7\u884c Python \u7a0b\u5f0f\uff0c\u7121\u9700\u672c\u5730\u8a2d\u7f6e Python \u74b0\u5883\u3002Colab \u63d0\u4f9b\u5f37\u5927\u7684\u8a08\u7b97\u8cc7\u6e90\uff0c\u5305\u62ec\u514d\u8cbb\u7684 GPU \u548c TPU \u652f\u6301\uff0c\u975e\u5e38\u9069\u5408\u7528\u4f86\u9032\u884c\u6a5f\u5668\u5b78\u7fd2\u6a21\u578b\u8a13\u7df4\u3001\u6578\u64da\u5206\u6790\u4ee5\u53ca\u5176\u4ed6\u9ad8\u8a08\u7b97\u9700\u6c42\u7684\u5de5\u4f5c\u3002 \u70ba\u4ec0\u9ebc Colab \u9069\u5408\u521d\u5b78\u8005\uff1f \u514d\u5b89\u88dd \uff1a Colab \u662f\u57fa\u65bc\u96f2\u7aef\u7684\uff0c\u9019\u610f\u5473\u8457\u4f60\u4e0d\u9700\u8981\u5b89\u88dd\u4efb\u4f55\u8edf\u9ad4\u6216\u9032\u884c\u4efb\u4f55\u8907\u96dc\u7684\u914d\u7f6e\u3002\u53ea\u8981\u6709\u7db2\u9801\u700f\u89bd\u5668\u548c Google \u5e33\u6236\uff0c\u5c31\u80fd\u96a8\u6642\u96a8\u5730\u958b\u59cb\u7de8\u5beb\u7a0b\u5f0f\u3002 \u7c21\u55ae\u6613\u7528\u7684\u754c\u9762 \uff1a Colab \u754c\u9762\u76f4\u89c0\uff0c\u57fa\u65bc Jupyter Notebook \u7684\u5f62\u5f0f\u975e\u5e38\u9069\u5408\u521d\u5b78\u8005\u3002\u4f60\u53ef\u4ee5\u5c07\u7a0b\u5f0f\u78bc\u5206\u6bb5\u7de8\u5beb\u3001\u57f7\u884c\uff0c\u4e26\u5373\u6642\u770b\u5230\u7d50\u679c\u3002\u540c\u6642\u9084\u652f\u6301\u6587\u5b57\u3001\u5716\u7247\u3001\u6578\u64da\u8868\u683c\u7684\u5c55\u793a\uff0c\u4fbf\u65bc\u7de8\u5beb\u6559\u5b78\u7b46\u8a18\u6216\u8aaa\u660e\u6587\u4ef6\u3002 \u5373\u6642\u57f7\u884c\u7d50\u679c \uff1a \u4f60\u53ef\u4ee5\u5728 Notebook \u4e2d\u5206\u6bb5\u57f7\u884c\u7a0b\u5f0f\u78bc\uff0c\u770b\u5230\u5373\u6642\u7d50\u679c\uff0c\u9019\u5c0d\u65bc\u5b78\u7fd2\u548c\u7406\u89e3 Python \u8a9e\u6cd5\u548c\u6a5f\u5668\u5b78\u7fd2\u6982\u5ff5\u975e\u5e38\u6709\u5e6b\u52a9\u3002\u5373\u4f7f\u7a0b\u5f0f\u78bc\u51fa\u932f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u53ea\u4fee\u6539\u90a3\u4e00\u5c0f\u6bb5\uff0c\u518d\u6b21\u57f7\u884c\u5373\u53ef\uff0c\u7121\u9700\u91cd\u65b0\u904b\u884c\u6574\u500b\u7a0b\u5f0f\u3002 \u652f\u63f4 GPU/TPU \uff1a \u5c0d\u65bc\u9700\u8981\u5927\u91cf\u8a08\u7b97\u8cc7\u6e90\u7684\u4efb\u52d9\uff0c\u5982\u8a13\u7df4\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\uff0cColab \u63d0\u4f9b\u514d\u8cbb\u7684 GPU \u548c TPU \u8cc7\u6e90\uff0c\u9019\u5c0d\u65bc\u672c\u5730\u7121\u6cd5\u63d0\u4f9b\u8db3\u5920\u8a08\u7b97\u80fd\u529b\u7684\u521d\u5b78\u8005\u4f86\u8aaa\uff0c\u662f\u975e\u5e38\u5be6\u7528\u7684\u529f\u80fd\u3002 \u8207 Google \u96f2\u7aef\u786c\u789f\u6574\u5408 \uff1a Colab \u8207 Google \u96f2\u7aef\u786c\u789f\u7121\u7e2b\u6574\u5408\uff0c\u4f60\u53ef\u4ee5\u65b9\u4fbf\u5730\u5b58\u5132\u548c\u7ba1\u7406 Notebook\uff0c\u96a8\u6642\u5f9e\u96f2\u7aef\u6253\u958b\u3001\u4fee\u6539\u3001\u5206\u4eab\u4f60\u7684\u5c08\u6848\u3002 Colab \u7684\u5e38\u898b\u61c9\u7528\u5834\u666f Python \u8a9e\u6cd5\u5b78\u7fd2 \uff1a \u521d\u5b78\u8005\u53ef\u4ee5\u5229\u7528 Colab \u5be6\u6642\u5b78\u7fd2\u548c\u57f7\u884c Python \u8a9e\u6cd5\uff0c\u5f9e\u7c21\u55ae\u7684\u6578\u64da\u7d50\u69cb\u3001\u689d\u4ef6\u8a9e\u53e5\u3001\u8ff4\u5708\u5230\u51fd\u6578\uff0c\u9010\u6b65\u638c\u63e1\u7de8\u7a0b\u6280\u80fd\u3002 \u8cc7\u6599\u5206\u6790\u8207\u8996\u89ba\u5316 \uff1a Colab \u652f\u6301\u591a\u7a2e Python \u6578\u64da\u5206\u6790\u5eab\uff0c\u5982 Pandas\u3001NumPy\u3001Matplotlib \u7b49\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 Colab \u9032\u884c\u6578\u64da\u6e05\u7406\u3001\u8655\u7406\u548c\u53ef\u8996\u5316\uff0c\u4e26\u5373\u6642\u67e5\u770b\u5206\u6790\u7d50\u679c\u3002 \u6a5f\u5668\u5b78\u7fd2\u8207\u6df1\u5ea6\u5b78\u7fd2\u5be6\u9a57 \uff1a \u5c0d\u65bc\u90a3\u4e9b\u60f3\u9032\u884c\u6a5f\u5668\u5b78\u7fd2\u6216\u6df1\u5ea6\u5b78\u7fd2\u7684\u521d\u5b78\u8005\uff0cColab \u63d0\u4f9b\u4e86 TensorFlow\u3001Keras \u7b49\u6846\u67b6\u7684\u652f\u6301\u3002\u4f60\u53ef\u4ee5\u5229\u7528\u5176\u5f37\u5927\u7684 GPU \u8cc7\u6e90\uff0c\u9032\u884c\u6a21\u578b\u8a13\u7df4\u548c\u6e2c\u8a66\uff0c\u800c\u4e0d\u9700\u8981\u6602\u8cb4\u7684\u786c\u9ad4\u8a2d\u5099\u3002 \u6559\u5b78\u8207\u5c55\u793a \uff1a Colab \u652f\u6301\u5728 Notebook \u4e2d\u5d4c\u5165\u6587\u5b57\u8aaa\u660e\u3001\u5716\u7247\u548c\u7a0b\u5f0f\u78bc\uff0c\u975e\u5e38\u9069\u5408\u7528\u4f86\u64b0\u5beb\u6559\u5b78\u7b46\u8a18\u6216\u9032\u884c\u5be6\u4f5c\u6f14\u793a\u3002 \u5982\u4f55\u958b\u59cb\u4f7f\u7528 Colab\uff1f \u9996\u5148\u958b\u555f Chrome \u700f\u89bd\u5668(\u63a8\u85a6)\uff0c\u63a5\u8457\u767b\u9304\u4f60\u7684 Google \u5e33\u6236\u3002\u9019\u88e1\u63d0\u4f9b\u4e00\u500b \u7bc4\u4f8b\u7a0b\u5f0f \uff0c\u5927\u5bb6\u53ef\u4ee5\u4f9d\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff0c\u4e26\u5c07\u526f\u672c\u4fdd\u5b58\u5230\u81ea\u5df1\u7684\u96f2\u7aef\u786c\u789f\u4e2d\u3002\u9019\u6a23\u4f60\u5c31\u53ef\u4ee5\u81ea\u7531\u5730\u4fee\u6539\u7a0b\u5f0f\uff0c\u4e26\u4fdd\u5b58\u4f60\u7684\u7a0b\u5f0f\u78bc\u3002 \u5c07\u7bc4\u4f8b\u7a0b\u5f0f\u526f\u672c\u5230\u81ea\u5df1\u7684\u96f2\u7aef\u786c\u789f\u5f8c\uff0c\u7a0b\u5f0f\u78bc\u5c07\u6703\u81ea\u52d5\u4fdd\u5b58\u5230\u4f60\u7684\u96f2\u7aef\u786c\u789f\u4e2d\u7684 Colab Notebooks \u8cc7\u6599\u593e\u5e95\u4e0b\uff0c\u5982\u5716\u7247\u6240\u793a\u3002\u4f60\u53ef\u4ee5\u96a8\u6642\u5728\u9019\u500b\u8cc7\u6599\u593e\u5167\u627e\u5230\u4f60\u7684\u5c08\u6848\uff0c\u4e26\u9032\u884c\u4fee\u6539\u548c\u904b\u884c\u3002 \u5728 Google Colaboratory \u4e2d\uff0c\u9810\u8a2d\u7684\u904b\u7b97\u8cc7\u6e90\u662f\u4f7f\u7528 CPU\u3002\u5982\u679c\u4f60\u7684\u5c08\u6848\u9700\u8981\u66f4\u9ad8\u7684\u8a08\u7b97\u80fd\u529b\uff0c\u4f8b\u5982\u8a13\u7df4\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\uff0c\u53ef\u80fd\u6703\u9700\u8981\u4f7f\u7528\u5230 GPU \u6216 TPU\u3002\u9996\u5148\uff0c\u9ede\u9078\u9802\u90e8\u9078\u55ae\u4e2d\u7684 Runtime\uff08\u57f7\u884c\u968e\u6bb5\uff09\u3002 \u63a5\u8457\uff0c\u9078\u64c7 Change runtime type\uff08\u66f4\u6539\u57f7\u884c\u968e\u6bb5\u985e\u578b\uff09\u3002 \u5728\u5f48\u51fa\u7684\u8a2d\u5b9a\u8996\u7a97\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5c07 Hardware accelerator\uff08\u786c\u9ad4\u52a0\u901f\u5668\uff09 \u8a2d\u5b9a\u70ba GPU \u6216 TPU\u3002 \u8a2d\u5b9a\u5b8c\u6210\u5f8c\uff0c\u9ede\u64ca Save\uff08\u4fdd\u5b58\uff09\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u958b\u59cb\u4f7f\u7528 GPU \u6216 TPU \u9032\u884c\u8a08\u7b97\u3002 Note \u5728 Google Colaboratory \u4e2d\uff0cGPU \u548c TPU \u904b\u7b97\u8cc7\u6e90\u662f\u514d\u8cbb\u63d0\u4f9b\u7684\uff0c\u4f46\u6709\u4e00\u5b9a\u7684\u4f7f\u7528\u9650\u5236\u548c\u914d\u984d\u3002 \u514d\u8cbb\u4f7f\u7528 GPU \u548c TPU \u7684\u914d\u984d GPU \uff1a Colab \u63d0\u4f9b Tesla K80\u3001T4 \u7b49\u985e\u578b\u7684 GPU \u4f9b\u7528\u6236\u4f7f\u7528\u3002 \u514d\u8cbb\u7528\u6236\u6bcf\u5929\u7684\u4f7f\u7528\u6642\u9593\u9650\u5236\u7d04\u70ba 12 \u5c0f\u6642\uff08\u5177\u9ad4\u4f7f\u7528\u6642\u9593\u6703\u96a8\u8457\u7cfb\u7d71\u8ca0\u8f09\u60c5\u6cc1\u8abf\u6574\uff09\u3002 \u9023\u7e8c\u4f7f\u7528 GPU \u8d85\u904e\u4e00\u5b9a\u6642\u9593\u5f8c\uff0c\u53ef\u80fd\u9700\u8981\u9593\u9694\u4e00\u6bb5\u6642\u9593\u518d\u7e7c\u7e8c\u4f7f\u7528\u3002 TPU \uff1a TPU \u4e3b\u8981\u7528\u65bc\u52a0\u901f\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\u8a13\u7df4\uff0c\u5982\u4f7f\u7528 TensorFlow \u548c Keras\u3002 \u514d\u8cbb\u7528\u6236\u540c\u6a23\u4eab\u6709\u4e00\u5b9a\u6642\u9593\u7684 TPU \u4f7f\u7528\u914d\u984d\uff0c\u901a\u5e38\u8207 GPU \u985e\u4f3c\uff0c\u6bcf\u5929\u6709\u6578\u5c0f\u6642\u7684\u9650\u5236\u3002 \u6ce8\u610f\u4e8b\u9805 Colab \u7684\u514d\u8cbb\u8cc7\u6e90\u662f\u6839\u64da\u7528\u6236\u7684\u9700\u6c42\u52d5\u614b\u5206\u914d\u7684\uff0c\u56e0\u6b64\u5982\u679c\u67d0\u4e9b\u6642\u9593\u9ede\u7cfb\u7d71\u8cc7\u6e90\u5403\u7dca\uff0c\u4f7f\u7528\u6642\u9593\u53ef\u80fd\u6703\u7e2e\u77ed\u3002 \u5982\u679c\u9700\u8981\u66f4\u591a\u7684\u8a08\u7b97\u8cc7\u6e90\u6216\u7a69\u5b9a\u7684 GPU/TPU \u4f7f\u7528\u6642\u9593\uff0c\u53ef\u4ee5\u8003\u616e\u5347\u7d1a\u5230 Colab Pro \u6216 Colab Pro+\uff0c\u9019\u6703\u63d0\u4f9b\u66f4\u9577\u7684\u904b\u7b97\u6642\u9593\u3001\u66f4\u5feb\u7684 GPU/TPU \u4ee5\u53ca\u66f4\u5927\u7684 RAM \u5bb9\u91cf\u3002 Colab Notebook\u74b0\u5883\u4ecb\u7d39 Google Colab \u662f\u4e00\u500b\u975e\u5e38\u65b9\u4fbf\u4e14\u6613\u65bc\u4e0a\u624b\u7684\u958b\u767c\u74b0\u5883\uff0c\u7279\u5225\u9069\u5408\u521d\u5b78\u8005\u9032\u884c Python \u958b\u767c\u3002\u60f3\u8981\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u7a7a\u767d\u5c08\u6848\u6642\uff0c\u53ea\u9700\u5728 Google Colab \u9ede\u64ca\u300c\u65b0\u5efa\u7b46\u8a18\u672c\u300d\u5373\u53ef\u5275\u5efa\u4e00\u500b\u65b0\u7684 Jupyter Notebook\uff0c\u958b\u59cb\u4f60\u7684 Python \u958b\u767c\u3002\u4e0d\u9700\u8981\u5b89\u88dd\u4efb\u4f55\u8edf\u9ad4\uff0c\u53ea\u8981\u6709\u700f\u89bd\u5668\u548c\u7db2\u8def\u9023\u7dda\uff0c\u5c31\u80fd\u8f15\u9b06\u4f7f\u7528\u3002 \u7576\u4f60\u9032\u5165 Colab \u4ecb\u9762\u5f8c\uff0c\u4f60\u6703\u770b\u5230\u4ee5\u4e0b\u5e7e\u500b\u4e3b\u8981\u7684\u64cd\u4f5c\u5340\u57df\uff1a \u6a94\u6848\u540d\u7a31 \uff1a\u986f\u793a\u76ee\u524d\u958b\u555f\u7684\u6a94\u6848\u540d\u7a31\u3002 \u5de5\u5177\u5217 \uff1a\u5305\u542b\u5404\u7a2e\u529f\u80fd\u9078\u9805\uff0c\u5982\u6a94\u6848\u3001\u7de8\u8f2f\u3001\u6aa2\u8996\u3001\u57f7\u884c\u7b49\u3002 \u5074\u908a\u5de5\u5177\u6b04 \uff1a\u63d0\u4f9b\u5feb\u901f\u5b58\u53d6\u529f\u80fd\uff0c\u5982\u6a94\u6848\u7ba1\u7406\u548c\u7a0b\u5f0f\u78bc\u7247\u6bb5\u3002 \u5132\u5b58\u683c (Cell) \uff1a\u986f\u793a\u4e26\u57f7\u884c\u7a0b\u5f0f\u78bc\u7684\u5340\u57df\u3002 \u5132\u5b58\u683c\u5de5\u5177\u5217 \uff1a\u5132\u5b58\u683c\u5c08\u5c6c\u7684\u64cd\u4f5c\u6309\u9215\uff0c\u5982\u57f7\u884c\u3001\u79fb\u52d5\u3001\u8a2d\u5b9a\u7b49\u529f\u80fd\u3002 \u9023\u7dda\u72c0\u614b \uff1a\u986f\u793a\u76ee\u524d\u7684\u9023\u7dda\u72c0\u614b\u3002 \u7559\u8a00\u8207\u5171\u7528 \uff1a\u63d0\u4f9b\u7559\u8a00\u8207\u5171\u7528\u529f\u80fd\u7684\u9078\u9805\u3002 Note \u958b\u555f Notebook \u5f8c\uff0c\u7b2c\u4e00\u500b\u6b65\u9a5f\u662f\u9ede\u64ca \u9023\u7dda(Connect) \u4ee5\u914d\u7f6e\u5c08\u6848\u6240\u9700\u7684\u904b\u7b97\u8cc7\u6e90\u3002 \u57fa\u672c\u5143\u7d20 \u5728 Google Colaboratory\uff08Colab\uff09\u4e2d\uff0ccell \u662f Jupyter Notebook \u7684\u57fa\u672c\u55ae\u4f4d\uff0c\u6bcf\u500b cell \u90fd\u53ef\u4ee5\u5305\u542b\u7a0b\u5f0f\u78bc\u6216\u6587\u5b57\u3002Colab \u7684 Notebook \u4e3b\u8981\u7531\u5169\u5927\u5143\u7d20\u7d44\u6210\uff1aCode\uff08\u7a0b\u5f0f\u78bc\uff09cell \u548c Text\uff08\u6587\u5b57\uff09cell\u3002 Code\uff08\u7a0b\u5f0f\u78bc\uff09cell \uff1a Code cell \u7528\u4f86\u7de8\u5beb\u548c\u57f7\u884c Python \u7a0b\u5f0f\u78bc\u3002\u7576\u4f60\u5728\u9019\u500b cell \u4e2d\u8f38\u5165\u7a0b\u5f0f\u78bc\u4e26\u904b\u884c\u5f8c\uff0cColab \u6703\u5373\u6642\u57f7\u884c\u8a72\u7a0b\u5f0f\uff0c\u4e26\u5728\u4e0b\u65b9\u986f\u793a\u904b\u884c\u7d50\u679c\u3002\u9019\u8b93\u4f60\u80fd\u5920\u5373\u6642\u6e2c\u8a66\u7a0b\u5f0f\u78bc\uff0c\u65b9\u4fbf\u9032\u884c\u958b\u767c\u548c\u5b78\u7fd2\u3002 Note \u53ef\u4ee5\u76f4\u63a5\u5728\u7a0b\u5f0f\u5340\u584a\u4e2d\u8f38\u5165 Python \u7a0b\u5f0f\u78bc\uff0c\u4e26\u6309\u4e0b Shift + Enter \u9375\u57f7\u884c\u7a0b\u5f0f\uff0c\u53c8\u6216\u662f\u9ede\u9078\u6bcf\u500bcell\u5de6\u5074\u57f7\u884c\u6309\u9215\uff0c\u57f7\u884c\u4e26\u5373\u6642\u67e5\u770b\u904b\u884c\u7d50\u679c\u3002 Text\uff08\u6587\u5b57\uff09cell \uff1a Text cell \u7528\u4f86\u64b0\u5beb\u8aaa\u660e\u3001\u63cf\u8ff0\u6216\u6a19\u8a3b\uff0c\u652f\u63f4\u4f7f\u7528 Markdown \u8a9e\u6cd5\u9032\u884c\u6392\u7248\u3002\u9019\u8b93\u4f60\u80fd\u5920\u5728 Notebook \u4e2d\u6e05\u6670\u5730\u8a18\u9304\u7a0b\u5f0f\u908f\u8f2f\u3001\u6b65\u9a5f\u6216\u6559\u5b78\u5167\u5bb9\uff0c\u8b93\u7a0b\u5f0f\u548c\u8aaa\u660e\u53ef\u4ee5\u878d\u5408\u5728\u4e00\u8d77\uff0c\u4fbf\u65bc\u6559\u5b78\u548c\u5171\u4eab\u3002 \u9023\u52d5 Google Drive \u7531\u65bc Colab \u662f Google \u7684\u670d\u52d9\uff0c\u56e0\u6b64\u5b83\u80fd\u5920\u65b9\u4fbf\u5730\u8207 Google \u96f2\u7aef\u786c\u789f\u6574\u5408\uff0c\u8b93\u4f60\u53ef\u4ee5\u8f15\u9b06\u5730\u5728 Colab \u4e2d\u65b0\u589e\u3001\u522a\u9664\u6216\u4fee\u6539\u6a94\u6848\u3002\u53ea\u9700\u7c21\u55ae\u5e7e\u6b65\uff0c\u5373\u53ef\u5c07 Colab \u8207 Google Drive \u9023\u52d5\uff1a \u639b\u63a5\u96f2\u7aef\u786c\u789f \uff1a\u9ede\u64ca Colab \u5de6\u5074\u7684\u6309\u9215\uff0c\u9078\u64c7\u9023\u52d5 Google \u96f2\u7aef\u786c\u789f\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u958b\u59cb\u9032\u884c\u6a94\u6848\u7684\u5b58\u53d6\u3002 \u958b\u555f\u6b0a\u9650 \uff1a\u9ede\u64ca\u6309\u9215\u5f8c\uff0c\u6703\u5f48\u51fa\u4e00\u500b\u8981\u6c42\u6388\u6b0a\u7684\u8996\u7a97\uff0c\u9ede\u9078\u300c\u9023\u7dda\u81f3 Google \u96f2\u7aef\u786c\u789f\u300d\uff0c\u5141\u8a31 Colab \u5b58\u53d6\u4f60\u7684\u96f2\u7aef\u786c\u789f\u8cc7\u6599\u3002 \u78ba\u8a8d\u639b\u63a5\u6210\u529f \uff1a\u5728\u5de6\u5074\u6e05\u55ae\u4e2d\u770b\u5230 Google \u96f2\u7aef\u786c\u789f\u7684\u8cc7\u6599\u593e\u5f8c\uff0c\u8868\u793a Colab \u5df2\u7d93\u6210\u529f\u9023\u63a5\uff0c\u73fe\u5728\u53ef\u4ee5\u958b\u59cb\u5728 Notebook \u4e2d\u64cd\u4f5c\u96f2\u7aef\u786c\u789f\u7684\u6a94\u6848\u3002 \u6e2c\u8a66\u9023\u52d5 \uff1a\u4f60\u53ef\u4ee5\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u8cbc\u5165 Colab\uff0c\u57f7\u884c\u5f8c\u6703\u5728\u96f2\u7aef\u786c\u789f\u7684 Colab Notebooks \u8cc7\u6599\u593e\u4e2d\u5275\u5efa\u4e00\u500b\u540d\u70ba test.txt \u7684\u6587\u4ef6\uff0c\u5167\u5bb9\u662f\u300cHello Google Drive!\u300d\uff1a \u5c0f\u7d50 Google Colaboratory \u662f\u4e00\u500b\u9069\u5408 Python \u521d\u5b78\u8005\u7684\u7406\u60f3\u5de5\u5177\uff0c\u7121\u9700\u914d\u7f6e\u672c\u5730\u958b\u767c\u74b0\u5883\uff0c\u7c21\u55ae\u6613\u7528\u4e14\u5177\u5099\u5f37\u5927\u7684\u96f2\u7aef\u8a08\u7b97\u8cc7\u6e90\u3002\u7121\u8ad6\u662f\u5b78\u7fd2 Python \u57fa\u790e\u3001\u9032\u884c\u6578\u64da\u5206\u6790\uff0c\u9084\u662f\u6df1\u5165\u63a2\u7d22\u6a5f\u5668\u5b78\u7fd2\u9818\u57df\uff0cColab \u90fd\u80fd\u6eff\u8db3\u4f60\u7684\u9700\u6c42\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u5b83\u5b8c\u5168\u514d\u8cbb\uff0c\u8b93\u6bcf\u500b\u4eba\u90fd\u80fd\u8f15\u9b06\u5165\u9580 Python \u7de8\u7a0b\u8207 AI \u958b\u767c\u3002 \u5ef6\u4f38\u95b1\u8b80 \u514d\u8cbb\u96f2\u7aefJupyter Notebook\u5831\u4f60\u77e5","title":"1.2 Google Colab\u4ecb\u7d39"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#12-google-colab-python","text":"\u96a8\u8457 Python \u6210\u70ba\u6a5f\u5668\u5b78\u7fd2\u3001\u6578\u64da\u5206\u6790\u548c\u4eba\u5de5\u667a\u6167\u9818\u57df\u7684\u4e3b\u8981\u7de8\u7a0b\u8a9e\u8a00\uff0c\u5982\u4f55\u5feb\u901f\u4e0a\u624b\u4e26\u958b\u59cb\u958b\u767c\u6210\u70ba\u8a31\u591a\u521d\u5b78\u8005\u95dc\u6ce8\u7684\u554f\u984c\u3002\u5c0d\u65bc\u90a3\u4e9b\u4e0d\u60f3\u5728\u672c\u5730\u8a2d\u7f6e\u958b\u767c\u74b0\u5883\u7684\u4eba\u4f86\u8aaa\uff0cGoogle Colaboratory\uff08\u7c21\u7a31 Colab\uff09\u662f\u4e00\u500b\u975e\u5e38\u7406\u60f3\u7684\u89e3\u6c7a\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u662f\u5b8c\u5168\u7684\u521d\u5b78\u8005\uff0c\u5efa\u8b70\u4e00\u958b\u59cb\u5148\u4e0d\u8981\u6025\u8457\u5728\u672c\u5730\u7aef\u67b6\u8a2d\u74b0\u5883\uff0c\u800c\u662f\u5229\u7528\u514d\u8cbb\u7684\u96f2\u7aef\u8cc7\u6e90\u3002\u9019\u6a23\u53ef\u4ee5\u8b93\u4f60\u5c08\u6ce8\u65bc\u5b78\u7fd2 Python\uff0c\u800c\u4e0d\u5fc5\u70ba\u74b0\u5883\u8a2d\u5b9a\u800c\u7169\u60f1\u3002","title":"1.2 Google Colab\uff1a\u9069\u5408 Python \u521d\u5b78\u8005\u7684\u96f2\u7aef\u958b\u767c\u74b0\u5883"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#google-colaboratory","text":"Google Colaboratory \u662f\u4e00\u500b\u514d\u8cbb\u7684\u96f2\u7aef\u7de8\u7a0b\u74b0\u5883\uff0c\u5b83\u57fa\u65bc Jupyter Notebook\uff0c\u8b93\u7528\u6236\u53ef\u4ee5\u5728\u7dda\u7de8\u5beb\u548c\u57f7\u884c Python \u7a0b\u5f0f\uff0c\u7121\u9700\u672c\u5730\u8a2d\u7f6e Python \u74b0\u5883\u3002Colab \u63d0\u4f9b\u5f37\u5927\u7684\u8a08\u7b97\u8cc7\u6e90\uff0c\u5305\u62ec\u514d\u8cbb\u7684 GPU \u548c TPU \u652f\u6301\uff0c\u975e\u5e38\u9069\u5408\u7528\u4f86\u9032\u884c\u6a5f\u5668\u5b78\u7fd2\u6a21\u578b\u8a13\u7df4\u3001\u6578\u64da\u5206\u6790\u4ee5\u53ca\u5176\u4ed6\u9ad8\u8a08\u7b97\u9700\u6c42\u7684\u5de5\u4f5c\u3002","title":"\u4ec0\u9ebc\u662f Google Colaboratory\uff1f"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#colab","text":"\u514d\u5b89\u88dd \uff1a Colab \u662f\u57fa\u65bc\u96f2\u7aef\u7684\uff0c\u9019\u610f\u5473\u8457\u4f60\u4e0d\u9700\u8981\u5b89\u88dd\u4efb\u4f55\u8edf\u9ad4\u6216\u9032\u884c\u4efb\u4f55\u8907\u96dc\u7684\u914d\u7f6e\u3002\u53ea\u8981\u6709\u7db2\u9801\u700f\u89bd\u5668\u548c Google \u5e33\u6236\uff0c\u5c31\u80fd\u96a8\u6642\u96a8\u5730\u958b\u59cb\u7de8\u5beb\u7a0b\u5f0f\u3002 \u7c21\u55ae\u6613\u7528\u7684\u754c\u9762 \uff1a Colab \u754c\u9762\u76f4\u89c0\uff0c\u57fa\u65bc Jupyter Notebook \u7684\u5f62\u5f0f\u975e\u5e38\u9069\u5408\u521d\u5b78\u8005\u3002\u4f60\u53ef\u4ee5\u5c07\u7a0b\u5f0f\u78bc\u5206\u6bb5\u7de8\u5beb\u3001\u57f7\u884c\uff0c\u4e26\u5373\u6642\u770b\u5230\u7d50\u679c\u3002\u540c\u6642\u9084\u652f\u6301\u6587\u5b57\u3001\u5716\u7247\u3001\u6578\u64da\u8868\u683c\u7684\u5c55\u793a\uff0c\u4fbf\u65bc\u7de8\u5beb\u6559\u5b78\u7b46\u8a18\u6216\u8aaa\u660e\u6587\u4ef6\u3002 \u5373\u6642\u57f7\u884c\u7d50\u679c \uff1a \u4f60\u53ef\u4ee5\u5728 Notebook \u4e2d\u5206\u6bb5\u57f7\u884c\u7a0b\u5f0f\u78bc\uff0c\u770b\u5230\u5373\u6642\u7d50\u679c\uff0c\u9019\u5c0d\u65bc\u5b78\u7fd2\u548c\u7406\u89e3 Python \u8a9e\u6cd5\u548c\u6a5f\u5668\u5b78\u7fd2\u6982\u5ff5\u975e\u5e38\u6709\u5e6b\u52a9\u3002\u5373\u4f7f\u7a0b\u5f0f\u78bc\u51fa\u932f\uff0c\u4f60\u4e5f\u53ef\u4ee5\u53ea\u4fee\u6539\u90a3\u4e00\u5c0f\u6bb5\uff0c\u518d\u6b21\u57f7\u884c\u5373\u53ef\uff0c\u7121\u9700\u91cd\u65b0\u904b\u884c\u6574\u500b\u7a0b\u5f0f\u3002 \u652f\u63f4 GPU/TPU \uff1a \u5c0d\u65bc\u9700\u8981\u5927\u91cf\u8a08\u7b97\u8cc7\u6e90\u7684\u4efb\u52d9\uff0c\u5982\u8a13\u7df4\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\uff0cColab \u63d0\u4f9b\u514d\u8cbb\u7684 GPU \u548c TPU \u8cc7\u6e90\uff0c\u9019\u5c0d\u65bc\u672c\u5730\u7121\u6cd5\u63d0\u4f9b\u8db3\u5920\u8a08\u7b97\u80fd\u529b\u7684\u521d\u5b78\u8005\u4f86\u8aaa\uff0c\u662f\u975e\u5e38\u5be6\u7528\u7684\u529f\u80fd\u3002 \u8207 Google \u96f2\u7aef\u786c\u789f\u6574\u5408 \uff1a Colab \u8207 Google \u96f2\u7aef\u786c\u789f\u7121\u7e2b\u6574\u5408\uff0c\u4f60\u53ef\u4ee5\u65b9\u4fbf\u5730\u5b58\u5132\u548c\u7ba1\u7406 Notebook\uff0c\u96a8\u6642\u5f9e\u96f2\u7aef\u6253\u958b\u3001\u4fee\u6539\u3001\u5206\u4eab\u4f60\u7684\u5c08\u6848\u3002","title":"\u70ba\u4ec0\u9ebc Colab \u9069\u5408\u521d\u5b78\u8005\uff1f"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#colab_1","text":"Python \u8a9e\u6cd5\u5b78\u7fd2 \uff1a \u521d\u5b78\u8005\u53ef\u4ee5\u5229\u7528 Colab \u5be6\u6642\u5b78\u7fd2\u548c\u57f7\u884c Python \u8a9e\u6cd5\uff0c\u5f9e\u7c21\u55ae\u7684\u6578\u64da\u7d50\u69cb\u3001\u689d\u4ef6\u8a9e\u53e5\u3001\u8ff4\u5708\u5230\u51fd\u6578\uff0c\u9010\u6b65\u638c\u63e1\u7de8\u7a0b\u6280\u80fd\u3002 \u8cc7\u6599\u5206\u6790\u8207\u8996\u89ba\u5316 \uff1a Colab \u652f\u6301\u591a\u7a2e Python \u6578\u64da\u5206\u6790\u5eab\uff0c\u5982 Pandas\u3001NumPy\u3001Matplotlib \u7b49\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528 Colab \u9032\u884c\u6578\u64da\u6e05\u7406\u3001\u8655\u7406\u548c\u53ef\u8996\u5316\uff0c\u4e26\u5373\u6642\u67e5\u770b\u5206\u6790\u7d50\u679c\u3002 \u6a5f\u5668\u5b78\u7fd2\u8207\u6df1\u5ea6\u5b78\u7fd2\u5be6\u9a57 \uff1a \u5c0d\u65bc\u90a3\u4e9b\u60f3\u9032\u884c\u6a5f\u5668\u5b78\u7fd2\u6216\u6df1\u5ea6\u5b78\u7fd2\u7684\u521d\u5b78\u8005\uff0cColab \u63d0\u4f9b\u4e86 TensorFlow\u3001Keras \u7b49\u6846\u67b6\u7684\u652f\u6301\u3002\u4f60\u53ef\u4ee5\u5229\u7528\u5176\u5f37\u5927\u7684 GPU \u8cc7\u6e90\uff0c\u9032\u884c\u6a21\u578b\u8a13\u7df4\u548c\u6e2c\u8a66\uff0c\u800c\u4e0d\u9700\u8981\u6602\u8cb4\u7684\u786c\u9ad4\u8a2d\u5099\u3002 \u6559\u5b78\u8207\u5c55\u793a \uff1a Colab \u652f\u6301\u5728 Notebook \u4e2d\u5d4c\u5165\u6587\u5b57\u8aaa\u660e\u3001\u5716\u7247\u548c\u7a0b\u5f0f\u78bc\uff0c\u975e\u5e38\u9069\u5408\u7528\u4f86\u64b0\u5beb\u6559\u5b78\u7b46\u8a18\u6216\u9032\u884c\u5be6\u4f5c\u6f14\u793a\u3002","title":"Colab \u7684\u5e38\u898b\u61c9\u7528\u5834\u666f"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#colab_2","text":"\u9996\u5148\u958b\u555f Chrome \u700f\u89bd\u5668(\u63a8\u85a6)\uff0c\u63a5\u8457\u767b\u9304\u4f60\u7684 Google \u5e33\u6236\u3002\u9019\u88e1\u63d0\u4f9b\u4e00\u500b \u7bc4\u4f8b\u7a0b\u5f0f \uff0c\u5927\u5bb6\u53ef\u4ee5\u4f9d\u7167\u4ee5\u4e0b\u6b65\u9a5f\u64cd\u4f5c\uff0c\u4e26\u5c07\u526f\u672c\u4fdd\u5b58\u5230\u81ea\u5df1\u7684\u96f2\u7aef\u786c\u789f\u4e2d\u3002\u9019\u6a23\u4f60\u5c31\u53ef\u4ee5\u81ea\u7531\u5730\u4fee\u6539\u7a0b\u5f0f\uff0c\u4e26\u4fdd\u5b58\u4f60\u7684\u7a0b\u5f0f\u78bc\u3002 \u5c07\u7bc4\u4f8b\u7a0b\u5f0f\u526f\u672c\u5230\u81ea\u5df1\u7684\u96f2\u7aef\u786c\u789f\u5f8c\uff0c\u7a0b\u5f0f\u78bc\u5c07\u6703\u81ea\u52d5\u4fdd\u5b58\u5230\u4f60\u7684\u96f2\u7aef\u786c\u789f\u4e2d\u7684 Colab Notebooks \u8cc7\u6599\u593e\u5e95\u4e0b\uff0c\u5982\u5716\u7247\u6240\u793a\u3002\u4f60\u53ef\u4ee5\u96a8\u6642\u5728\u9019\u500b\u8cc7\u6599\u593e\u5167\u627e\u5230\u4f60\u7684\u5c08\u6848\uff0c\u4e26\u9032\u884c\u4fee\u6539\u548c\u904b\u884c\u3002 \u5728 Google Colaboratory \u4e2d\uff0c\u9810\u8a2d\u7684\u904b\u7b97\u8cc7\u6e90\u662f\u4f7f\u7528 CPU\u3002\u5982\u679c\u4f60\u7684\u5c08\u6848\u9700\u8981\u66f4\u9ad8\u7684\u8a08\u7b97\u80fd\u529b\uff0c\u4f8b\u5982\u8a13\u7df4\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\uff0c\u53ef\u80fd\u6703\u9700\u8981\u4f7f\u7528\u5230 GPU \u6216 TPU\u3002\u9996\u5148\uff0c\u9ede\u9078\u9802\u90e8\u9078\u55ae\u4e2d\u7684 Runtime\uff08\u57f7\u884c\u968e\u6bb5\uff09\u3002 \u63a5\u8457\uff0c\u9078\u64c7 Change runtime type\uff08\u66f4\u6539\u57f7\u884c\u968e\u6bb5\u985e\u578b\uff09\u3002 \u5728\u5f48\u51fa\u7684\u8a2d\u5b9a\u8996\u7a97\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5c07 Hardware accelerator\uff08\u786c\u9ad4\u52a0\u901f\u5668\uff09 \u8a2d\u5b9a\u70ba GPU \u6216 TPU\u3002 \u8a2d\u5b9a\u5b8c\u6210\u5f8c\uff0c\u9ede\u64ca Save\uff08\u4fdd\u5b58\uff09\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u958b\u59cb\u4f7f\u7528 GPU \u6216 TPU \u9032\u884c\u8a08\u7b97\u3002 Note \u5728 Google Colaboratory \u4e2d\uff0cGPU \u548c TPU \u904b\u7b97\u8cc7\u6e90\u662f\u514d\u8cbb\u63d0\u4f9b\u7684\uff0c\u4f46\u6709\u4e00\u5b9a\u7684\u4f7f\u7528\u9650\u5236\u548c\u914d\u984d\u3002","title":"\u5982\u4f55\u958b\u59cb\u4f7f\u7528 Colab\uff1f"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#gpu-tpu","text":"GPU \uff1a Colab \u63d0\u4f9b Tesla K80\u3001T4 \u7b49\u985e\u578b\u7684 GPU \u4f9b\u7528\u6236\u4f7f\u7528\u3002 \u514d\u8cbb\u7528\u6236\u6bcf\u5929\u7684\u4f7f\u7528\u6642\u9593\u9650\u5236\u7d04\u70ba 12 \u5c0f\u6642\uff08\u5177\u9ad4\u4f7f\u7528\u6642\u9593\u6703\u96a8\u8457\u7cfb\u7d71\u8ca0\u8f09\u60c5\u6cc1\u8abf\u6574\uff09\u3002 \u9023\u7e8c\u4f7f\u7528 GPU \u8d85\u904e\u4e00\u5b9a\u6642\u9593\u5f8c\uff0c\u53ef\u80fd\u9700\u8981\u9593\u9694\u4e00\u6bb5\u6642\u9593\u518d\u7e7c\u7e8c\u4f7f\u7528\u3002 TPU \uff1a TPU \u4e3b\u8981\u7528\u65bc\u52a0\u901f\u6df1\u5ea6\u5b78\u7fd2\u6a21\u578b\u8a13\u7df4\uff0c\u5982\u4f7f\u7528 TensorFlow \u548c Keras\u3002 \u514d\u8cbb\u7528\u6236\u540c\u6a23\u4eab\u6709\u4e00\u5b9a\u6642\u9593\u7684 TPU \u4f7f\u7528\u914d\u984d\uff0c\u901a\u5e38\u8207 GPU \u985e\u4f3c\uff0c\u6bcf\u5929\u6709\u6578\u5c0f\u6642\u7684\u9650\u5236\u3002 \u6ce8\u610f\u4e8b\u9805 Colab \u7684\u514d\u8cbb\u8cc7\u6e90\u662f\u6839\u64da\u7528\u6236\u7684\u9700\u6c42\u52d5\u614b\u5206\u914d\u7684\uff0c\u56e0\u6b64\u5982\u679c\u67d0\u4e9b\u6642\u9593\u9ede\u7cfb\u7d71\u8cc7\u6e90\u5403\u7dca\uff0c\u4f7f\u7528\u6642\u9593\u53ef\u80fd\u6703\u7e2e\u77ed\u3002 \u5982\u679c\u9700\u8981\u66f4\u591a\u7684\u8a08\u7b97\u8cc7\u6e90\u6216\u7a69\u5b9a\u7684 GPU/TPU \u4f7f\u7528\u6642\u9593\uff0c\u53ef\u4ee5\u8003\u616e\u5347\u7d1a\u5230 Colab Pro \u6216 Colab Pro+\uff0c\u9019\u6703\u63d0\u4f9b\u66f4\u9577\u7684\u904b\u7b97\u6642\u9593\u3001\u66f4\u5feb\u7684 GPU/TPU \u4ee5\u53ca\u66f4\u5927\u7684 RAM \u5bb9\u91cf\u3002","title":"\u514d\u8cbb\u4f7f\u7528 GPU \u548c TPU \u7684\u914d\u984d"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#colab-notebook","text":"Google Colab \u662f\u4e00\u500b\u975e\u5e38\u65b9\u4fbf\u4e14\u6613\u65bc\u4e0a\u624b\u7684\u958b\u767c\u74b0\u5883\uff0c\u7279\u5225\u9069\u5408\u521d\u5b78\u8005\u9032\u884c Python \u958b\u767c\u3002\u60f3\u8981\u5efa\u7acb\u4e00\u500b\u65b0\u7684\u7a7a\u767d\u5c08\u6848\u6642\uff0c\u53ea\u9700\u5728 Google Colab \u9ede\u64ca\u300c\u65b0\u5efa\u7b46\u8a18\u672c\u300d\u5373\u53ef\u5275\u5efa\u4e00\u500b\u65b0\u7684 Jupyter Notebook\uff0c\u958b\u59cb\u4f60\u7684 Python \u958b\u767c\u3002\u4e0d\u9700\u8981\u5b89\u88dd\u4efb\u4f55\u8edf\u9ad4\uff0c\u53ea\u8981\u6709\u700f\u89bd\u5668\u548c\u7db2\u8def\u9023\u7dda\uff0c\u5c31\u80fd\u8f15\u9b06\u4f7f\u7528\u3002 \u7576\u4f60\u9032\u5165 Colab \u4ecb\u9762\u5f8c\uff0c\u4f60\u6703\u770b\u5230\u4ee5\u4e0b\u5e7e\u500b\u4e3b\u8981\u7684\u64cd\u4f5c\u5340\u57df\uff1a \u6a94\u6848\u540d\u7a31 \uff1a\u986f\u793a\u76ee\u524d\u958b\u555f\u7684\u6a94\u6848\u540d\u7a31\u3002 \u5de5\u5177\u5217 \uff1a\u5305\u542b\u5404\u7a2e\u529f\u80fd\u9078\u9805\uff0c\u5982\u6a94\u6848\u3001\u7de8\u8f2f\u3001\u6aa2\u8996\u3001\u57f7\u884c\u7b49\u3002 \u5074\u908a\u5de5\u5177\u6b04 \uff1a\u63d0\u4f9b\u5feb\u901f\u5b58\u53d6\u529f\u80fd\uff0c\u5982\u6a94\u6848\u7ba1\u7406\u548c\u7a0b\u5f0f\u78bc\u7247\u6bb5\u3002 \u5132\u5b58\u683c (Cell) \uff1a\u986f\u793a\u4e26\u57f7\u884c\u7a0b\u5f0f\u78bc\u7684\u5340\u57df\u3002 \u5132\u5b58\u683c\u5de5\u5177\u5217 \uff1a\u5132\u5b58\u683c\u5c08\u5c6c\u7684\u64cd\u4f5c\u6309\u9215\uff0c\u5982\u57f7\u884c\u3001\u79fb\u52d5\u3001\u8a2d\u5b9a\u7b49\u529f\u80fd\u3002 \u9023\u7dda\u72c0\u614b \uff1a\u986f\u793a\u76ee\u524d\u7684\u9023\u7dda\u72c0\u614b\u3002 \u7559\u8a00\u8207\u5171\u7528 \uff1a\u63d0\u4f9b\u7559\u8a00\u8207\u5171\u7528\u529f\u80fd\u7684\u9078\u9805\u3002 Note \u958b\u555f Notebook \u5f8c\uff0c\u7b2c\u4e00\u500b\u6b65\u9a5f\u662f\u9ede\u64ca \u9023\u7dda(Connect) \u4ee5\u914d\u7f6e\u5c08\u6848\u6240\u9700\u7684\u904b\u7b97\u8cc7\u6e90\u3002","title":"Colab Notebook\u74b0\u5883\u4ecb\u7d39"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#_1","text":"\u5728 Google Colaboratory\uff08Colab\uff09\u4e2d\uff0ccell \u662f Jupyter Notebook \u7684\u57fa\u672c\u55ae\u4f4d\uff0c\u6bcf\u500b cell \u90fd\u53ef\u4ee5\u5305\u542b\u7a0b\u5f0f\u78bc\u6216\u6587\u5b57\u3002Colab \u7684 Notebook \u4e3b\u8981\u7531\u5169\u5927\u5143\u7d20\u7d44\u6210\uff1aCode\uff08\u7a0b\u5f0f\u78bc\uff09cell \u548c Text\uff08\u6587\u5b57\uff09cell\u3002 Code\uff08\u7a0b\u5f0f\u78bc\uff09cell \uff1a Code cell \u7528\u4f86\u7de8\u5beb\u548c\u57f7\u884c Python \u7a0b\u5f0f\u78bc\u3002\u7576\u4f60\u5728\u9019\u500b cell \u4e2d\u8f38\u5165\u7a0b\u5f0f\u78bc\u4e26\u904b\u884c\u5f8c\uff0cColab \u6703\u5373\u6642\u57f7\u884c\u8a72\u7a0b\u5f0f\uff0c\u4e26\u5728\u4e0b\u65b9\u986f\u793a\u904b\u884c\u7d50\u679c\u3002\u9019\u8b93\u4f60\u80fd\u5920\u5373\u6642\u6e2c\u8a66\u7a0b\u5f0f\u78bc\uff0c\u65b9\u4fbf\u9032\u884c\u958b\u767c\u548c\u5b78\u7fd2\u3002 Note \u53ef\u4ee5\u76f4\u63a5\u5728\u7a0b\u5f0f\u5340\u584a\u4e2d\u8f38\u5165 Python \u7a0b\u5f0f\u78bc\uff0c\u4e26\u6309\u4e0b Shift + Enter \u9375\u57f7\u884c\u7a0b\u5f0f\uff0c\u53c8\u6216\u662f\u9ede\u9078\u6bcf\u500bcell\u5de6\u5074\u57f7\u884c\u6309\u9215\uff0c\u57f7\u884c\u4e26\u5373\u6642\u67e5\u770b\u904b\u884c\u7d50\u679c\u3002 Text\uff08\u6587\u5b57\uff09cell \uff1a Text cell \u7528\u4f86\u64b0\u5beb\u8aaa\u660e\u3001\u63cf\u8ff0\u6216\u6a19\u8a3b\uff0c\u652f\u63f4\u4f7f\u7528 Markdown \u8a9e\u6cd5\u9032\u884c\u6392\u7248\u3002\u9019\u8b93\u4f60\u80fd\u5920\u5728 Notebook \u4e2d\u6e05\u6670\u5730\u8a18\u9304\u7a0b\u5f0f\u908f\u8f2f\u3001\u6b65\u9a5f\u6216\u6559\u5b78\u5167\u5bb9\uff0c\u8b93\u7a0b\u5f0f\u548c\u8aaa\u660e\u53ef\u4ee5\u878d\u5408\u5728\u4e00\u8d77\uff0c\u4fbf\u65bc\u6559\u5b78\u548c\u5171\u4eab\u3002","title":"\u57fa\u672c\u5143\u7d20"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#google-drive","text":"\u7531\u65bc Colab \u662f Google \u7684\u670d\u52d9\uff0c\u56e0\u6b64\u5b83\u80fd\u5920\u65b9\u4fbf\u5730\u8207 Google \u96f2\u7aef\u786c\u789f\u6574\u5408\uff0c\u8b93\u4f60\u53ef\u4ee5\u8f15\u9b06\u5730\u5728 Colab \u4e2d\u65b0\u589e\u3001\u522a\u9664\u6216\u4fee\u6539\u6a94\u6848\u3002\u53ea\u9700\u7c21\u55ae\u5e7e\u6b65\uff0c\u5373\u53ef\u5c07 Colab \u8207 Google Drive \u9023\u52d5\uff1a \u639b\u63a5\u96f2\u7aef\u786c\u789f \uff1a\u9ede\u64ca Colab \u5de6\u5074\u7684\u6309\u9215\uff0c\u9078\u64c7\u9023\u52d5 Google \u96f2\u7aef\u786c\u789f\uff0c\u9019\u6a23\u5c31\u53ef\u4ee5\u958b\u59cb\u9032\u884c\u6a94\u6848\u7684\u5b58\u53d6\u3002 \u958b\u555f\u6b0a\u9650 \uff1a\u9ede\u64ca\u6309\u9215\u5f8c\uff0c\u6703\u5f48\u51fa\u4e00\u500b\u8981\u6c42\u6388\u6b0a\u7684\u8996\u7a97\uff0c\u9ede\u9078\u300c\u9023\u7dda\u81f3 Google \u96f2\u7aef\u786c\u789f\u300d\uff0c\u5141\u8a31 Colab \u5b58\u53d6\u4f60\u7684\u96f2\u7aef\u786c\u789f\u8cc7\u6599\u3002 \u78ba\u8a8d\u639b\u63a5\u6210\u529f \uff1a\u5728\u5de6\u5074\u6e05\u55ae\u4e2d\u770b\u5230 Google \u96f2\u7aef\u786c\u789f\u7684\u8cc7\u6599\u593e\u5f8c\uff0c\u8868\u793a Colab \u5df2\u7d93\u6210\u529f\u9023\u63a5\uff0c\u73fe\u5728\u53ef\u4ee5\u958b\u59cb\u5728 Notebook \u4e2d\u64cd\u4f5c\u96f2\u7aef\u786c\u789f\u7684\u6a94\u6848\u3002 \u6e2c\u8a66\u9023\u52d5 \uff1a\u4f60\u53ef\u4ee5\u5c07\u4ee5\u4e0b\u7a0b\u5f0f\u78bc\u8cbc\u5165 Colab\uff0c\u57f7\u884c\u5f8c\u6703\u5728\u96f2\u7aef\u786c\u789f\u7684 Colab Notebooks \u8cc7\u6599\u593e\u4e2d\u5275\u5efa\u4e00\u500b\u540d\u70ba test.txt \u7684\u6587\u4ef6\uff0c\u5167\u5bb9\u662f\u300cHello Google Drive!\u300d\uff1a","title":"\u9023\u52d5 Google Drive"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#_2","text":"Google Colaboratory \u662f\u4e00\u500b\u9069\u5408 Python \u521d\u5b78\u8005\u7684\u7406\u60f3\u5de5\u5177\uff0c\u7121\u9700\u914d\u7f6e\u672c\u5730\u958b\u767c\u74b0\u5883\uff0c\u7c21\u55ae\u6613\u7528\u4e14\u5177\u5099\u5f37\u5927\u7684\u96f2\u7aef\u8a08\u7b97\u8cc7\u6e90\u3002\u7121\u8ad6\u662f\u5b78\u7fd2 Python \u57fa\u790e\u3001\u9032\u884c\u6578\u64da\u5206\u6790\uff0c\u9084\u662f\u6df1\u5165\u63a2\u7d22\u6a5f\u5668\u5b78\u7fd2\u9818\u57df\uff0cColab \u90fd\u80fd\u6eff\u8db3\u4f60\u7684\u9700\u6c42\u3002\u6700\u91cd\u8981\u7684\u662f\uff0c\u5b83\u5b8c\u5168\u514d\u8cbb\uff0c\u8b93\u6bcf\u500b\u4eba\u90fd\u80fd\u8f15\u9b06\u5165\u9580 Python \u7de8\u7a0b\u8207 AI \u958b\u767c\u3002","title":"\u5c0f\u7d50"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.2Google Colab\u4ecb\u7d39/#_3","text":"\u514d\u8cbb\u96f2\u7aefJupyter Notebook\u5831\u4f60\u77e5","title":"\u5ef6\u4f38\u95b1\u8b80"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.3Anaconda\u4ecb\u7d39\u8207\u5b89\u88dd/","text":"1.3 Anaconda\u4ecb\u7d39\u8207\u5b89\u88dd\uff1a\u9069\u5408\u8cc7\u6599\u79d1\u5b78\u65b0\u624b \u8fd1\u5e7e\u5e74\u5c0d\u65bc\u5927\u6578\u64da\u5206\u6790\u7814\u7a76\u975e\u5e38\u706b\u7d05\uff0c\u76f8\u5c0d\u7684\u5206\u6790\u5e73\u53f0\u76f8\u5c0d\u7684\u91cd\u8981\u3002\u5728\u8cc7\u6599\u5206\u6790\u88e1\u9664\u4e86\u7528 R \u8a9e\u8a00\uff0c\u53ef\u4ee5\u4f7f\u7528 python \u4f5c\u70ba\u8cc7\u6599\u7684\u5206\u6790\u5de5\u5177\uff0c\u4eca\u5929\u5c31\u8981\u4f86\u4ecb\u7d39 Anaconda \uff0c\u63d0\u4f9b\u7684\u8edf\u9ad4\u5305\u7ba1\u7406\u670d\u52d9\u5e6b\u4f60\u7ba1\u7406\u6240\u6709 Python \u5957\u4ef6\uff0c\u6b64\u5916 Anaconda \u4e2d\u63d0\u4f9b Jupyter Notebook\uff0c\u5b83\u7684\u4ecb\u9762\u7c21\u55ae\u4e26\u4e14\u53ef\u4ee5\u9010\u884c\u57f7\u884c Python \u7a0b\u5f0f\u4e26\u4e14\u99ac\u4e0a\u89c0\u770b\u57f7\u884c\u7d50\u679c\uff0c\u6b64\u5916\u5728\u88e1\u9762\u4e5f\u80fd\u64b0\u5beb Markdown \u53ef\u4ee5\u4e00\u7de8\u64b0\u5beb\u7a0b\u5f0f\u4e00\u908a\u64b0\u5beb\u6d41\u7a0b\u8a3b\u89e3\u3002 \u6eab\u99a8\u63d0\u9192 \u5982\u679c\u4f60\u662fPython\u5c0f\u767d\uff0c\u5efa\u8b70\u53ef\u4ee5\u5148\u4f7f\u7528\u96f2\u7aefColab\u5b78\u7fd2\u57fa\u672c\u8a9e\u6cd5\u3002 \u5b89\u88dd Anaconda \u9032\u5165 Anaconda \u5b98\u7db2\u5f8c\u9078\u53d6\u4f60\u7684\u7cfb\u7d71\uff0c\u4e26\u4e0b\u8f09\u5b89\u88dd\u6a94\u3002\u82e5\u672c\u8eab\u6709\u5b89\u88dd Python \u7684\u670b\u53cb\u5efa\u8b70\u5148\u79fb\u9664\u539f\u5148\u6240\u5b89\u88dd\u7684 Python \u56e0\u70ba\u5b89\u88dd Anaconda \u6642\u6703\u81ea\u52d5\u53e6\u5916\u5e6b\u4f60\u5b89\u88dd Python\u3002\u56e0\u6b64\u70ba\u4e86\u907f\u514d\u885d\u7a81\u9084\u662f\u5efa\u8b70\u8b80\u8005\u5148\u79fb\u9664\u820a\u6709\u7248\u672c\u3002 \u9019\u908a\u4ee5 windows10 \u7cfb\u7d71\u505a\u793a\u7bc4\uff0c\u57fa\u672c\u4e0a\u4e00\u76f4\u9ede\u9078\u4e0b\u4e00\u6b65\u9078\u53d6\u9810\u8a2d\u5b89\u88dd\u5373\u53ef\u3002 \u5b89\u88dd\u5b8c\u6210\u5f8c\u53ef\u4ee5\u958b\u555f\u547d\u4ee4\u63d0\u793a\u5b57\u5143(CMD)\u6216\u662f\u5728 Windows \u641c\u5c0b\u6b04\u8f38\u5165 Anaconda Powershell Prompt \u958b\u555f Anaconda \u5c08\u5c6c\u7684\u7d42\u7aef\u6a5f\u3002\u958b\u555f\u5f8c\u8f38\u5165 python \u67e5\u770b\u662f\u5426\u6709\u6210\u529f\u5b89\u88dd\u597d Python \u4ee5\u53ca Anaconda\u3002\u82e5\u6709\u5b89\u88dd\u6210\u529f\u5247\u6703\u8ddf\u4e0b\u5716\u4e00\u6a23\u7684\u7d50\u679c\u3002\u9032\u5165\u9019\u500b\u756b\u9762\u5f8c\u4f7f\u7528\u8005\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u7d42\u7aef\u6a5f\u64b0\u5beb Python \u7a0b\u5f0f\u8a9e\u8a00\u4e26\u7acb\u5373\u57f7\u884c\u6210\u679c\u3002 \u4e00\u5207\u5c31\u7dd2\u5f8c\u5c31\u53ef\u4ee5\u555f\u52d5 Anaconda \u56c9\uff01","title":"1.3 Anaconda\u4ecb\u7d39\u8207\u5b89\u88dd "},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.3Anaconda\u4ecb\u7d39\u8207\u5b89\u88dd/#13-anaconda","text":"\u8fd1\u5e7e\u5e74\u5c0d\u65bc\u5927\u6578\u64da\u5206\u6790\u7814\u7a76\u975e\u5e38\u706b\u7d05\uff0c\u76f8\u5c0d\u7684\u5206\u6790\u5e73\u53f0\u76f8\u5c0d\u7684\u91cd\u8981\u3002\u5728\u8cc7\u6599\u5206\u6790\u88e1\u9664\u4e86\u7528 R \u8a9e\u8a00\uff0c\u53ef\u4ee5\u4f7f\u7528 python \u4f5c\u70ba\u8cc7\u6599\u7684\u5206\u6790\u5de5\u5177\uff0c\u4eca\u5929\u5c31\u8981\u4f86\u4ecb\u7d39 Anaconda \uff0c\u63d0\u4f9b\u7684\u8edf\u9ad4\u5305\u7ba1\u7406\u670d\u52d9\u5e6b\u4f60\u7ba1\u7406\u6240\u6709 Python \u5957\u4ef6\uff0c\u6b64\u5916 Anaconda \u4e2d\u63d0\u4f9b Jupyter Notebook\uff0c\u5b83\u7684\u4ecb\u9762\u7c21\u55ae\u4e26\u4e14\u53ef\u4ee5\u9010\u884c\u57f7\u884c Python \u7a0b\u5f0f\u4e26\u4e14\u99ac\u4e0a\u89c0\u770b\u57f7\u884c\u7d50\u679c\uff0c\u6b64\u5916\u5728\u88e1\u9762\u4e5f\u80fd\u64b0\u5beb Markdown \u53ef\u4ee5\u4e00\u7de8\u64b0\u5beb\u7a0b\u5f0f\u4e00\u908a\u64b0\u5beb\u6d41\u7a0b\u8a3b\u89e3\u3002 \u6eab\u99a8\u63d0\u9192 \u5982\u679c\u4f60\u662fPython\u5c0f\u767d\uff0c\u5efa\u8b70\u53ef\u4ee5\u5148\u4f7f\u7528\u96f2\u7aefColab\u5b78\u7fd2\u57fa\u672c\u8a9e\u6cd5\u3002","title":"1.3 Anaconda\u4ecb\u7d39\u8207\u5b89\u88dd\uff1a\u9069\u5408\u8cc7\u6599\u79d1\u5b78\u65b0\u624b"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.3Anaconda\u4ecb\u7d39\u8207\u5b89\u88dd/#anaconda","text":"\u9032\u5165 Anaconda \u5b98\u7db2\u5f8c\u9078\u53d6\u4f60\u7684\u7cfb\u7d71\uff0c\u4e26\u4e0b\u8f09\u5b89\u88dd\u6a94\u3002\u82e5\u672c\u8eab\u6709\u5b89\u88dd Python \u7684\u670b\u53cb\u5efa\u8b70\u5148\u79fb\u9664\u539f\u5148\u6240\u5b89\u88dd\u7684 Python \u56e0\u70ba\u5b89\u88dd Anaconda \u6642\u6703\u81ea\u52d5\u53e6\u5916\u5e6b\u4f60\u5b89\u88dd Python\u3002\u56e0\u6b64\u70ba\u4e86\u907f\u514d\u885d\u7a81\u9084\u662f\u5efa\u8b70\u8b80\u8005\u5148\u79fb\u9664\u820a\u6709\u7248\u672c\u3002 \u9019\u908a\u4ee5 windows10 \u7cfb\u7d71\u505a\u793a\u7bc4\uff0c\u57fa\u672c\u4e0a\u4e00\u76f4\u9ede\u9078\u4e0b\u4e00\u6b65\u9078\u53d6\u9810\u8a2d\u5b89\u88dd\u5373\u53ef\u3002 \u5b89\u88dd\u5b8c\u6210\u5f8c\u53ef\u4ee5\u958b\u555f\u547d\u4ee4\u63d0\u793a\u5b57\u5143(CMD)\u6216\u662f\u5728 Windows \u641c\u5c0b\u6b04\u8f38\u5165 Anaconda Powershell Prompt \u958b\u555f Anaconda \u5c08\u5c6c\u7684\u7d42\u7aef\u6a5f\u3002\u958b\u555f\u5f8c\u8f38\u5165 python \u67e5\u770b\u662f\u5426\u6709\u6210\u529f\u5b89\u88dd\u597d Python \u4ee5\u53ca Anaconda\u3002\u82e5\u6709\u5b89\u88dd\u6210\u529f\u5247\u6703\u8ddf\u4e0b\u5716\u4e00\u6a23\u7684\u7d50\u679c\u3002\u9032\u5165\u9019\u500b\u756b\u9762\u5f8c\u4f7f\u7528\u8005\u5c31\u53ef\u4ee5\u76f4\u63a5\u5728\u7d42\u7aef\u6a5f\u64b0\u5beb Python \u7a0b\u5f0f\u8a9e\u8a00\u4e26\u7acb\u5373\u57f7\u884c\u6210\u679c\u3002 \u4e00\u5207\u5c31\u7dd2\u5f8c\u5c31\u53ef\u4ee5\u555f\u52d5 Anaconda \u56c9\uff01","title":"\u5b89\u88dd Anaconda"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/","text":"1.4 Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd\uff1a\u9069\u5408\u8cc7\u6df1\u8001\u624b Anaconda \u548c Miniconda \u6709\u4ec0\u9ebc\u4e0d\u540c\uff1f Miniconda \u662f Anaconda \u7684\u7cbe\u7c21\u7248\u672c\uff0c\u540c\u6a23\u4e5f\u662f\u4e00\u500b\u958b\u6e90\u74b0\u5883\uff0c\u5169\u8005\u90fd\u662fconda\u7cfb\u7d71\u7684\u4e00\u90e8\u5206\u3002\u4e0d\u540c\u4e4b\u8655\u5728\u65bcAnaconda\u6703\u9810\u5148\u5b89\u88dd\u8a31\u591a\u5e38\u7528\u7684 Python\u5957\u4ef6\uff0c\u56e0\u6b64\u4f54\u7528\u8f03\u591a\u7684\u786c\u789f\u7a7a\u9593\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cMiniconda \u56e0\u70ba\u540d\u70ba \u201dMini\u201d\uff0c\u56e0\u6b64\u50c5\u5b89\u88dd\u904b\u884c\u6240\u9700\u7684\u57fa\u672c\u5957\u4ef6\uff0c\u5c0d\u65bc\u6709\u591a\u500b\u4e0d\u540c Python \u7248\u672c\u5171\u5b58\u7684\u60c5\u6cc1\uff0c\u53ef\u4ee5\u7bc0\u7701\u5927\u91cf\u7a7a\u9593\u3002 Note Miniconda\u53ef\u4ee5\u4f9d\u64da\u81ea\u5df1\u9700\u6c42\u5efa\u7acb\u81ea\u5df1\u7684Python\u74b0\u5883\uff0c\u60f3\u8981\u7684\u5957\u4ef6\u81ea\u884c\u5b89\u88dd \u6eab\u99a8\u63d0\u9192 \u5982\u679c\u4f60\u662f\u8cc7\u6599\u79d1\u5b78\u7684\u521d\u5b78\u8005\u5efa\u8b70\u53ef\u4ee5\u5148\u4f7f\u7528 Anaconda \u5efa\u7acb\u4f60\u7684 Python \u74b0\u5883\uff01 \u5b89\u88dd Miniconda \u4ee5 Windows \u70ba\u4f8b \u9032\u5165Miniconda \u4e0b\u8f09\u7db2\u9801 https://docs.conda.io/en/latest/miniconda.html \u5230 Latest Miniconda Installer Links Windows\u9078\u64c7 Minoconda3 Windows 64-bit \u4e0b\u8f09\u5f8c\u4f9d\u64da\u6307\u5f15\u9032\u884c Miniconda \u5b89\u88dd\u3002 \u5b89\u88dd\u5b8c\u7562\u5f8c\u5728 Windows \u641c\u5c0b\u6b04\u8f38\u5165 powershell \uff0c\u53ef\u4ee5\u627e\u5230 \u201cAnaconda Powershell Prompt (miniconda3)\u201d\uff0c\u958b\u555f\u9019\u500b App\u3002 \u5982\u679c\u6709\u770b\u5230\u547d\u4ee4\u5217\u63d0\u793a\u4e2d\u7684(base)\uff0c\u90a3\u8868\u793a\u5b89\u88dd\u6210\u529f\u3002\u6211\u5011\u53ef\u4ee5\u8f38\u5165 python \u2014version \u78ba\u8a8d Python \u7248\u672c\u3002 \u5229\u7528 conda \u5efa\u7acb\u65b0\u7684\u865b\u64ec\u74b0\u5883 conda \u5b89\u88dd\u5b8c\u6210\u5f8c\u6703\u81ea\u52d5\u5efa\u7acb\u4e00\u500b\u540d\u70ba base \u7684\u74b0\u5883\u3002\u5047\u8a2d\u6211\u60f3\u5efa\u7acb Python 3.11 \u7684\u74b0\u5883\uff0c\u53ef\u4ee5\u5728\u547d\u4ee4\u5217\u4e2d\u8f38\u5165 conda create -n test python = 3 .11 \u610f\u601d\u662f\u6211\u5011\u5c07\u7528conda\u9019\u500b\u6307\u4ee4\u5efa\u7acb\u4e00\u500b\u540d\u70batest(\u4f60\u4e5f\u53ef\u4ee5\u7528\u4efb\u4f55\u4f60\u559c\u6b61\u7684\u540d\u5b57)\u7684\u865b\u64ec\u74b0\u5883\uff0c\u4f7f\u7528python=3.11\u9019\u500b\u7248\u672c\u3002 \u5b8c\u6210\u5f8c\u4f60\u6703\u770b\u5230\uff1a \u610f\u601d\u662f\u4f60\u53ef\u4ee5\u7528 conda activate test \u6307\u4ee4\u555f\u52d5\u4f60\u525b\u525b\u5efa\u7acb\u7684\u865b\u64ec\u74b0\u5883\u3002 \u4f60\u53ef\u4ee5\u767c\u73fe\u5728\u8f38\u5165\u5b8c\u6307\u4ee4\u5f8c\uff0c\u524d\u9762\u7684(base)\u5df2\u7d93\u8b8a\u6210 test\uff0c\u9019\u8868\u793a\u4f60\u5df2\u7d93\u6210\u529f\u5207\u63db\u5230\u525b\u525b\u5efa\u7acb\u7684\u865b\u64ec\u74b0\u5883\u4e86\uff01 Conda \u6307\u5357 Conda \u6307\u4ee4\u96c6 // \u5efa\u7acb\u865b\u64ec\u74b0\u5883 conda create -n \u586b\u4f60\u60f3\u8981\u7684\u74b0\u5883\u540d\u7a31 python = \u6539\u6210\u4f60\u8981\u7684\u7248\u672c\u865f // \u9032\u5165\u865b\u64ec\u74b0\u5883\uff0c\u6b64\u6642\u53ef\u4ee5\u5b89\u88dd\u4f60\u9700\u8981\u7684\u5957\u4ef6 conda activate \u5275\u5efa\u7684\u74b0\u5883\u540d\u7a31 // \u9000\u51fa\u74b0\u5883\u56de\u5230b ase conda deactivate // \u67e5\u8a62\u7576\u524d\u672c\u6a5f\u5167\u6709\u90a3\u4e9b\u74b0\u5883 conda env list // \u522a\u9664\u74b0\u5883 c onda env remove \u2014 name \u6b32\u522a\u9664\u7684\u74b0\u5883\u540d\u7a31 // \u67e5\u770b\u7576\u524d\u74b0\u5883\u5b89\u88dd\u54ea\u4e9bpython\u5957\u4ef6 conda list // \u532f\u51fa\u74b0\u5883 conda env export > environment.yml \u5b89\u88dd\u5957\u4ef6 \u5728\u74b0\u5883\u5167\uff0c\u5c31\u53ef\u4ee5\u5b89\u88dd\u4f60\u9700\u8981\u7684\u5957\u4ef6: // \u4f8b\u5982\u5b89\u88dd\u8cc7\u6599\u8655\u7406\u5e38\u7528\u7684pandas conda install pandas // \u6216\u662f\u4f7f\u7528pip\u6307\u4ee4\u4e5f\u884c pip install pandas \u5b89\u88dd Jupyter Botebook Jupyter Notebook \u662f Ipython \u7684 Web \u64f4\u5145\u5957\u4ef6\uff0c\u80fd\u8b93\u4f7f\u7528\u8005\u5728\u700f\u89bd\u5668\u4e2d\u64b0\u5beb\u53ca\u57f7\u884c\u7a0b\u5f0f\uff0cJupyter Notebook \u9084\u652f\u63f4\u4e86Julia\u3001R\u3001\u4ee5\u53ca\u5176\u4ed6\u7a0b\u5f0f\u8a9e\u8a00\u7684notebook\u3002 pip install jupyterlab \u5b89\u88dd\u5b8c\u6210\u5f8c\u5148 cd \u9032\u5165\u4f60\u7684\u5c08\u6848\u76ee\u9304\uff0c\u63a5\u8457\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u555f\u52d5\u8207\u4f7f\u7528 Jupyter lab\u3002\u63a5\u8457\u6703\u81ea\u52d5\u958b\u555f\u700f\u89bd\u5668\u3002 jupyter lab \u4f7f\u7528 pip \u4f86\u7522\u751f requirements.txt \u7576\u4f60\u4f7f\u7528 Python \u958b\u767c\u61c9\u7528\u7a0b\u5f0f\u6642\uff0c\u901a\u5e38\u6703\u5b89\u88dd\u8a31\u591a\u5916\u90e8\u5957\u4ef6\u3002\u70ba\u4e86\u65b9\u4fbf\u5728\u5176\u4ed6\u74b0\u5883\u4e2d\u91cd\u73fe\u9019\u4e9b\u5957\u4ef6\u7684\u5b89\u88dd\u72c0\u614b\uff0c\u53ef\u4ee5\u900f\u904e pip freeze \u6307\u4ee4\u5c07\u76ee\u524d\u74b0\u5883\u4e2d\u7684\u6240\u6709\u5957\u4ef6\u53ca\u5176\u7248\u672c\u8a18\u9304\u5728\u4e00\u500b requirements.txt \u6a94\u6848\u4e2d\u3002\u555f\u52d5\u865b\u64ec\u74b0\u5883\u5f8c\uff0c\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4f86\u751f\u6210 requirements.txt \u6a94\u6848\uff1a pip freeze > requirements.txt \u9019\u500b\u6307\u4ee4\u6703\u5c07\u76ee\u524d\u74b0\u5883\u4e2d\u7684\u6240\u6709\u5957\u4ef6\uff08\u4ee5\u53ca\u5b83\u5011\u7684\u7248\u672c\u865f\uff09\u5217\u51fa\u4f86\uff0c\u4e26\u5132\u5b58\u5230\u4e00\u500b\u540d\u70ba requirements.txt \u7684\u6a94\u6848\u4e2d\u3002 \u5728\u5176\u4ed6\u74b0\u5883\u4e2d\u5b89\u88dd\u76f8\u540c\u7684\u5957\u4ef6 \u7576\u4f60\u60f3\u8981\u5728\u5176\u4ed6\u96fb\u8166\u6216\u74b0\u5883\u4e2d\u5b89\u88dd\u9019\u4e9b\u5957\u4ef6\u6642\uff0c\u4f60\u53ea\u9700\u8981\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4f86\u6839\u64da requirements.txt \u5b89\u88dd\u6240\u6709\u7684\u5957\u4ef6\uff1a pip install -r requirements.txt \u9019\u6703\u6839\u64da requirements.txt \u4e2d\u5217\u51fa\u7684\u5957\u4ef6\u53ca\u7248\u672c\u865f\uff0c\u9010\u4e00\u5b89\u88dd\u5230\u7576\u524d\u7684 Python \u74b0\u5883\u4e2d\u3002","title":"1.4 Anaconda\u4ecb\u7d39\u8207\u5b89\u88dd "},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#14-miniconda","text":"","title":"1.4 Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd\uff1a\u9069\u5408\u8cc7\u6df1\u8001\u624b"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#anaconda-miniconda","text":"Miniconda \u662f Anaconda \u7684\u7cbe\u7c21\u7248\u672c\uff0c\u540c\u6a23\u4e5f\u662f\u4e00\u500b\u958b\u6e90\u74b0\u5883\uff0c\u5169\u8005\u90fd\u662fconda\u7cfb\u7d71\u7684\u4e00\u90e8\u5206\u3002\u4e0d\u540c\u4e4b\u8655\u5728\u65bcAnaconda\u6703\u9810\u5148\u5b89\u88dd\u8a31\u591a\u5e38\u7528\u7684 Python\u5957\u4ef6\uff0c\u56e0\u6b64\u4f54\u7528\u8f03\u591a\u7684\u786c\u789f\u7a7a\u9593\u3002\u76f8\u6bd4\u4e4b\u4e0b\uff0cMiniconda \u56e0\u70ba\u540d\u70ba \u201dMini\u201d\uff0c\u56e0\u6b64\u50c5\u5b89\u88dd\u904b\u884c\u6240\u9700\u7684\u57fa\u672c\u5957\u4ef6\uff0c\u5c0d\u65bc\u6709\u591a\u500b\u4e0d\u540c Python \u7248\u672c\u5171\u5b58\u7684\u60c5\u6cc1\uff0c\u53ef\u4ee5\u7bc0\u7701\u5927\u91cf\u7a7a\u9593\u3002 Note Miniconda\u53ef\u4ee5\u4f9d\u64da\u81ea\u5df1\u9700\u6c42\u5efa\u7acb\u81ea\u5df1\u7684Python\u74b0\u5883\uff0c\u60f3\u8981\u7684\u5957\u4ef6\u81ea\u884c\u5b89\u88dd \u6eab\u99a8\u63d0\u9192 \u5982\u679c\u4f60\u662f\u8cc7\u6599\u79d1\u5b78\u7684\u521d\u5b78\u8005\u5efa\u8b70\u53ef\u4ee5\u5148\u4f7f\u7528 Anaconda \u5efa\u7acb\u4f60\u7684 Python \u74b0\u5883\uff01","title":"Anaconda \u548c Miniconda \u6709\u4ec0\u9ebc\u4e0d\u540c\uff1f"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#miniconda","text":"","title":"\u5b89\u88dd Miniconda"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#windows","text":"\u9032\u5165Miniconda \u4e0b\u8f09\u7db2\u9801 https://docs.conda.io/en/latest/miniconda.html \u5230 Latest Miniconda Installer Links Windows\u9078\u64c7 Minoconda3 Windows 64-bit \u4e0b\u8f09\u5f8c\u4f9d\u64da\u6307\u5f15\u9032\u884c Miniconda \u5b89\u88dd\u3002 \u5b89\u88dd\u5b8c\u7562\u5f8c\u5728 Windows \u641c\u5c0b\u6b04\u8f38\u5165 powershell \uff0c\u53ef\u4ee5\u627e\u5230 \u201cAnaconda Powershell Prompt (miniconda3)\u201d\uff0c\u958b\u555f\u9019\u500b App\u3002 \u5982\u679c\u6709\u770b\u5230\u547d\u4ee4\u5217\u63d0\u793a\u4e2d\u7684(base)\uff0c\u90a3\u8868\u793a\u5b89\u88dd\u6210\u529f\u3002\u6211\u5011\u53ef\u4ee5\u8f38\u5165 python \u2014version \u78ba\u8a8d Python \u7248\u672c\u3002 \u5229\u7528 conda \u5efa\u7acb\u65b0\u7684\u865b\u64ec\u74b0\u5883 conda \u5b89\u88dd\u5b8c\u6210\u5f8c\u6703\u81ea\u52d5\u5efa\u7acb\u4e00\u500b\u540d\u70ba base \u7684\u74b0\u5883\u3002\u5047\u8a2d\u6211\u60f3\u5efa\u7acb Python 3.11 \u7684\u74b0\u5883\uff0c\u53ef\u4ee5\u5728\u547d\u4ee4\u5217\u4e2d\u8f38\u5165 conda create -n test python = 3 .11 \u610f\u601d\u662f\u6211\u5011\u5c07\u7528conda\u9019\u500b\u6307\u4ee4\u5efa\u7acb\u4e00\u500b\u540d\u70batest(\u4f60\u4e5f\u53ef\u4ee5\u7528\u4efb\u4f55\u4f60\u559c\u6b61\u7684\u540d\u5b57)\u7684\u865b\u64ec\u74b0\u5883\uff0c\u4f7f\u7528python=3.11\u9019\u500b\u7248\u672c\u3002 \u5b8c\u6210\u5f8c\u4f60\u6703\u770b\u5230\uff1a \u610f\u601d\u662f\u4f60\u53ef\u4ee5\u7528 conda activate test \u6307\u4ee4\u555f\u52d5\u4f60\u525b\u525b\u5efa\u7acb\u7684\u865b\u64ec\u74b0\u5883\u3002 \u4f60\u53ef\u4ee5\u767c\u73fe\u5728\u8f38\u5165\u5b8c\u6307\u4ee4\u5f8c\uff0c\u524d\u9762\u7684(base)\u5df2\u7d93\u8b8a\u6210 test\uff0c\u9019\u8868\u793a\u4f60\u5df2\u7d93\u6210\u529f\u5207\u63db\u5230\u525b\u525b\u5efa\u7acb\u7684\u865b\u64ec\u74b0\u5883\u4e86\uff01","title":"\u4ee5 Windows \u70ba\u4f8b"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#conda","text":"","title":"Conda \u6307\u5357"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#conda_1","text":"// \u5efa\u7acb\u865b\u64ec\u74b0\u5883 conda create -n \u586b\u4f60\u60f3\u8981\u7684\u74b0\u5883\u540d\u7a31 python = \u6539\u6210\u4f60\u8981\u7684\u7248\u672c\u865f // \u9032\u5165\u865b\u64ec\u74b0\u5883\uff0c\u6b64\u6642\u53ef\u4ee5\u5b89\u88dd\u4f60\u9700\u8981\u7684\u5957\u4ef6 conda activate \u5275\u5efa\u7684\u74b0\u5883\u540d\u7a31 // \u9000\u51fa\u74b0\u5883\u56de\u5230b ase conda deactivate // \u67e5\u8a62\u7576\u524d\u672c\u6a5f\u5167\u6709\u90a3\u4e9b\u74b0\u5883 conda env list // \u522a\u9664\u74b0\u5883 c onda env remove \u2014 name \u6b32\u522a\u9664\u7684\u74b0\u5883\u540d\u7a31 // \u67e5\u770b\u7576\u524d\u74b0\u5883\u5b89\u88dd\u54ea\u4e9bpython\u5957\u4ef6 conda list // \u532f\u51fa\u74b0\u5883 conda env export > environment.yml","title":"Conda \u6307\u4ee4\u96c6"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#_1","text":"\u5728\u74b0\u5883\u5167\uff0c\u5c31\u53ef\u4ee5\u5b89\u88dd\u4f60\u9700\u8981\u7684\u5957\u4ef6: // \u4f8b\u5982\u5b89\u88dd\u8cc7\u6599\u8655\u7406\u5e38\u7528\u7684pandas conda install pandas // \u6216\u662f\u4f7f\u7528pip\u6307\u4ee4\u4e5f\u884c pip install pandas","title":"\u5b89\u88dd\u5957\u4ef6"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#jupyter-botebook","text":"Jupyter Notebook \u662f Ipython \u7684 Web \u64f4\u5145\u5957\u4ef6\uff0c\u80fd\u8b93\u4f7f\u7528\u8005\u5728\u700f\u89bd\u5668\u4e2d\u64b0\u5beb\u53ca\u57f7\u884c\u7a0b\u5f0f\uff0cJupyter Notebook \u9084\u652f\u63f4\u4e86Julia\u3001R\u3001\u4ee5\u53ca\u5176\u4ed6\u7a0b\u5f0f\u8a9e\u8a00\u7684notebook\u3002 pip install jupyterlab \u5b89\u88dd\u5b8c\u6210\u5f8c\u5148 cd \u9032\u5165\u4f60\u7684\u5c08\u6848\u76ee\u9304\uff0c\u63a5\u8457\u4f7f\u7528\u4ee5\u4e0b\u6307\u4ee4\u555f\u52d5\u8207\u4f7f\u7528 Jupyter lab\u3002\u63a5\u8457\u6703\u81ea\u52d5\u958b\u555f\u700f\u89bd\u5668\u3002 jupyter lab","title":"\u5b89\u88dd Jupyter Botebook"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#pip-requirementstxt","text":"\u7576\u4f60\u4f7f\u7528 Python \u958b\u767c\u61c9\u7528\u7a0b\u5f0f\u6642\uff0c\u901a\u5e38\u6703\u5b89\u88dd\u8a31\u591a\u5916\u90e8\u5957\u4ef6\u3002\u70ba\u4e86\u65b9\u4fbf\u5728\u5176\u4ed6\u74b0\u5883\u4e2d\u91cd\u73fe\u9019\u4e9b\u5957\u4ef6\u7684\u5b89\u88dd\u72c0\u614b\uff0c\u53ef\u4ee5\u900f\u904e pip freeze \u6307\u4ee4\u5c07\u76ee\u524d\u74b0\u5883\u4e2d\u7684\u6240\u6709\u5957\u4ef6\u53ca\u5176\u7248\u672c\u8a18\u9304\u5728\u4e00\u500b requirements.txt \u6a94\u6848\u4e2d\u3002\u555f\u52d5\u865b\u64ec\u74b0\u5883\u5f8c\uff0c\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4f86\u751f\u6210 requirements.txt \u6a94\u6848\uff1a pip freeze > requirements.txt \u9019\u500b\u6307\u4ee4\u6703\u5c07\u76ee\u524d\u74b0\u5883\u4e2d\u7684\u6240\u6709\u5957\u4ef6\uff08\u4ee5\u53ca\u5b83\u5011\u7684\u7248\u672c\u865f\uff09\u5217\u51fa\u4f86\uff0c\u4e26\u5132\u5b58\u5230\u4e00\u500b\u540d\u70ba requirements.txt \u7684\u6a94\u6848\u4e2d\u3002","title":"\u4f7f\u7528 pip \u4f86\u7522\u751f requirements.txt"},{"location":"1.\u74b0\u5883\u8a2d\u5b9a/1.4Miniconda\u4ecb\u7d39\u8207\u5b89\u88dd/#_2","text":"\u7576\u4f60\u60f3\u8981\u5728\u5176\u4ed6\u96fb\u8166\u6216\u74b0\u5883\u4e2d\u5b89\u88dd\u9019\u4e9b\u5957\u4ef6\u6642\uff0c\u4f60\u53ea\u9700\u8981\u57f7\u884c\u4ee5\u4e0b\u6307\u4ee4\u4f86\u6839\u64da requirements.txt \u5b89\u88dd\u6240\u6709\u7684\u5957\u4ef6\uff1a pip install -r requirements.txt \u9019\u6703\u6839\u64da requirements.txt \u4e2d\u5217\u51fa\u7684\u5957\u4ef6\u53ca\u7248\u672c\u865f\uff0c\u9010\u4e00\u5b89\u88dd\u5230\u7576\u524d\u7684 Python \u74b0\u5883\u4e2d\u3002","title":"\u5728\u5176\u4ed6\u74b0\u5883\u4e2d\u5b89\u88dd\u76f8\u540c\u7684\u5957\u4ef6"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.1\u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97/","text":"2.1 \u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97 \u8b8a\u6578\u7684\u5b9a\u7fa9\u8207\u8ce6\u503c \u8b8a\u6578\u662f\u7528\u4f86\u5132\u5b58\u6578\u64da\u7684\u5bb9\u5668\u3002\u5728 Python \u4e2d\uff0c\u4f60\u53ef\u4ee5\u8f15\u9b06\u5730\u5c07\u4e0d\u540c\u7684\u6578\u503c\u8ce6\u503c\u7d66\u8b8a\u6578\uff0c\u7121\u9700\u4e8b\u5148\u5ba3\u544a\u5176\u8cc7\u6599\u578b\u5225\u3002\u8b8a\u6578\u7684\u547d\u540d\u61c9\u8a72\u5177\u6709\u63cf\u8ff0\u6027\uff0c\u8b93\u7a0b\u5f0f\u78bc\u66f4\u5bb9\u6613\u95b1\u8b80\u3002 \u55ae\u4e00\u8b8a\u6578\u8ce6\u503c \u4f60\u53ef\u4ee5\u900f\u904e = \u5c07\u6578\u503c\u8ce6\u503c\u7d66\u8b8a\u6578\uff1a a = 1 b = c = 5 \u9019\u6bb5\u7a0b\u5f0f\u78bc\u4e2d\uff0c\u8b8a\u6578 a \u88ab\u8ce6\u503c\u70ba 1\uff0c\u800c\u8b8a\u6578 b \u548c c \u540c\u6642\u88ab\u8ce6\u503c\u70ba 5\u3002 \u591a\u91cd\u8ce6\u503c Python \u4e5f\u652f\u63f4\u4e00\u6b21\u5c07\u591a\u500b\u503c\u5206\u5225\u8ce6\u503c\u7d66\u591a\u500b\u8b8a\u6578\uff1a a , b , c = 1 , 2 , \"John\" print ( a ) # 1 print ( b ) # 2 print ( c ) # John \u9019\u6a23\u7684\u591a\u91cd\u8ce6\u503c\u65b9\u5f0f\u53ef\u4ee5\u7c21\u5316\u7a0b\u5f0f\u78bc\uff0c\u4e26\u4e14\u63d0\u9ad8\u53ef\u8b80\u6027\u3002 \u8cc7\u6599\u578b\u5225 (Data Types) Python \u662f\u52d5\u614b\u578b\u5225\u8a9e\u8a00\uff0c\u56e0\u6b64\u8b8a\u6578\u7684\u8cc7\u6599\u578b\u5225\u6703\u6839\u64da\u6240\u8ce6\u503c\u7684\u5167\u5bb9\u800c\u81ea\u52d5\u6c7a\u5b9a\u3002\u4ee5\u4e0b\u662f\u5e7e\u500b\u5e38\u898b\u7684\u8cc7\u6599\u578b\u5225\uff1a \u6574\u6578\u578b\u5225 (int) \u6d6e\u9ede\u6578\u578b\u5225 (float) \u5b57\u4e32\u578b\u5225 (str) \u5e03\u6797\u503c\uff08bool\uff09 counter = 100 # \u6574\u6578 miles = 1000.0 # \u6d6e\u9ede\u6578 name = \"John\" # \u5b57\u4e32 print ( counter ) # 100 print ( miles ) # 1000.0 print ( name ) # John \u5728\u9019\u500b\u7bc4\u4f8b\u4e2d\uff0c\u8b8a\u6578 counter \u662f\u6574\u6578\uff0cmiles \u662f\u6d6e\u9ede\u6578\uff0c\u800c name \u662f\u5b57\u4e32\u3002Python \u6703\u6839\u64da\u8ce6\u503c\u7684\u5167\u5bb9\u81ea\u52d5\u9078\u64c7\u9069\u5408\u7684\u8cc7\u6599\u578b\u5225\u3002 \u95dc\u9375\u5b57 (Keywords) \u95dc\u9375\u5b57\u662f Python \u4fdd\u7559\u7528\u4f86\u8868\u793a\u7279\u5b9a\u529f\u80fd\u7684\u8a5e\u5f59\uff0c\u9019\u4e9b\u8a5e\u4e0d\u80fd\u7528\u4f5c\u8b8a\u6578\u540d\u7a31\u3002\u50cf\u662f if\u3001else\u3001for \u7b49\u90fd\u662f Python \u7684\u4fdd\u7559\u5b57\u3002\u4f7f\u7528\u4fdd\u7559\u5b57\u4f5c\u70ba\u8b8a\u6578\u540d\u7a31\u6703\u5c0e\u81f4\u8a9e\u6cd5\u932f\u8aa4\u3002 \u95dc\u9375\u5b57 \u529f\u80fd if \u7528\u65bc\u689d\u4ef6\u5224\u65b7\uff0c\u57f7\u884c\u7b26\u5408\u689d\u4ef6\u7684\u4ee3\u78bc\u584a else \u8207 if \u914d\u5408\uff0c\u8655\u7406\u689d\u4ef6\u4e0d\u7b26\u5408\u7684\u60c5\u6cc1 for \u7528\u65bc\u8ff4\u5708\uff0c\u904d\u6b77\u53ef\u8fed\u4ee3\u5c0d\u8c61\u7684\u5143\u7d20 while \u7528\u65bc\u689d\u4ef6\u8ff4\u5708\uff0c\u7576\u689d\u4ef6\u6210\u7acb\u6642\u53cd\u8986\u57f7\u884c def \u7528\u65bc\u5b9a\u7fa9\u51fd\u5f0f return \u7528\u65bc\u5f9e\u51fd\u5f0f\u4e2d\u8fd4\u56de\u503c class \u7528\u65bc\u5b9a\u7fa9\u985e\u5225 import \u7528\u65bc\u532f\u5165\u6a21\u7d44\u6216\u5176\u4ed6\u7a0b\u5f0f\u5eab try \u7528\u65bc\u6355\u6349\u7570\u5e38\u4e26\u8655\u7406\u932f\u8aa4 except \u8207 try \u914d\u5408\uff0c\u8655\u7406\u7570\u5e38\u7684\u4ee3\u78bc\u584a \u7b97\u8853\u904b\u7b97\u7b26 (Arithmetic Operators) Python \u63d0\u4f9b\u4e86\u57fa\u672c\u7684\u7b97\u8853\u904b\u7b97\u7b26\u4f86\u9032\u884c\u6578\u5b78\u904b\u7b97\uff0c\u4ee5\u4e0b\u662f\u5e7e\u500b\u5e38\u898b\u7684\u904b\u7b97\u7b26\u53ca\u5176\u7528\u6cd5\uff1a + : \u52a0\u6cd5 - : \u6e1b\u6cd5 / : \u9664\u6cd5 % : \u53d6\u9918\u6578 * : \u4e58\u6cd5 // : \u53d6\u6574\u9664 ** : \u6307\u6578 add = 1 + 1 # 2 sub = 1 - 1 # 0 div = 4 / 2 # 2.0 mod = 4 % 3 # 1 mul = 2 * 3 # 6 f_div = 5 // 2 # 2 power = 2 ** 3 # 8 \u9019\u4e9b\u904b\u7b97\u7b26\u53ef\u4ee5\u5e6b\u52a9\u6211\u5011\u5728\u7a0b\u5f0f\u4e2d\u8655\u7406\u5404\u7a2e\u6578\u5b78\u904b\u7b97\uff0c\u7279\u5225\u662f // \u662f\u9032\u884c\u6574\u6578\u9664\u6cd5\uff0c\u800c ** \u7528\u4f86\u9032\u884c\u6b21\u65b9\u904b\u7b97\u3002 \u6bd4\u8f03\u904b\u7b97\u7b26 (Comparison Operators) \u6bd4\u8f03\u904b\u7b97\u7b26\u7528\u4f86\u6bd4\u8f03\u5169\u500b\u503c\uff0c\u904b\u7b97\u7d50\u679c\u70ba\u5e03\u6797\u503c (True \u6216 False)\u3002 \u5e38\u898b\u7684\u6bd4\u8f03\u904b\u7b97\u7b26\u5305\u62ec\uff1a == : \u7b49\u65bc != : \u4e0d\u7b49\u65bc > : \u5927\u65bc < : \u5c0f\u65bc >= : \u5927\u65bc\u7b49\u65bc <= : \u5c0f\u65bc\u7b49\u65bc a , b = 10 , 20 print ( a == b ) # False print ( a != b ) # True print ( a < b ) # True print ( a > b ) # False print ( a <= b ) # True print ( a >= b ) # False \u900f\u904e\u9019\u4e9b\u6bd4\u8f03\u904b\u7b97\u7b26\uff0c\u53ef\u4ee5\u5224\u65b7\u5169\u500b\u503c\u4e4b\u9593\u7684\u95dc\u4fc2\uff0c\u9019\u5728\u63a7\u5236\u6d41\u7a0b\u4e2d\u975e\u5e38\u6709\u7528\u3002","title":"2.1 \u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.1\u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97/#21","text":"","title":"2.1 \u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.1\u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97/#_1","text":"\u8b8a\u6578\u662f\u7528\u4f86\u5132\u5b58\u6578\u64da\u7684\u5bb9\u5668\u3002\u5728 Python \u4e2d\uff0c\u4f60\u53ef\u4ee5\u8f15\u9b06\u5730\u5c07\u4e0d\u540c\u7684\u6578\u503c\u8ce6\u503c\u7d66\u8b8a\u6578\uff0c\u7121\u9700\u4e8b\u5148\u5ba3\u544a\u5176\u8cc7\u6599\u578b\u5225\u3002\u8b8a\u6578\u7684\u547d\u540d\u61c9\u8a72\u5177\u6709\u63cf\u8ff0\u6027\uff0c\u8b93\u7a0b\u5f0f\u78bc\u66f4\u5bb9\u6613\u95b1\u8b80\u3002","title":"\u8b8a\u6578\u7684\u5b9a\u7fa9\u8207\u8ce6\u503c"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.1\u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97/#_2","text":"\u4f60\u53ef\u4ee5\u900f\u904e = \u5c07\u6578\u503c\u8ce6\u503c\u7d66\u8b8a\u6578\uff1a a = 1 b = c = 5 \u9019\u6bb5\u7a0b\u5f0f\u78bc\u4e2d\uff0c\u8b8a\u6578 a \u88ab\u8ce6\u503c\u70ba 1\uff0c\u800c\u8b8a\u6578 b \u548c c \u540c\u6642\u88ab\u8ce6\u503c\u70ba 5\u3002","title":"\u55ae\u4e00\u8b8a\u6578\u8ce6\u503c"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.1\u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97/#_3","text":"Python \u4e5f\u652f\u63f4\u4e00\u6b21\u5c07\u591a\u500b\u503c\u5206\u5225\u8ce6\u503c\u7d66\u591a\u500b\u8b8a\u6578\uff1a a , b , c = 1 , 2 , \"John\" print ( a ) # 1 print ( b ) # 2 print ( c ) # John \u9019\u6a23\u7684\u591a\u91cd\u8ce6\u503c\u65b9\u5f0f\u53ef\u4ee5\u7c21\u5316\u7a0b\u5f0f\u78bc\uff0c\u4e26\u4e14\u63d0\u9ad8\u53ef\u8b80\u6027\u3002","title":"\u591a\u91cd\u8ce6\u503c"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.1\u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97/#data-types","text":"Python \u662f\u52d5\u614b\u578b\u5225\u8a9e\u8a00\uff0c\u56e0\u6b64\u8b8a\u6578\u7684\u8cc7\u6599\u578b\u5225\u6703\u6839\u64da\u6240\u8ce6\u503c\u7684\u5167\u5bb9\u800c\u81ea\u52d5\u6c7a\u5b9a\u3002\u4ee5\u4e0b\u662f\u5e7e\u500b\u5e38\u898b\u7684\u8cc7\u6599\u578b\u5225\uff1a \u6574\u6578\u578b\u5225 (int) \u6d6e\u9ede\u6578\u578b\u5225 (float) \u5b57\u4e32\u578b\u5225 (str) \u5e03\u6797\u503c\uff08bool\uff09 counter = 100 # \u6574\u6578 miles = 1000.0 # \u6d6e\u9ede\u6578 name = \"John\" # \u5b57\u4e32 print ( counter ) # 100 print ( miles ) # 1000.0 print ( name ) # John \u5728\u9019\u500b\u7bc4\u4f8b\u4e2d\uff0c\u8b8a\u6578 counter \u662f\u6574\u6578\uff0cmiles \u662f\u6d6e\u9ede\u6578\uff0c\u800c name \u662f\u5b57\u4e32\u3002Python \u6703\u6839\u64da\u8ce6\u503c\u7684\u5167\u5bb9\u81ea\u52d5\u9078\u64c7\u9069\u5408\u7684\u8cc7\u6599\u578b\u5225\u3002","title":"\u8cc7\u6599\u578b\u5225 (Data Types)"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.1\u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97/#keywords","text":"\u95dc\u9375\u5b57\u662f Python \u4fdd\u7559\u7528\u4f86\u8868\u793a\u7279\u5b9a\u529f\u80fd\u7684\u8a5e\u5f59\uff0c\u9019\u4e9b\u8a5e\u4e0d\u80fd\u7528\u4f5c\u8b8a\u6578\u540d\u7a31\u3002\u50cf\u662f if\u3001else\u3001for \u7b49\u90fd\u662f Python \u7684\u4fdd\u7559\u5b57\u3002\u4f7f\u7528\u4fdd\u7559\u5b57\u4f5c\u70ba\u8b8a\u6578\u540d\u7a31\u6703\u5c0e\u81f4\u8a9e\u6cd5\u932f\u8aa4\u3002 \u95dc\u9375\u5b57 \u529f\u80fd if \u7528\u65bc\u689d\u4ef6\u5224\u65b7\uff0c\u57f7\u884c\u7b26\u5408\u689d\u4ef6\u7684\u4ee3\u78bc\u584a else \u8207 if \u914d\u5408\uff0c\u8655\u7406\u689d\u4ef6\u4e0d\u7b26\u5408\u7684\u60c5\u6cc1 for \u7528\u65bc\u8ff4\u5708\uff0c\u904d\u6b77\u53ef\u8fed\u4ee3\u5c0d\u8c61\u7684\u5143\u7d20 while \u7528\u65bc\u689d\u4ef6\u8ff4\u5708\uff0c\u7576\u689d\u4ef6\u6210\u7acb\u6642\u53cd\u8986\u57f7\u884c def \u7528\u65bc\u5b9a\u7fa9\u51fd\u5f0f return \u7528\u65bc\u5f9e\u51fd\u5f0f\u4e2d\u8fd4\u56de\u503c class \u7528\u65bc\u5b9a\u7fa9\u985e\u5225 import \u7528\u65bc\u532f\u5165\u6a21\u7d44\u6216\u5176\u4ed6\u7a0b\u5f0f\u5eab try \u7528\u65bc\u6355\u6349\u7570\u5e38\u4e26\u8655\u7406\u932f\u8aa4 except \u8207 try \u914d\u5408\uff0c\u8655\u7406\u7570\u5e38\u7684\u4ee3\u78bc\u584a","title":"\u95dc\u9375\u5b57 (Keywords)"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.1\u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97/#arithmetic-operators","text":"Python \u63d0\u4f9b\u4e86\u57fa\u672c\u7684\u7b97\u8853\u904b\u7b97\u7b26\u4f86\u9032\u884c\u6578\u5b78\u904b\u7b97\uff0c\u4ee5\u4e0b\u662f\u5e7e\u500b\u5e38\u898b\u7684\u904b\u7b97\u7b26\u53ca\u5176\u7528\u6cd5\uff1a + : \u52a0\u6cd5 - : \u6e1b\u6cd5 / : \u9664\u6cd5 % : \u53d6\u9918\u6578 * : \u4e58\u6cd5 // : \u53d6\u6574\u9664 ** : \u6307\u6578 add = 1 + 1 # 2 sub = 1 - 1 # 0 div = 4 / 2 # 2.0 mod = 4 % 3 # 1 mul = 2 * 3 # 6 f_div = 5 // 2 # 2 power = 2 ** 3 # 8 \u9019\u4e9b\u904b\u7b97\u7b26\u53ef\u4ee5\u5e6b\u52a9\u6211\u5011\u5728\u7a0b\u5f0f\u4e2d\u8655\u7406\u5404\u7a2e\u6578\u5b78\u904b\u7b97\uff0c\u7279\u5225\u662f // \u662f\u9032\u884c\u6574\u6578\u9664\u6cd5\uff0c\u800c ** \u7528\u4f86\u9032\u884c\u6b21\u65b9\u904b\u7b97\u3002","title":"\u7b97\u8853\u904b\u7b97\u7b26 (Arithmetic Operators)"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.1\u8b8a\u6578\u8207\u57fa\u672c\u904b\u7b97/#comparison-operators","text":"\u6bd4\u8f03\u904b\u7b97\u7b26\u7528\u4f86\u6bd4\u8f03\u5169\u500b\u503c\uff0c\u904b\u7b97\u7d50\u679c\u70ba\u5e03\u6797\u503c (True \u6216 False)\u3002 \u5e38\u898b\u7684\u6bd4\u8f03\u904b\u7b97\u7b26\u5305\u62ec\uff1a == : \u7b49\u65bc != : \u4e0d\u7b49\u65bc > : \u5927\u65bc < : \u5c0f\u65bc >= : \u5927\u65bc\u7b49\u65bc <= : \u5c0f\u65bc\u7b49\u65bc a , b = 10 , 20 print ( a == b ) # False print ( a != b ) # True print ( a < b ) # True print ( a > b ) # False print ( a <= b ) # True print ( a >= b ) # False \u900f\u904e\u9019\u4e9b\u6bd4\u8f03\u904b\u7b97\u7b26\uff0c\u53ef\u4ee5\u5224\u65b7\u5169\u500b\u503c\u4e4b\u9593\u7684\u95dc\u4fc2\uff0c\u9019\u5728\u63a7\u5236\u6d41\u7a0b\u4e2d\u975e\u5e38\u6709\u7528\u3002","title":"\u6bd4\u8f03\u904b\u7b97\u7b26 (Comparison Operators)"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/","text":"2.2 \u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db Numbers \u6574\u6578 \u6d6e\u9ede \u6578\u8907\u6578 # Output: <class 'int'> print ( type ( 5 )) # Output: <class 'float'> print ( type ( 5.0 )) # Output: <class 'complex'> c = 5 + 3 j print ( type ( c )) Lists # empty list my_list = [] # list of integers my_list = [ 1 , 2 , 3 ] # list with mixed datatypes my_list = [ 1 , \"Hello\" , 2.3 ] # nested list my_list = [ \"mouse\" , [ 8 , 4 , 6 ]] List - index my_list = [ 'h' , 'e' , 'l' , 'l' , 'o' ] print ( my_list [ 0 ]) # Output: h print ( my_list [ 1 ]) # Output: e # my_list[5.0] # Error! Only integer can be used for indexing n_list = [ \"Happy\" , [ 2 , 0 , 1 , 8 ]] # Nested List print ( n_list [ 1 ][ 3 ]) # Output: 8 List - negative indexing my_list = [ 'p' , 'r' , 'o' , 'b' , 'e' ] print ( my_list [ - 1 ]) # Output: e print ( my_list [ - 5 ]) # Output: p List - slicing(\u5207\u7247) my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] print ( my_list [ 2 : 5 ]) # elements 3rd to 5th ## [2, 3, 4] print ( my_list [: - 5 ]) # elements beginning to 4th ## [0, 1, 2, 3] print ( my_list [ 5 :]) # elements 6th to end ## [5, 6, 7, 8] print ( my_list [:]) # elements beginning to end ## [0, 1, 2, 3, 4, 5, 6, 7, 8] print ( my_list [:: 3 ]) # slice a parent list with a step length \u53d6\u5168\u90e8\u9593\u683c3 ## [0, 3, 6] Built-in List Methods num_list = [ 0 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] # append() is used to add an element at the end of the list. num_list . append ( 9 ) # remove() takes a single element as an argument and removes itfrom the list. num_list . remove ( 9 ) # index() is used to find the index value of a particular element. num_list . index ( 5 ) # pop() takes a single argument (index) and removes the element present at that index from the list. result = num_list . pop ( 7 ) print ( result ) # 6 print ( num_list ) # [0, 0, 1, 2, 3, 4, 5, 7, 8] Tuples Tuples\u5143\u7d20\u4e0d\u80fd\u4fee\u6539 # empty tuple my_tuple = () print ( my_tuple ) # Output: () # tuple having integers my_tuple = ( 1 , 2 , 3 ) print ( my_tuple ) # Output: (1, 2, 3) Strings # all of the following are equivalent my_string = 'Hello' print ( my_string ) my_string = \"Hello\" print ( my_string ) \u53ef\u4ee5\u5229\u7528\u7d22\u5f15\u503c\u53d6\u5f97\u5167\u5bb9 my_str = 'Hello World!' print ( 'my_str = ' , my_str ) # my_str = Hello World! # first character, last character print ( my_str [ 0 ]) # H print ( my_str [ - 1 ]) # ! # slicing 3nd to 5th character print ( my_str [ 2 : 5 ]) # llo \u5b57\u4e32\u4e32\u9023 str1 = 'Hello' str2 = 'World!' # using + print ( str1 + str2 ) # HelloWorld! # using * print ( str1 * 3 ) # HelloHelloHello Built-in Strings Methods my_string = \"hello world\" print ( my_string . find ( \"he\" )) # Output: 0 print ( my_string . capitalize ()) # Output: Hello world print ( my_string . upper ()) # Output: HELLO WORLD print ( my_string . endswith ( \"d\" )) # Output: True print ( my_string . split ( \" \" )) # Output: ['hello', 'world'] print ( my_string . replace ( \"hello\" , \"Nihao\" )) # Output: Nihao world Sets \u7121\u5e8f\u8cc7\u6599\u96c6\u5408\u4e14\u4e0d\u80fd\u91cd\u8907\u7121\u6cd5\u66f4\u6539 # set of integers my_set = { 1 , 2 , 3 } print ( my_set ) # {1, 2, 3} # set of mixed datatypes my_set = { 1.0 , \"Hello\" , ( 1 , 2 , 3 )} print ( my_set ) # {'Hello', 1.0, (1, 2, 3)} \u9023\u96c6\u8207\u4ea4\u96c6 # mathematical set operations set_1 = set ([ 's' , 'p' , 'a' , 'm' ]) set_2 = set ([ 'h' , 'a' , 'm' ]) # union, intersection print ( set_1 | set_2 ) # {'h', 'p', 'm', 's', 'a'} print ( set_1 & set_2 ) # {'a', 'm'} # symmetric difference print ( set_1 - set_2 ) # {'p', 's'} Dictionary \u4e00\u500bkey\u5c0d\u61c9\u4e00\u500bvalue # empty dictionary my_dict = {} # dictionary with integer keys my_dict = { 1 : 'a' , 2 : 'b' } # dictionary with mixed keys my_dict = { 'name' : 'Tom' , 1 : 23 } \u4fee\u6539dictionary\u5167\u5bb9 # Another define my_dict = dict () # add elements my_dict [ 'One' ] = '1' my_dict [ 'OneTwo' ] = 12 print ( my_dict ) # {'One': '1', 'OneTwo': 12} # update value my_dict [ 'One' ] = 111 print ( my_dict ) # {'One': 111, 'OneTwo': 12} \u4f7f\u7528zip\u5c07\u5169\u500blist\u5408\u4f75\u6210dictionary # Merge two lists to a dictionary. names = [ 'One' , 'Two' , 'Three' , 'Four' , 'Five' ] numbers = [ 1 , 2 , 3 , 4 , 5 ] merged_dict = dict ( zip ( names , numbers )) print ( merged_dict ) # {'One': 1, 'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5} Dictionary Methods my_dict = { 'name' : 'Jack' , 'age' : 16 , 'gender' : 'man' } # remove a particular item print ( my_dict . pop ( 'gender' )) # man print ( my_dict ) # {'name': 'Jack', 'age': 16} # Returns view of dictionary's (key, value) pair print ( my_dict . items ()) # [('name', 'Jack'), ('age', 16)] # Return a new view of the dictionary's keys. print ( my_dict . keys ()) # ['name', 'age'] # remove all items my_dict . clear () print ( my_dict ) # {}","title":"2.2 \u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#22","text":"","title":"2.2 \u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#numbers","text":"\u6574\u6578 \u6d6e\u9ede \u6578\u8907\u6578 # Output: <class 'int'> print ( type ( 5 )) # Output: <class 'float'> print ( type ( 5.0 )) # Output: <class 'complex'> c = 5 + 3 j print ( type ( c ))","title":"Numbers"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#lists","text":"# empty list my_list = [] # list of integers my_list = [ 1 , 2 , 3 ] # list with mixed datatypes my_list = [ 1 , \"Hello\" , 2.3 ] # nested list my_list = [ \"mouse\" , [ 8 , 4 , 6 ]]","title":"Lists"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#list-index","text":"my_list = [ 'h' , 'e' , 'l' , 'l' , 'o' ] print ( my_list [ 0 ]) # Output: h print ( my_list [ 1 ]) # Output: e # my_list[5.0] # Error! Only integer can be used for indexing n_list = [ \"Happy\" , [ 2 , 0 , 1 , 8 ]] # Nested List print ( n_list [ 1 ][ 3 ]) # Output: 8","title":"List - index"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#list-negative-indexing","text":"my_list = [ 'p' , 'r' , 'o' , 'b' , 'e' ] print ( my_list [ - 1 ]) # Output: e print ( my_list [ - 5 ]) # Output: p","title":"List - negative indexing"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#list-slicing","text":"my_list = [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] print ( my_list [ 2 : 5 ]) # elements 3rd to 5th ## [2, 3, 4] print ( my_list [: - 5 ]) # elements beginning to 4th ## [0, 1, 2, 3] print ( my_list [ 5 :]) # elements 6th to end ## [5, 6, 7, 8] print ( my_list [:]) # elements beginning to end ## [0, 1, 2, 3, 4, 5, 6, 7, 8] print ( my_list [:: 3 ]) # slice a parent list with a step length \u53d6\u5168\u90e8\u9593\u683c3 ## [0, 3, 6]","title":"List - slicing(\u5207\u7247)"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#built-in-list-methods","text":"num_list = [ 0 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 ] # append() is used to add an element at the end of the list. num_list . append ( 9 ) # remove() takes a single element as an argument and removes itfrom the list. num_list . remove ( 9 ) # index() is used to find the index value of a particular element. num_list . index ( 5 ) # pop() takes a single argument (index) and removes the element present at that index from the list. result = num_list . pop ( 7 ) print ( result ) # 6 print ( num_list ) # [0, 0, 1, 2, 3, 4, 5, 7, 8]","title":"Built-in List Methods"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#tuples","text":"Tuples\u5143\u7d20\u4e0d\u80fd\u4fee\u6539 # empty tuple my_tuple = () print ( my_tuple ) # Output: () # tuple having integers my_tuple = ( 1 , 2 , 3 ) print ( my_tuple ) # Output: (1, 2, 3)","title":"Tuples"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#strings","text":"# all of the following are equivalent my_string = 'Hello' print ( my_string ) my_string = \"Hello\" print ( my_string ) \u53ef\u4ee5\u5229\u7528\u7d22\u5f15\u503c\u53d6\u5f97\u5167\u5bb9 my_str = 'Hello World!' print ( 'my_str = ' , my_str ) # my_str = Hello World! # first character, last character print ( my_str [ 0 ]) # H print ( my_str [ - 1 ]) # ! # slicing 3nd to 5th character print ( my_str [ 2 : 5 ]) # llo \u5b57\u4e32\u4e32\u9023 str1 = 'Hello' str2 = 'World!' # using + print ( str1 + str2 ) # HelloWorld! # using * print ( str1 * 3 ) # HelloHelloHello","title":"Strings"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#built-in-strings-methods","text":"my_string = \"hello world\" print ( my_string . find ( \"he\" )) # Output: 0 print ( my_string . capitalize ()) # Output: Hello world print ( my_string . upper ()) # Output: HELLO WORLD print ( my_string . endswith ( \"d\" )) # Output: True print ( my_string . split ( \" \" )) # Output: ['hello', 'world'] print ( my_string . replace ( \"hello\" , \"Nihao\" )) # Output: Nihao world","title":"Built-in Strings Methods"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#sets","text":"\u7121\u5e8f\u8cc7\u6599\u96c6\u5408\u4e14\u4e0d\u80fd\u91cd\u8907\u7121\u6cd5\u66f4\u6539 # set of integers my_set = { 1 , 2 , 3 } print ( my_set ) # {1, 2, 3} # set of mixed datatypes my_set = { 1.0 , \"Hello\" , ( 1 , 2 , 3 )} print ( my_set ) # {'Hello', 1.0, (1, 2, 3)} \u9023\u96c6\u8207\u4ea4\u96c6 # mathematical set operations set_1 = set ([ 's' , 'p' , 'a' , 'm' ]) set_2 = set ([ 'h' , 'a' , 'm' ]) # union, intersection print ( set_1 | set_2 ) # {'h', 'p', 'm', 's', 'a'} print ( set_1 & set_2 ) # {'a', 'm'} # symmetric difference print ( set_1 - set_2 ) # {'p', 's'}","title":"Sets"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#dictionary","text":"\u4e00\u500bkey\u5c0d\u61c9\u4e00\u500bvalue # empty dictionary my_dict = {} # dictionary with integer keys my_dict = { 1 : 'a' , 2 : 'b' } # dictionary with mixed keys my_dict = { 'name' : 'Tom' , 1 : 23 } \u4fee\u6539dictionary\u5167\u5bb9 # Another define my_dict = dict () # add elements my_dict [ 'One' ] = '1' my_dict [ 'OneTwo' ] = 12 print ( my_dict ) # {'One': '1', 'OneTwo': 12} # update value my_dict [ 'One' ] = 111 print ( my_dict ) # {'One': 111, 'OneTwo': 12} \u4f7f\u7528zip\u5c07\u5169\u500blist\u5408\u4f75\u6210dictionary # Merge two lists to a dictionary. names = [ 'One' , 'Two' , 'Three' , 'Four' , 'Five' ] numbers = [ 1 , 2 , 3 , 4 , 5 ] merged_dict = dict ( zip ( names , numbers )) print ( merged_dict ) # {'One': 1, 'Two': 2, 'Three': 3, 'Four': 4, 'Five': 5}","title":"Dictionary"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.2\u8cc7\u6599\u578b\u614b\u8207\u8f49\u63db/#dictionary-methods","text":"my_dict = { 'name' : 'Jack' , 'age' : 16 , 'gender' : 'man' } # remove a particular item print ( my_dict . pop ( 'gender' )) # man print ( my_dict ) # {'name': 'Jack', 'age': 16} # Returns view of dictionary's (key, value) pair print ( my_dict . items ()) # [('name', 'Jack'), ('age', 16)] # Return a new view of the dictionary's keys. print ( my_dict . keys ()) # ['name', 'age'] # remove all items my_dict . clear () print ( my_dict ) # {}","title":"Dictionary Methods"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/","text":"2.3 \u689d\u4ef6\u5224\u65b7\u6558\u8ff0 Control Flow if\u689d\u4ef6\u5224\u65b7 \u8f38\u5165\u5192\u865f(:)\u4ee3\u8868\u689d\u4ef6\u7d50\u675f num = 3 if num > 0 : print ( num , \"is a positive number.\" ) num = - 1 if num > 0 : print ( num , \"is a positive number.\" ) ## Output: 3 is a positive number. if ... else num = - 1 if num >= 0 : print ( num , \"Positive or Zero\" ) else : print ( num , \"is a Negative number\" ) ## Output: -1 is a Negative number. if ... elif ... else num = 0 if num > 0 : print ( \"Positive number\" ) elif num == 0 : print ( \"Zero\" ) else : print ( \"Negative number\" ) ## Output: Zero Logical - or, and \u4ea6\u53ef\u4f7f\u7528|(or)\u548c&(and)\u505a\u8868\u793a num = 5 if num == 0 or num == 1 : print ( \"Zero or One\" ) elif num >= 2 and num <= 10 : print ( \"From 2 to 10\" ) else : print ( 'More' ) ## Output: From 2 to 10 is, not num = 4 # num == 4 if num is 4 : print ( \"num is 4\" ) # !(num == 5) if not num == 5 : print ( \"num is not 5\" ) # num != 6 if num is not 6 : print ( \"num is not 6\" ) # !(num == 7) if not num is 7 : print ( \"num is not 7\" ) Test 3-1 Q1. \u5efa\u7acb\u4e00\u500b\u9a57\u8b49\u5bc6\u78bc\u7684\u5c0f\u7a0b\u5f0f,\u7a0b\u5f0f \u5167\u5efa\u4e00\u7d44\u5b57\u4e32\u5bc6\u78bc,\u8acb\u4f7f\u7528\u8005\u8f38\u5165\u4e00\u7d44\u5b57\u4e32\u5bc6\u78bc, \u6bd4\u5c0d\u5bc6\u78bc\u662f\u5426\u8f38\u5165\u6b63\u78ba\u3002 Expected Result: \u8acb\u8f38\u5165\u5bc6\u78bc: Passw0rd \u5bc6\u78bc\u6b63\u78ba or \u8acb\u8f38\u5165\u5bc6\u78bc: adfgg \u5bc6\u78bc\u932f\u8aa4 password = '0000' myPass = input ( '\u8acb\u8f38\u5165\u5bc6\u78bc\uff1a' ) if myPass == password : print ( '\u5bc6\u78bc\u6b63\u78ba' ) else : print ( '\u5bc6\u78bc\u932f\u8aa4' )","title":"2.3 \u689d\u4ef6\u5224\u65b7\u6558\u8ff0"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/#23","text":"","title":"2.3 \u689d\u4ef6\u5224\u65b7\u6558\u8ff0"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/#control-flow","text":"","title":"Control Flow"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/#if","text":"\u8f38\u5165\u5192\u865f(:)\u4ee3\u8868\u689d\u4ef6\u7d50\u675f num = 3 if num > 0 : print ( num , \"is a positive number.\" ) num = - 1 if num > 0 : print ( num , \"is a positive number.\" ) ## Output: 3 is a positive number.","title":"if\u689d\u4ef6\u5224\u65b7"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/#if-else","text":"num = - 1 if num >= 0 : print ( num , \"Positive or Zero\" ) else : print ( num , \"is a Negative number\" ) ## Output: -1 is a Negative number.","title":"if ... else"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/#if-elif-else","text":"num = 0 if num > 0 : print ( \"Positive number\" ) elif num == 0 : print ( \"Zero\" ) else : print ( \"Negative number\" ) ## Output: Zero","title":"if ... elif ... else"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/#logical-or-and","text":"\u4ea6\u53ef\u4f7f\u7528|(or)\u548c&(and)\u505a\u8868\u793a num = 5 if num == 0 or num == 1 : print ( \"Zero or One\" ) elif num >= 2 and num <= 10 : print ( \"From 2 to 10\" ) else : print ( 'More' ) ## Output: From 2 to 10","title":"Logical - or, and"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/#is-not","text":"num = 4 # num == 4 if num is 4 : print ( \"num is 4\" ) # !(num == 5) if not num == 5 : print ( \"num is not 5\" ) # num != 6 if num is not 6 : print ( \"num is not 6\" ) # !(num == 7) if not num is 7 : print ( \"num is not 7\" )","title":"is, not"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/#test","text":"","title":"Test"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.3\u689d\u4ef6\u5224\u65b7\u6558\u8ff0/#3-1","text":"Q1. \u5efa\u7acb\u4e00\u500b\u9a57\u8b49\u5bc6\u78bc\u7684\u5c0f\u7a0b\u5f0f,\u7a0b\u5f0f \u5167\u5efa\u4e00\u7d44\u5b57\u4e32\u5bc6\u78bc,\u8acb\u4f7f\u7528\u8005\u8f38\u5165\u4e00\u7d44\u5b57\u4e32\u5bc6\u78bc, \u6bd4\u5c0d\u5bc6\u78bc\u662f\u5426\u8f38\u5165\u6b63\u78ba\u3002 Expected Result: \u8acb\u8f38\u5165\u5bc6\u78bc: Passw0rd \u5bc6\u78bc\u6b63\u78ba or \u8acb\u8f38\u5165\u5bc6\u78bc: adfgg \u5bc6\u78bc\u932f\u8aa4 password = '0000' myPass = input ( '\u8acb\u8f38\u5165\u5bc6\u78bc\uff1a' ) if myPass == password : print ( '\u5bc6\u78bc\u6b63\u78ba' ) else : print ( '\u5bc6\u78bc\u932f\u8aa4' )","title":"3-1"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/","text":"2.4 \u8ff4\u5708 For Loop\u8ff4\u5708 \u7d50\u5c3e\u9700\u8981\u6709: # Program to find the sum of all numbers stored in a list numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # iterate over the list sum = 0 for val in numbers : sum = sum + val print ( \"The sum is\" , sum ) # The sum is 55 For loop with range() # range(stop) # range(start, stop[, step]) numbers = [ 1 , 2 , 3 , 4 , 5 , 6 ] # iterate over the list using index for i in range ( len ( numbers )): print ( \"number\" , numbers [ i ]) # iterate over the list using 2 steps for i in range ( 0 , len ( numbers ), 2 ): print ( \"2 steps\" , numbers [ i ]) # Output number 1 number 2 number 3 number 4 number 5 number 6 # Output 2 steps 1 2 steps 3 2 steps 5 For loop with enumerate( ) \u53d6\u5f97\u8ff4\u5708\u76ee\u524d\u7684\u7d22\u5f15\u503c pets = ( 'Dogs' , 'Cats' , 'Turtles' , 'Rabbits' ) for index , pet in enumerate ( pets ): print ( index , pet ) # Output: 0 Dogs 1 Cats 2 Turtles 3 Rabbits While Loop n = 10 # initialize sum and counter sum = 0 i = 1 while i <= n : sum = sum + i i = i + 1 # update counter # print the sum print ( \"The sum is\" , sum ) # The sum is 55 Nested Loop for i in range ( 0 , 2 ): for j in range ( 0 , 2 ): print ( \"i=\" , i , \"j=\" , j , \", i*j=\" , i * j ) # Output: i = 0 j = 0 , i * j = 0 i = 0 j = 1 , i * j = 0 i = 1 j = 0 , i * j = 0 i = 1 j = 1 , i * j = 1 break, continue and pass numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # break for val in numbers : if val >= 4 : break print ( val ) # Output 1 2 # pass 3 for val in numbers : pass # continue for val in numbers : if val >= 3 and val <= 8 : continue print ( val ) # Output 1 2 9 10 List comprehension \u7528\u8ff4\u5708\u5feb\u901f\u7522\u751f\u4e32\u5217 # make new lists by using iterable squares = [] for x in range ( 10 ): squares . append ( x ** 2 ) print ( squares ) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] # equivalently squares = [ x ** 2 for x in range ( 10 )] print ( squares ) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] \u8ff4\u5708\u5167\u52a0\u5165\u5224\u65b7\u5f0f\u7522\u751f\u4e32\u5217 # with if squares = [ x ** 2 for x in range ( 10 ) if x % 2 == 0 ] print ( squares ) ## [0, 4, 16, 36, 64] # equivalently squares = [] for x in range ( 10 ): if x % 2 == 0 : squares . append ( x ** 2 ) print ( squares ) ## [0, 4, 16, 36, 64] Test Q2. \u7d66\u4e88\u4e00\u500b\u5217\u8868,\u8a08\u7b97\u51fa\u5217\u8868\u4e2d\u5143\u7d20\u70ba 2\u7684\u500d\u6578\u7684\u548c\u3002 Sample List : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Expected Result : 30 list = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] tot = 0 for index , num in enumerate ( list ): if ( index % 2 == 1 ): tot += num print ( tot ) Q3. \u8f38\u5165\u4eba\u7269\u7684\u8eab\u9ad8\u3001\u9ad4\u91cd,\u8a08\u7b97\u51fa\u8a72\u4eba\u7269\u7684 BMI \u516c\u5f0f:BMI = \u9ad4\u91cd(\u516c\u65a4) / \u8eab\u9ad8*\u8eab\u9ad8 (\u516c\u5c3a) P.S. \u65bc2002\u5e744\u6708\u516c\u5e03\u81fa\u7063\u6210\u4eba\u80a5\u80d6\u6a19\u6e96: BMI<18.5 \u70ba\u904e\u8f15, 18.5\u2266BMI<24 \u70ba\u6b63\u5e38\u9ad4\u91cd, 24\u2266BMI<27 \u70ba\u904e\u91cd, BMI\u226727 \u5373\u70ba\u80a5\u80d6 weight = float ( input ( '\u8acb\u8f38\u5165\u9ad4\u91cd(kg)' )) high = float ( input ( '\u8acb\u8f38\u5165\u8eab\u9ad8(m)' )) bmi = weight / ( high * high ) print ( type ( bmi )) if bmi < 18.5 : print ( '\u904e\u8f15' ) elif bmi < 24.0 and bmi >= 18.5 : print ( '\u6b63\u5e38' ) elif bmi < 27 and bmi >= 24 : print ( '\u904e\u91cd' ) else : print ( '\u80a5\u80d6' ) Q4. \u5370\u51fa 1 \u5230 50,\u4f46\u5982\u679c\u662f 3 \u7684\u500d\u6578\u5c31\u5370 Fizz,\u5982\u679c\u662f 5 \u7684\u500d\u6578\u5c31\u5370 Buzz,\u5982 \u679c\u540c\u6642\u662f 3 \u548c 5 \u7684\u500d\u6578\u5c31\u5370 FizzBuzz\u3002 for num in range ( 1 , 51 ): if num % 3 == 0 and num % 5 == 0 : print ( 'FizzBuzz ' , num ) elif num % 5 == 0 : print ( 'buzz ' , num ) elif num % 3 == 0 : print ( 'Fizz ' , num ) else : print ( num )","title":"2.4 \u8ff4\u5708"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/#24","text":"","title":"2.4 \u8ff4\u5708"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/#for-loop","text":"\u7d50\u5c3e\u9700\u8981\u6709: # Program to find the sum of all numbers stored in a list numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # iterate over the list sum = 0 for val in numbers : sum = sum + val print ( \"The sum is\" , sum ) # The sum is 55","title":"For Loop\u8ff4\u5708"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/#for-loop-with-range","text":"# range(stop) # range(start, stop[, step]) numbers = [ 1 , 2 , 3 , 4 , 5 , 6 ] # iterate over the list using index for i in range ( len ( numbers )): print ( \"number\" , numbers [ i ]) # iterate over the list using 2 steps for i in range ( 0 , len ( numbers ), 2 ): print ( \"2 steps\" , numbers [ i ]) # Output number 1 number 2 number 3 number 4 number 5 number 6 # Output 2 steps 1 2 steps 3 2 steps 5","title":"For loop with range()"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/#for-loop-with-enumerate","text":"\u53d6\u5f97\u8ff4\u5708\u76ee\u524d\u7684\u7d22\u5f15\u503c pets = ( 'Dogs' , 'Cats' , 'Turtles' , 'Rabbits' ) for index , pet in enumerate ( pets ): print ( index , pet ) # Output: 0 Dogs 1 Cats 2 Turtles 3 Rabbits","title":"For loop with enumerate( )"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/#while-loop","text":"n = 10 # initialize sum and counter sum = 0 i = 1 while i <= n : sum = sum + i i = i + 1 # update counter # print the sum print ( \"The sum is\" , sum ) # The sum is 55","title":"While Loop"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/#nested-loop","text":"for i in range ( 0 , 2 ): for j in range ( 0 , 2 ): print ( \"i=\" , i , \"j=\" , j , \", i*j=\" , i * j ) # Output: i = 0 j = 0 , i * j = 0 i = 0 j = 1 , i * j = 0 i = 1 j = 0 , i * j = 0 i = 1 j = 1 , i * j = 1","title":"Nested Loop"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/#break-continue-and-pass","text":"numbers = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] # break for val in numbers : if val >= 4 : break print ( val ) # Output 1 2 # pass 3 for val in numbers : pass # continue for val in numbers : if val >= 3 and val <= 8 : continue print ( val ) # Output 1 2 9 10","title":"break, continue and pass"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/#list-comprehension","text":"\u7528\u8ff4\u5708\u5feb\u901f\u7522\u751f\u4e32\u5217 # make new lists by using iterable squares = [] for x in range ( 10 ): squares . append ( x ** 2 ) print ( squares ) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] # equivalently squares = [ x ** 2 for x in range ( 10 )] print ( squares ) # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] \u8ff4\u5708\u5167\u52a0\u5165\u5224\u65b7\u5f0f\u7522\u751f\u4e32\u5217 # with if squares = [ x ** 2 for x in range ( 10 ) if x % 2 == 0 ] print ( squares ) ## [0, 4, 16, 36, 64] # equivalently squares = [] for x in range ( 10 ): if x % 2 == 0 : squares . append ( x ** 2 ) print ( squares ) ## [0, 4, 16, 36, 64]","title":"List comprehension"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.4\u8ff4\u5708/#test","text":"Q2. \u7d66\u4e88\u4e00\u500b\u5217\u8868,\u8a08\u7b97\u51fa\u5217\u8868\u4e2d\u5143\u7d20\u70ba 2\u7684\u500d\u6578\u7684\u548c\u3002 Sample List : [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] Expected Result : 30 list = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] tot = 0 for index , num in enumerate ( list ): if ( index % 2 == 1 ): tot += num print ( tot ) Q3. \u8f38\u5165\u4eba\u7269\u7684\u8eab\u9ad8\u3001\u9ad4\u91cd,\u8a08\u7b97\u51fa\u8a72\u4eba\u7269\u7684 BMI \u516c\u5f0f:BMI = \u9ad4\u91cd(\u516c\u65a4) / \u8eab\u9ad8*\u8eab\u9ad8 (\u516c\u5c3a) P.S. \u65bc2002\u5e744\u6708\u516c\u5e03\u81fa\u7063\u6210\u4eba\u80a5\u80d6\u6a19\u6e96: BMI<18.5 \u70ba\u904e\u8f15, 18.5\u2266BMI<24 \u70ba\u6b63\u5e38\u9ad4\u91cd, 24\u2266BMI<27 \u70ba\u904e\u91cd, BMI\u226727 \u5373\u70ba\u80a5\u80d6 weight = float ( input ( '\u8acb\u8f38\u5165\u9ad4\u91cd(kg)' )) high = float ( input ( '\u8acb\u8f38\u5165\u8eab\u9ad8(m)' )) bmi = weight / ( high * high ) print ( type ( bmi )) if bmi < 18.5 : print ( '\u904e\u8f15' ) elif bmi < 24.0 and bmi >= 18.5 : print ( '\u6b63\u5e38' ) elif bmi < 27 and bmi >= 24 : print ( '\u904e\u91cd' ) else : print ( '\u80a5\u80d6' ) Q4. \u5370\u51fa 1 \u5230 50,\u4f46\u5982\u679c\u662f 3 \u7684\u500d\u6578\u5c31\u5370 Fizz,\u5982\u679c\u662f 5 \u7684\u500d\u6578\u5c31\u5370 Buzz,\u5982 \u679c\u540c\u6642\u662f 3 \u548c 5 \u7684\u500d\u6578\u5c31\u5370 FizzBuzz\u3002 for num in range ( 1 , 51 ): if num % 3 == 0 and num % 5 == 0 : print ( 'FizzBuzz ' , num ) elif num % 5 == 0 : print ( 'buzz ' , num ) elif num % 3 == 0 : print ( 'Fizz ' , num ) else : print ( num )","title":"Test"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/","text":"2.5 \u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5 Python \u7a0b\u5f0f\u8a9e\u8a00\u975e\u5e38\u597d\u4e0a\u624b\uff0c\u4ee5\u53ca\u5927\u91cf\u51fd\u5f0f\u5eab\u652f\u63f4\u53ef\u4ee5\u6e1b\u8f15\u7a0b\u5f0f\u4e0a\u7684\u8ca0\u64d4\u3002\u672c\u7bc7\u6587\u7ae0\u5c31\u4f86\u7d71\u6574 Python \u7a0b\u5f0f\u4e2d\u5e38\u898b\u7684\u4f7f\u7528\u65b9\u6cd5\u8207\u6280\u5de7\u3002\u9019\u4e9b\u5c07\u6703\u662f\u5be6\u6230\u4e2d\u5e38\u6703\u9047\u5230\u7684\u554f\u984c\uff0c\u4f8b\u5982\u908f\u8f2f\u63a7\u5236 (if...else)\u3001\u8ff4\u5708 (for loop)\u3001\u8cc7\u6599\u5bb9\u5668\u4e2d\u7684\u4e32\u5217 (List)\u3002 \u4e32\u5217 (List) \u4e32\u5217\u662f Python \u4e2d\u6700\u57fa\u672c\u7684\u6578\u64da\u7d50\u69cb\u3002\u5e8f\u5217\u4e2d\u7684\u6bcf\u500b\u5143\u7d20\u90fd\u5206\u914d\u4e00\u500b\u6578\u5b57- \u5b83\u7684\u4f4d\u7f6e\uff0c\u6216\u7d22\u5f15\uff0c\u7b2c\u4e00\u500b\u7d22\u5f15\u662f0\uff0c\u7b2c\u4e8c\u500b\u7d22\u5f15\u662f1\uff0c\u4f9d\u6b64\u985e\u63a8\u3002 List \u63d2\u503c myList = [] myList . append ( 'first' ) print ( myList ) myList . append ( 'second' ) print ( myList ) ['first'] ['first', 'second'] List \u67e5\u8a62\u4f4d\u7f6e \u5c0b\u627e\u5143\u7d20\u7684\u7d22\u5f15 myList = [ 'apple' , 'box' , 'cat' , 'dog' ] print ( 'Index: ' , myList . index ( 'box' )) Index: 1 List \u5e38\u898b\u7684\u65b9\u6cd5 len() \u56de\u50b3\u9577\u5ea6 sum() \u56de\u50b3\u7e3d\u548c max() \u56de\u50b3\u6700\u5927\u503c min() \u56de\u50b3\u6700\u5c0f\u503c myList = [ 2 , 4 , 6 , 8 , 10 ] print ( '\u9577\u5ea6: ' , len ( myList )) print ( '\u7e3d\u548c: ' , sum ( myList )) print ( '\u6700\u5927\u503c: ' , max ( myList )) print ( '\u6700\u5c0f\u503c: ' , min ( myList )) \u9577\u5ea6: 5 \u7e3d\u548c: 30 \u6700\u5927\u503c: 10 \u6700\u5c0f\u503c: 2 List \u5167\u5efa\u6392\u5e8f \u7b2c\u4e00\u7a2e\u65b9\u5f0f\u662f\u76f4\u63a5\u547c\u53eb List \u672c\u8eab\u7684 sort() \u51fd\u6578\u9032\u884c\u6392\u5e8f\uff0c\u9019\u7a2e\u65b9\u5f0f\u6703\u76f4\u63a5\u6539\u8b8a\u539f\u672c\u7684 List \u5167\u5bb9\u3002\u7b2c\u4e8c\u7a2e\u65b9\u6cd5\u4f7f\u7528 sorted() \uff0c\u4ed6\u6703\u5c0d\u5143\u7d20\u6392\u5e8f\u4e4b\u5f8c\uff0c\u50b3\u56de\u4e00\u500b\u6392\u5e8f\u597d\u7684\u65b0 List\uff0c\u800c\u539f\u672c\u7684 List \u5247\u4e0d\u53d7\u5f71\u97ff\u3002 \u65b9\u6cd5\u4e00 myList = [ 33 , 22 , 41 , 12 , 6 , 4 ] myList . sort () # \u5c0d\u539f\u672c\u7684 List \u6392\u5e8f myList [4, 6, 12, 22, 33, 41] \u65b9\u6cd5\u4e8c myList = [ 33 , 22 , 41 , 12 , 6 , 4 ] newList = sorted ( myList ) # \u6392\u5e8f\u4e26\u5efa\u7acb\u65b0\u7684 List print ( 'myList: ' , myList ) print ( 'newList:' , newList ) myList: [33, 22, 41, 12, 6, 4] newList: [4, 6, 12, 22, 33, 41] sorted \u8207 sort \u4e5f\u53ef\u4ee5\u8655\u7406\u6587\u5b57\u7684\u6392\u5e8f\uff0c\u9810\u8a2d\u6703\u4f9d\u7167\u82f1\u6587\u5b57\u6bcd\u7684\u9806\u5e8f\u6392\u5217 List \u521d\u59cb 0 \u5047\u8a2d\u6211\u5011\u6709\u9577\u5ea6\u70ba 10 \u7684\u4e32\u5217\uff0c\u9700\u8981\u5c07\u88e1\u9762\u6240\u6709\u503c\u505a\u521d\u59cb\u5316\u3002 listofzeros = [ 0 ] * 10 print ( listofzeros ) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0] \u8ff4\u5708\u63d0\u53d6 List \u6240\u6709\u5143\u7d20 \u5047\u8a2d\u6211\u5011\u7684\u4e32\u5217\u4e2d\u6709 4 \u500b\u5143\u7d20\uff0c\u6211\u5011\u60f3\u900f\u904e\u8ff4\u5708\u4f9d\u5e8f\u5730\u53d6\u503c\u3002 myList = [ 'apple' , 'box' , 'cat' , 'dog' ] \u65b9\u6cd5\u4e00 # \u65b9\u6cd5\u3127 for i in range ( len ( myList )): print ( i , myList [ i ]) 0 apple 1 box 2 cat 3 dog \u65b9\u6cd5\u4e8c # \u65b9\u6cd5\u4e8c for word in myList : print ( word ) apple box cat dog \u65b9\u6cd5\u4e09 # \u65b9\u6cd5\u4e09 for index , word in enumerate ( myList , start = 0 ): print ( index , word ) 0 apple 1 box 2 cat 3 dog","title":"2.5 \u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#25","text":"Python \u7a0b\u5f0f\u8a9e\u8a00\u975e\u5e38\u597d\u4e0a\u624b\uff0c\u4ee5\u53ca\u5927\u91cf\u51fd\u5f0f\u5eab\u652f\u63f4\u53ef\u4ee5\u6e1b\u8f15\u7a0b\u5f0f\u4e0a\u7684\u8ca0\u64d4\u3002\u672c\u7bc7\u6587\u7ae0\u5c31\u4f86\u7d71\u6574 Python \u7a0b\u5f0f\u4e2d\u5e38\u898b\u7684\u4f7f\u7528\u65b9\u6cd5\u8207\u6280\u5de7\u3002\u9019\u4e9b\u5c07\u6703\u662f\u5be6\u6230\u4e2d\u5e38\u6703\u9047\u5230\u7684\u554f\u984c\uff0c\u4f8b\u5982\u908f\u8f2f\u63a7\u5236 (if...else)\u3001\u8ff4\u5708 (for loop)\u3001\u8cc7\u6599\u5bb9\u5668\u4e2d\u7684\u4e32\u5217 (List)\u3002","title":"2.5 \u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#list","text":"\u4e32\u5217\u662f Python \u4e2d\u6700\u57fa\u672c\u7684\u6578\u64da\u7d50\u69cb\u3002\u5e8f\u5217\u4e2d\u7684\u6bcf\u500b\u5143\u7d20\u90fd\u5206\u914d\u4e00\u500b\u6578\u5b57- \u5b83\u7684\u4f4d\u7f6e\uff0c\u6216\u7d22\u5f15\uff0c\u7b2c\u4e00\u500b\u7d22\u5f15\u662f0\uff0c\u7b2c\u4e8c\u500b\u7d22\u5f15\u662f1\uff0c\u4f9d\u6b64\u985e\u63a8\u3002","title":"\u4e32\u5217 (List)"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#list_1","text":"myList = [] myList . append ( 'first' ) print ( myList ) myList . append ( 'second' ) print ( myList ) ['first'] ['first', 'second']","title":"List \u63d2\u503c"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#list_2","text":"\u5c0b\u627e\u5143\u7d20\u7684\u7d22\u5f15 myList = [ 'apple' , 'box' , 'cat' , 'dog' ] print ( 'Index: ' , myList . index ( 'box' )) Index: 1","title":"List \u67e5\u8a62\u4f4d\u7f6e"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#list_3","text":"len() \u56de\u50b3\u9577\u5ea6 sum() \u56de\u50b3\u7e3d\u548c max() \u56de\u50b3\u6700\u5927\u503c min() \u56de\u50b3\u6700\u5c0f\u503c myList = [ 2 , 4 , 6 , 8 , 10 ] print ( '\u9577\u5ea6: ' , len ( myList )) print ( '\u7e3d\u548c: ' , sum ( myList )) print ( '\u6700\u5927\u503c: ' , max ( myList )) print ( '\u6700\u5c0f\u503c: ' , min ( myList )) \u9577\u5ea6: 5 \u7e3d\u548c: 30 \u6700\u5927\u503c: 10 \u6700\u5c0f\u503c: 2","title":"List \u5e38\u898b\u7684\u65b9\u6cd5"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#list_4","text":"\u7b2c\u4e00\u7a2e\u65b9\u5f0f\u662f\u76f4\u63a5\u547c\u53eb List \u672c\u8eab\u7684 sort() \u51fd\u6578\u9032\u884c\u6392\u5e8f\uff0c\u9019\u7a2e\u65b9\u5f0f\u6703\u76f4\u63a5\u6539\u8b8a\u539f\u672c\u7684 List \u5167\u5bb9\u3002\u7b2c\u4e8c\u7a2e\u65b9\u6cd5\u4f7f\u7528 sorted() \uff0c\u4ed6\u6703\u5c0d\u5143\u7d20\u6392\u5e8f\u4e4b\u5f8c\uff0c\u50b3\u56de\u4e00\u500b\u6392\u5e8f\u597d\u7684\u65b0 List\uff0c\u800c\u539f\u672c\u7684 List \u5247\u4e0d\u53d7\u5f71\u97ff\u3002","title":"List \u5167\u5efa\u6392\u5e8f"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#_1","text":"myList = [ 33 , 22 , 41 , 12 , 6 , 4 ] myList . sort () # \u5c0d\u539f\u672c\u7684 List \u6392\u5e8f myList [4, 6, 12, 22, 33, 41]","title":"\u65b9\u6cd5\u4e00"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#_2","text":"myList = [ 33 , 22 , 41 , 12 , 6 , 4 ] newList = sorted ( myList ) # \u6392\u5e8f\u4e26\u5efa\u7acb\u65b0\u7684 List print ( 'myList: ' , myList ) print ( 'newList:' , newList ) myList: [33, 22, 41, 12, 6, 4] newList: [4, 6, 12, 22, 33, 41] sorted \u8207 sort \u4e5f\u53ef\u4ee5\u8655\u7406\u6587\u5b57\u7684\u6392\u5e8f\uff0c\u9810\u8a2d\u6703\u4f9d\u7167\u82f1\u6587\u5b57\u6bcd\u7684\u9806\u5e8f\u6392\u5217","title":"\u65b9\u6cd5\u4e8c"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#list-0","text":"\u5047\u8a2d\u6211\u5011\u6709\u9577\u5ea6\u70ba 10 \u7684\u4e32\u5217\uff0c\u9700\u8981\u5c07\u88e1\u9762\u6240\u6709\u503c\u505a\u521d\u59cb\u5316\u3002 listofzeros = [ 0 ] * 10 print ( listofzeros ) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]","title":"List \u521d\u59cb 0"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#list_5","text":"\u5047\u8a2d\u6211\u5011\u7684\u4e32\u5217\u4e2d\u6709 4 \u500b\u5143\u7d20\uff0c\u6211\u5011\u60f3\u900f\u904e\u8ff4\u5708\u4f9d\u5e8f\u5730\u53d6\u503c\u3002 myList = [ 'apple' , 'box' , 'cat' , 'dog' ]","title":"\u8ff4\u5708\u63d0\u53d6 List \u6240\u6709\u5143\u7d20"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#_3","text":"# \u65b9\u6cd5\u3127 for i in range ( len ( myList )): print ( i , myList [ i ]) 0 apple 1 box 2 cat 3 dog","title":"\u65b9\u6cd5\u4e00"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#_4","text":"# \u65b9\u6cd5\u4e8c for word in myList : print ( word ) apple box cat dog","title":"\u65b9\u6cd5\u4e8c"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.5\u4e32\u5217\u7684\u57fa\u672c\u7528\u6cd5/#_5","text":"# \u65b9\u6cd5\u4e09 for index , word in enumerate ( myList , start = 0 ): print ( index , word ) 0 apple 1 box 2 cat 3 dog","title":"\u65b9\u6cd5\u4e09"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.6\u51fd\u5f0f/","text":"2.6 \u51fd\u5f0f \u57fa\u672c\u8a9e\u6cd5\u67b6\u69cb # Function is a group of related statements that perform a specific task. def function_name ( parameters ): statement ( s ) def marks the start of function header. function name to uniquely identify it. parameters through which we pass values to a function. (optional) colon (:) to mark the end of function header. return statement to return a value from the function. (optional) \u5b9a\u7fa9\u4e00\u500b\u7c21\u55ae\u7684Define, Call Function \u7121\u8f38\u5165\u53c3\u6578\u547c\u53eb # define function without parameters def greet (): print ( \"Hello!\" ) # call function greet () # Hello! \u6709\u8f38\u5165\u53c3\u6578\u547c\u53eb # define function with parameter def greet ( name ): print ( \"Hello\" , name + \", nice to meet you.\" ) greet ( \"Felix\" ) # Hello Felix, nice to meet you. \u5b9a\u7fa9\u4e00\u500b\u5177\u6709\u56de\u50b3\u503c\u7684\u51fd\u5f0f Return Statement \u55ae\u4e00\u500b\u56de\u50b3 # One def add_two_nums ( arg1 , arg2 ): sum = arg1 + arg2 return sum # call function result = add_two_nums ( 10 , 20 ) print ( result ) # 30 \u591a\u500b\u56de\u50b3\u503c \u7b2c\u4e00\u7a2e\u662f\u56de\u50b3\u63a5\u6536\u4e00\u7d44tuple # constructs a tuple and returns this to the caller def square ( x , y ): return x * x , y * y result = square ( 2 , 3 ) print ( result ) # (4,9) \u53ef\u4ee5\u5c07\u56de\u50b3\u7d50\u679c\u7528\u8b8a\u6578\u53bb\u63a5\u6536 # \"unwrap\" the tuple into the variables directly by specifying the same number of variables def square ( x , y ): return x * x , y * y res_x , res_y = square ( 2 , 3 ) print ( res_x ) # 4 print ( res_y ) # 9 \u533f\u540d\u51fd\u5f0f Anonymous Function - Lambda \u55ae\u500b\u6578\u5165\u53c3\u6578 # Lambda functions can have only one expression. # The expression is evaluated and returned. double = lambda x : x * 2 print ( double ( 5 )) # 10 # is nearly the same as def double ( x ): return x * 2 \u591a\u500b\u8f38\u5165\u53c3\u6578 # Lambda functions can have any number of arguments double = lambda x , y : x * 2 + y print ( double ( 5 , 2 )) # 12 # is nearly the same as def double ( x , y ): return x * 2 + y Global, Local variables # global x = \"global\" def foo (): y = x + \"_variable\" print ( y ) foo () # global_variable # local def foo (): z = \"local\" # NameError: name 'z' is not defined print ( z ) Test Q1. \u8acb\u5beb\u51fa\u4e00\u500b\u51fd\u5f0f,\u5c07\u5217\u8868\u4e2d\u7684\u6578\u5b57\u76f8\u4e58\u3002 Sample List : [1, 2, 3, 4, 5] Expected Result : 120 def myFunction ( list ): tot = 1 for num in list : tot *= num return tot print ( myFunction ([ 1 , 2 , 3 , 4 , 5 ])) Q2. \u8acb\u5beb\u4e00\u500b\u51fd\u5f0f,\u8f38\u5165\u4e00\u5b57\u4e32,\u8fd4\u56de\u53cd\u8f49\u5168\u90e8\u5b57\u5143\u7684\u5b57\u4e32\u3002 a_func(\"test\") Expected Result : \"tset\" def a_func ( str ): reverseStr = \"\" for char in range ( len ( str ) - 1 , - 1 , - 1 ): reverseStr += str [ char ] return reverseStr print ( a_func ( 'test' )) def a_func ( x ): return x [:: - 1 ] print ( a_func ( 'test' )) a_func = lambda x : x [:: - 1 ] print ( a_func ( 'test' )) Q3. \u8acb\u5beb\u4e00\u500b\u51fd\u5f0f\u628a\u88e1\u9762\u7684\u5b57\u4e32,\u6bcf\u500b\u55ae\u5b57\u672c\u9ad4\u505a\u53cd\u8f49,\u4f46\u662f\u55ae\u5b57\u7684\u9806\u5e8f\u4e0d\u8b8a\u3002 (Optional) a_func(\"it is a test string\") Expected Result : \"ti si a tset gnirts\" def a_func ( str ): arr = str [:: - 1 ] . split ( ' ' ) return ( ' ' ) . join ( arr [:: - 1 ]) print ( a_func ( 'it is a test string' ))","title":"2.6 \u51fd\u5f0f"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.6\u51fd\u5f0f/#26","text":"","title":"2.6 \u51fd\u5f0f"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.6\u51fd\u5f0f/#_1","text":"# Function is a group of related statements that perform a specific task. def function_name ( parameters ): statement ( s ) def marks the start of function header. function name to uniquely identify it. parameters through which we pass values to a function. (optional) colon (:) to mark the end of function header. return statement to return a value from the function. (optional)","title":"\u57fa\u672c\u8a9e\u6cd5\u67b6\u69cb"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.6\u51fd\u5f0f/#define-call-function","text":"\u7121\u8f38\u5165\u53c3\u6578\u547c\u53eb # define function without parameters def greet (): print ( \"Hello!\" ) # call function greet () # Hello! \u6709\u8f38\u5165\u53c3\u6578\u547c\u53eb # define function with parameter def greet ( name ): print ( \"Hello\" , name + \", nice to meet you.\" ) greet ( \"Felix\" ) # Hello Felix, nice to meet you.","title":"\u5b9a\u7fa9\u4e00\u500b\u7c21\u55ae\u7684Define, Call Function"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.6\u51fd\u5f0f/#return-statement","text":"\u55ae\u4e00\u500b\u56de\u50b3 # One def add_two_nums ( arg1 , arg2 ): sum = arg1 + arg2 return sum # call function result = add_two_nums ( 10 , 20 ) print ( result ) # 30 \u591a\u500b\u56de\u50b3\u503c \u7b2c\u4e00\u7a2e\u662f\u56de\u50b3\u63a5\u6536\u4e00\u7d44tuple # constructs a tuple and returns this to the caller def square ( x , y ): return x * x , y * y result = square ( 2 , 3 ) print ( result ) # (4,9) \u53ef\u4ee5\u5c07\u56de\u50b3\u7d50\u679c\u7528\u8b8a\u6578\u53bb\u63a5\u6536 # \"unwrap\" the tuple into the variables directly by specifying the same number of variables def square ( x , y ): return x * x , y * y res_x , res_y = square ( 2 , 3 ) print ( res_x ) # 4 print ( res_y ) # 9","title":"\u5b9a\u7fa9\u4e00\u500b\u5177\u6709\u56de\u50b3\u503c\u7684\u51fd\u5f0f Return Statement"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.6\u51fd\u5f0f/#anonymous-function-lambda","text":"\u55ae\u500b\u6578\u5165\u53c3\u6578 # Lambda functions can have only one expression. # The expression is evaluated and returned. double = lambda x : x * 2 print ( double ( 5 )) # 10 # is nearly the same as def double ( x ): return x * 2 \u591a\u500b\u8f38\u5165\u53c3\u6578 # Lambda functions can have any number of arguments double = lambda x , y : x * 2 + y print ( double ( 5 , 2 )) # 12 # is nearly the same as def double ( x , y ): return x * 2 + y","title":"\u533f\u540d\u51fd\u5f0f Anonymous Function - Lambda"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.6\u51fd\u5f0f/#global-local-variables","text":"# global x = \"global\" def foo (): y = x + \"_variable\" print ( y ) foo () # global_variable # local def foo (): z = \"local\" # NameError: name 'z' is not defined print ( z )","title":"Global, Local variables"},{"location":"2.\u57fa\u790e\u8a9e\u6cd5/2.6\u51fd\u5f0f/#test","text":"Q1. \u8acb\u5beb\u51fa\u4e00\u500b\u51fd\u5f0f,\u5c07\u5217\u8868\u4e2d\u7684\u6578\u5b57\u76f8\u4e58\u3002 Sample List : [1, 2, 3, 4, 5] Expected Result : 120 def myFunction ( list ): tot = 1 for num in list : tot *= num return tot print ( myFunction ([ 1 , 2 , 3 , 4 , 5 ])) Q2. \u8acb\u5beb\u4e00\u500b\u51fd\u5f0f,\u8f38\u5165\u4e00\u5b57\u4e32,\u8fd4\u56de\u53cd\u8f49\u5168\u90e8\u5b57\u5143\u7684\u5b57\u4e32\u3002 a_func(\"test\") Expected Result : \"tset\" def a_func ( str ): reverseStr = \"\" for char in range ( len ( str ) - 1 , - 1 , - 1 ): reverseStr += str [ char ] return reverseStr print ( a_func ( 'test' )) def a_func ( x ): return x [:: - 1 ] print ( a_func ( 'test' )) a_func = lambda x : x [:: - 1 ] print ( a_func ( 'test' )) Q3. \u8acb\u5beb\u4e00\u500b\u51fd\u5f0f\u628a\u88e1\u9762\u7684\u5b57\u4e32,\u6bcf\u500b\u55ae\u5b57\u672c\u9ad4\u505a\u53cd\u8f49,\u4f46\u662f\u55ae\u5b57\u7684\u9806\u5e8f\u4e0d\u8b8a\u3002 (Optional) a_func(\"it is a test string\") Expected Result : \"ti si a tset gnirts\" def a_func ( str ): arr = str [:: - 1 ] . split ( ' ' ) return ( ' ' ) . join ( arr [:: - 1 ]) print ( a_func ( 'it is a test string' ))","title":"Test"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/","text":"\u6bd4\u8f03\u9762\u5411 Unittest Pytest \u5165\u9580\u96e3\u5ea6 \u9700\u8981\u5b78\u7fd2 testrunner\u3001testsuite\u3001testcase \u7b49\u6982\u5ff5\uff0c\u5c0d\u8c61\u5c0e\u5411\u77e5\u8b58\u8981\u6c42\u9ad8 \u96b1\u85cf\u4e86\u8a31\u591a\u8907\u96dc\u7d30\u7bc0\uff0c\u9069\u5408\u521d\u5b78\u8005\uff0c\u5165\u9580\u9580\u6abb\u66f4\u4f4e \u5c0d\u521d\u5b78\u8005\u9069\u5408\u5ea6 \u9069\u5408\u6709\u4e00\u5b9a Python \u7a0b\u5f0f\u57fa\u790e\u7684\u4eba \u5c0d\u7de8\u7a0b\u57fa\u790e\u5f31\u7684 Python \u958b\u767c\u8005\u66f4\u70ba\u9069\u5408 \u6e2c\u8a66\u53c3\u6578\u5316 \u9700\u624b\u52d5\u5be6\u73fe\u6e2c\u8a66\u53c3\u6578\u5316\uff0c\u9700\u64b0\u5beb\u66f4\u591a\u6a23\u677f\u4ee3\u78bc\u4f86\u652f\u63f4\u4e0d\u540c\u7684\u6e2c\u8a66\u5834\u666f\u3002 \u5167\u5efa\u6e2c\u8a66\u53c3\u6578\u5316\u652f\u63f4\uff0c\u53ef\u4f7f\u7528\u4e0d\u540c\u7684\u8f38\u5165\u6216\u914d\u7f6e\u4f86\u57f7\u884c\u540c\u4e00\u500b\u6e2c\u8a66\uff0c\u6e1b\u5c11\u91cd\u8907\u7a0b\u5f0f\u78bc\u3002 \u65b7\u8a00\u8655\u7406 \u65b7\u8a00\u65b9\u6cd5\u96d6\u7136\u5b8c\u6574\u4f46\u8a9e\u6cd5\u8f03\u70ba\u5197\u9577\uff0c\u932f\u8aa4\u8a0a\u606f\u4e0d\u5982 Pytest \u8a73\u7d30\u3002 \u63d0\u4f9b\u66f4\u5177\u8868\u9054\u529b\u4e14\u9748\u6d3b\u7684\u65b7\u8a00\u8655\u7406\uff0c assert \u8a9e\u53e5\u652f\u63f4\u66f4\u8a73\u7d30\u7684\u932f\u8aa4\u8a0a\u606f\uff0c\u6709\u52a9\u65bc\u8a3a\u65b7\u554f\u984c\u3002 \u751f\u614b\u7cfb\u7d71\u8207\u793e\u7fa4\u652f\u6301 \u793e\u7fa4\u6d3b\u8e8d\u5ea6\u4e00\u822c \u751f\u614b\u7cfb\u7d71\u8c50\u5bcc\uff0c\u63d2\u4ef6\u6578\u91cf\u773e\u591a\uff0c\u793e\u7fa4\u6d3b\u8e8d\u5ea6\u9ad8\uff0c\u6301\u7e8c\u7dad\u8b77 \u64f4\u5c55\u6027\u8207\u63d2\u4ef6\u6578\u91cf \u63d2\u4ef6\u652f\u6301\u6709\u9650 \u63d2\u4ef6\u8d85\u904e 300 \u500b\uff0c\u529f\u80fd\u64f4\u5c55\u6027\u5f37","title":"Home"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/","text":"pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7) \u57fa\u672c\u64cd\u4f5c \u5b78\u7fd2 pytest \u53ef\u4ee5\u5927\u5e45\u63d0\u5347\u7de8\u5beb\u55ae\u5143\u6e2c\u8a66\u7684\u6548\u7387\uff0c\u4e26\u8f15\u9b06\u6574\u5408\u81f3 CI/CD \u5de5\u4f5c\u6d41\u7a0b\u4e2d\u3002\u5efa\u8b70\u5f9e\u7c21\u55ae\u7684\u6e2c\u8a66\u958b\u59cb\uff0c\u9010\u6b65\u6df1\u5165\u63a2\u7d22 pytest \u7684\u5404\u7a2e\u9032\u968e\u529f\u80fd\u3002 1. \u5b89\u88dd pytest \u5728 Python \u4e2d\u4f7f\u7528 pytest \u4e4b\u524d\uff0c\u5fc5\u9808\u5148\u5b89\u88dd\u5b83\u3002\u53ef\u4ee5\u901a\u904e pip \u4f86\u5b89\u88dd\uff1a pip install pytest 2. \u64b0\u5beb\u4e00\u500b\u7c21\u55ae\u7684\u6e2c\u8a66\u6848\u4f8b pytest \u53ef\u4ee5\u8b93\u4f60\u8f15\u9b06\u64b0\u5beb\u6e2c\u8a66\u6848\u4f8b\u3002\u5047\u8a2d\u6709\u4e00\u500b\u540d\u70ba math_func.py \u7684\u6a94\u6848\uff0c\u5176\u4e2d\u6709\u4e00\u500b\u7c21\u55ae\u7684\u51fd\u6578\uff1a # math_func.py def add ( x , y ): return x + y \u53ef\u4ee5\u64b0\u5beb\u4e00\u500b\u6e2c\u8a66\u6a94\u6848\uff0c\u4f8b\u5982 test_math_func.py\uff1a # test_math_func.py from math_func import add def test_add (): assert add ( 1 , 2 ) == 3 assert add ( 0 , 0 ) == 0 assert add ( - 1 , 1 ) == 0 3. \u57f7\u884c\u6e2c\u8a66 \u5728\u5c08\u6848\u7684\u6839\u76ee\u9304\u4e0b\u57f7\u884c pytest\uff0c\u5176\u4e2d -v \u8868\u793a\u8a73\u7d30\u6a21\u5f0f\uff0c\u986f\u793a\u6bcf\u500b\u6e2c\u8a66\u6848\u4f8b\u7684\u7d50\u679c\u3002 pytest - v pytest \u6703\u81ea\u52d5\u5075\u6e2c\u4ee5 test_ \u958b\u982d\u7684\u6a94\u6848\u4ee5\u53ca\u4ee5 test_ \u958b\u982d\u7684\u51fd\u6578\u4e26\u57f7\u884c\u5b83\u5011\u3002\u7d50\u679c\u6703\u8a73\u7d30\u5730\u986f\u793a\u6e2c\u8a66\u904e\u7a0b\u8207\u7d50\u679c\u3002 pytest \u6703\u81ea\u52d5\u89e3\u6790\u932f\u8aa4\u8a0a\u606f\uff0c\u4f7f\u5f97\u6e2c\u8a66\u5931\u6557\u6642\u63d0\u4f9b\u66f4\u5177\u53ef\u8b80\u6027\u7684\u8f38\u51fa\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u624b\u52d5\u52a0\u5165\u4e00\u500b\u5931\u6557\u7684\u6e2c\u8a66\uff0cpytest \u6703\u6e05\u695a\u544a\u8a34\u4f60\u9810\u671f\u503c\u548c\u5be6\u969b\u7d50\u679c\u7684\u5dee\u7570\u3002 def test_add_fail (): assert add ( 1 , 2 ) == 0 \u63a5\u8457\u5728\u8a72\u76ee\u9304\u4e0b\u57f7\u884c pytest -v \u5f8c\u5373\u53ef\u770b\u5230\u9019\u500b\u6e2c\u8a66\u9805\u76ee\u6709\u7d05\u8272\u7684 fail\u3002 pytest \u5e38\u7528\u6307\u4ee4\u9078\u9805 \u9078\u9805 \u8aaa\u660e \u7528\u6cd5\u7bc4\u4f8b -v \u8a73\u7d30\u6a21\u5f0f\uff0c\u986f\u793a\u6bcf\u500b\u6e2c\u8a66\u6848\u4f8b\u7684\u7d50\u679c pytest -v -s \u986f\u793a\u6e2c\u8a66\u904e\u7a0b\u4e2d\u7684\u6a19\u6e96\u8f38\u51fa\uff0c\u5982 print() \u5167\u5bb9 pytest -s -k <expression> \u50c5\u904b\u884c\u7b26\u5408\u689d\u4ef6\u7684\u6e2c\u8a66\u6848\u4f8b pytest -k \"test_function_name\" -m <mark> \u50c5\u904b\u884c\u7279\u5b9a\u6a19\u8a18\u7684\u6e2c\u8a66\u6848\u4f8b pytest -m \"slow\" -x \u9996\u6b21\u6e2c\u8a66\u5931\u6557\u6642\u505c\u6b62\u6e2c\u8a66\u57f7\u884c pytest -x --tb=short \u7e2e\u77ed\u932f\u8aa4\u7684 traceback \u8a0a\u606f\uff0c\u8b93\u5831\u544a\u66f4\u7c21\u6f54 pytest --tb=short --maxfail=<num> \u9047\u5230\u6307\u5b9a\u6578\u91cf\u7684\u6e2c\u8a66\u5931\u6557\u5f8c\u505c\u6b62\u57f7\u884c\u6e2c\u8a66 pytest --maxfail=2 --html=<file> \u751f\u6210 HTML \u683c\u5f0f\u7684\u6e2c\u8a66\u5831\u544a\uff08\u9700\u8981 pytest-html \u63d2\u4ef6\uff09 pytest --html=report.html --junitxml=<file> \u751f\u6210 JUnit XML \u683c\u5f0f\u7684\u6e2c\u8a66\u5831\u544a pytest --junitxml=report.xml --durations=<num> \u5217\u51fa\u904b\u884c\u6642\u9593\u6700\u9577\u7684 <num> \u500b\u6e2c\u8a66\u6848\u4f8b pytest --durations=5 --cov=<module_or_path> \u751f\u6210\u7a0b\u5f0f\u78bc\u8986\u84cb\u7387\u5831\u544a\uff08\u9700\u8981 pytest-cov \u63d2\u4ef6\uff09 pytest --cov=my_module --reuse-db \u91cd\u65b0\u4f7f\u7528\u4e0a\u6b21\u7684\u8cc7\u6599\u5eab\u6e2c\u8a66\u74b0\u5883\uff08\u9069\u7528\u65bc\u6e2c\u8a66\u8cc7\u6599\u5eab\u74b0\u5883\uff09 pytest --reuse-db \u57f7\u884c\u6e2c\u8a66\u4e26\u751f\u6210 HTML \u5831\u544a \u6211\u5011\u53ef\u4ee5\u5c07\u6e2c\u8a66\u7d50\u679c\u76f4\u63a5\u7522\u751f report.html\uff0c\u53ea\u9700\u8981\u5b89\u88dd pytest-html \u5957\u4ef6\u3002 pip install pytest-html \u63a5\u8457\u57f7\u884c\u6e2c\u8a66\u4e26\u751f\u6210 HTML \u5831\u544a\uff0c\u4f7f\u7528 --html \u9078\u9805\u4f86\u6307\u5b9a\u5831\u544a\u7684\u6a94\u6848\u540d\u7a31\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u540c\u6642\u642d\u914d\u4e0a\u65b9\u8868\u683c\u4e2d\u7684\u5176\u4ed6\u5e38\u7528\u6307\u4ee4\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u66f4\u9748\u6d3b\u5730\u63a7\u5236\u6e2c\u8a66\u6d41\u7a0b\u3002 pytest -v --html = report.html \u9019\u6a23\u6e2c\u8a66\u5b8c\u6210\u5f8c\uff0cpytest \u6703\u5728\u5c08\u6848\u76ee\u9304\u4e0b\u751f\u6210\u4e00\u500b report.html\uff0c\u88e1\u9762\u5305\u542b\u6e2c\u8a66\u7d50\u679c\u7684\u8a73\u7d30\u5831\u544a\u3002 \u4e0a\u8ff0\u65b9\u6cd5\u751f\u6210\u7684\u5831\u544a\uff0cCSS \u662f\u7368\u7acb\u7684\uff0c\u7576\u5206\u4eab\u5831\u544a\u6642\u6a23\u5f0f\u53ef\u80fd\u6703\u907a\u5931\u3002\u70ba\u4e86\u66f4\u597d\u5730\u5206\u4eab\u4e26\u901a\u904e\u90f5\u4ef6\u5c55\u793a\u5831\u544a\uff0c\u53ef\u4ee5\u5c07 CSS \u6a23\u5f0f\u5408\u4f75\u5230 HTML \u4e2d\u3002 pytest --html = report.html --self-contained-html \u4f7f\u7528 pytest \u7684\u9032\u968e\u529f\u80fd pytest \u5e38\u7528\u6a19\u8a18 \u6a19\u8a18 \u8aaa\u660e \u7528\u6cd5\u7bc4\u4f8b @pytest.mark.skip \u8df3\u904e\u6e2c\u8a66\u6848\u4f8b @pytest.mark.skip(reason=\"Not implemented\") @pytest.mark.xfail \u9810\u671f\u5931\u6557\u7684\u6e2c\u8a66\u6848\u4f8b @pytest.mark.xfail(raises=ZeroDivisionError) @pytest.mark.parametrize \u53c3\u6578\u5316\u6e2c\u8a66\uff0c\u5141\u8a31\u4f7f\u7528\u591a\u7d44\u53c3\u6578\u6e2c\u8a66\u540c\u4e00\u51fd\u6578 @pytest.mark.parametrize(\"a,b\", [(1, 2), (3, 4)]) @pytest.fixture \u5b9a\u7fa9\u6e2c\u8a66\u524d\u7f6e\u74b0\u5883 @pytest.fixture (1) pytest.fixture fixture \u53ef\u4ee5\u7528\u4f86\u8a2d\u7f6e\u6e2c\u8a66\u524d\u7684\u6e96\u5099\u6b65\u9a5f\uff0c\u4f8b\u5982\u521d\u59cb\u5316\u8cc7\u6599\u5eab\u6216\u5efa\u7acb\u7269\u4ef6\uff1a import pytest @pytest . fixture def sample_data (): return { \"key\" : \"value\" } def test_sample_data ( sample_data ): assert sample_data [ \"key\" ] == \"value\" (2) \u6e2c\u8a66\u591a\u7d44\u8f38\u5165 \u53ef\u4ee5\u4f7f\u7528 pytest.mark.parametrize \u4f86\u6e2c\u8a66\u591a\u7d44\u8f38\u5165\uff1a import pytest from math_func import add @pytest . mark . parametrize ( \"a, b, expected\" , [( 1 , 2 , 3 ), ( 0 , 0 , 0 ), ( - 1 , 1 , 0 )]) def test_add_multi ( a , b , expected ): assert add ( a , b ) == expected","title":"pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#pytest","text":"","title":"pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#_1","text":"\u5b78\u7fd2 pytest \u53ef\u4ee5\u5927\u5e45\u63d0\u5347\u7de8\u5beb\u55ae\u5143\u6e2c\u8a66\u7684\u6548\u7387\uff0c\u4e26\u8f15\u9b06\u6574\u5408\u81f3 CI/CD \u5de5\u4f5c\u6d41\u7a0b\u4e2d\u3002\u5efa\u8b70\u5f9e\u7c21\u55ae\u7684\u6e2c\u8a66\u958b\u59cb\uff0c\u9010\u6b65\u6df1\u5165\u63a2\u7d22 pytest \u7684\u5404\u7a2e\u9032\u968e\u529f\u80fd\u3002","title":"\u57fa\u672c\u64cd\u4f5c"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#1-pytest","text":"\u5728 Python \u4e2d\u4f7f\u7528 pytest \u4e4b\u524d\uff0c\u5fc5\u9808\u5148\u5b89\u88dd\u5b83\u3002\u53ef\u4ee5\u901a\u904e pip \u4f86\u5b89\u88dd\uff1a pip install pytest","title":"1. \u5b89\u88dd pytest"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#2","text":"pytest \u53ef\u4ee5\u8b93\u4f60\u8f15\u9b06\u64b0\u5beb\u6e2c\u8a66\u6848\u4f8b\u3002\u5047\u8a2d\u6709\u4e00\u500b\u540d\u70ba math_func.py \u7684\u6a94\u6848\uff0c\u5176\u4e2d\u6709\u4e00\u500b\u7c21\u55ae\u7684\u51fd\u6578\uff1a # math_func.py def add ( x , y ): return x + y \u53ef\u4ee5\u64b0\u5beb\u4e00\u500b\u6e2c\u8a66\u6a94\u6848\uff0c\u4f8b\u5982 test_math_func.py\uff1a # test_math_func.py from math_func import add def test_add (): assert add ( 1 , 2 ) == 3 assert add ( 0 , 0 ) == 0 assert add ( - 1 , 1 ) == 0","title":"2. \u64b0\u5beb\u4e00\u500b\u7c21\u55ae\u7684\u6e2c\u8a66\u6848\u4f8b"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#3","text":"\u5728\u5c08\u6848\u7684\u6839\u76ee\u9304\u4e0b\u57f7\u884c pytest\uff0c\u5176\u4e2d -v \u8868\u793a\u8a73\u7d30\u6a21\u5f0f\uff0c\u986f\u793a\u6bcf\u500b\u6e2c\u8a66\u6848\u4f8b\u7684\u7d50\u679c\u3002 pytest - v pytest \u6703\u81ea\u52d5\u5075\u6e2c\u4ee5 test_ \u958b\u982d\u7684\u6a94\u6848\u4ee5\u53ca\u4ee5 test_ \u958b\u982d\u7684\u51fd\u6578\u4e26\u57f7\u884c\u5b83\u5011\u3002\u7d50\u679c\u6703\u8a73\u7d30\u5730\u986f\u793a\u6e2c\u8a66\u904e\u7a0b\u8207\u7d50\u679c\u3002 pytest \u6703\u81ea\u52d5\u89e3\u6790\u932f\u8aa4\u8a0a\u606f\uff0c\u4f7f\u5f97\u6e2c\u8a66\u5931\u6557\u6642\u63d0\u4f9b\u66f4\u5177\u53ef\u8b80\u6027\u7684\u8f38\u51fa\u3002\u4ee5\u4e0b\u7bc4\u4f8b\u624b\u52d5\u52a0\u5165\u4e00\u500b\u5931\u6557\u7684\u6e2c\u8a66\uff0cpytest \u6703\u6e05\u695a\u544a\u8a34\u4f60\u9810\u671f\u503c\u548c\u5be6\u969b\u7d50\u679c\u7684\u5dee\u7570\u3002 def test_add_fail (): assert add ( 1 , 2 ) == 0 \u63a5\u8457\u5728\u8a72\u76ee\u9304\u4e0b\u57f7\u884c pytest -v \u5f8c\u5373\u53ef\u770b\u5230\u9019\u500b\u6e2c\u8a66\u9805\u76ee\u6709\u7d05\u8272\u7684 fail\u3002","title":"3. \u57f7\u884c\u6e2c\u8a66"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#pytest_1","text":"\u9078\u9805 \u8aaa\u660e \u7528\u6cd5\u7bc4\u4f8b -v \u8a73\u7d30\u6a21\u5f0f\uff0c\u986f\u793a\u6bcf\u500b\u6e2c\u8a66\u6848\u4f8b\u7684\u7d50\u679c pytest -v -s \u986f\u793a\u6e2c\u8a66\u904e\u7a0b\u4e2d\u7684\u6a19\u6e96\u8f38\u51fa\uff0c\u5982 print() \u5167\u5bb9 pytest -s -k <expression> \u50c5\u904b\u884c\u7b26\u5408\u689d\u4ef6\u7684\u6e2c\u8a66\u6848\u4f8b pytest -k \"test_function_name\" -m <mark> \u50c5\u904b\u884c\u7279\u5b9a\u6a19\u8a18\u7684\u6e2c\u8a66\u6848\u4f8b pytest -m \"slow\" -x \u9996\u6b21\u6e2c\u8a66\u5931\u6557\u6642\u505c\u6b62\u6e2c\u8a66\u57f7\u884c pytest -x --tb=short \u7e2e\u77ed\u932f\u8aa4\u7684 traceback \u8a0a\u606f\uff0c\u8b93\u5831\u544a\u66f4\u7c21\u6f54 pytest --tb=short --maxfail=<num> \u9047\u5230\u6307\u5b9a\u6578\u91cf\u7684\u6e2c\u8a66\u5931\u6557\u5f8c\u505c\u6b62\u57f7\u884c\u6e2c\u8a66 pytest --maxfail=2 --html=<file> \u751f\u6210 HTML \u683c\u5f0f\u7684\u6e2c\u8a66\u5831\u544a\uff08\u9700\u8981 pytest-html \u63d2\u4ef6\uff09 pytest --html=report.html --junitxml=<file> \u751f\u6210 JUnit XML \u683c\u5f0f\u7684\u6e2c\u8a66\u5831\u544a pytest --junitxml=report.xml --durations=<num> \u5217\u51fa\u904b\u884c\u6642\u9593\u6700\u9577\u7684 <num> \u500b\u6e2c\u8a66\u6848\u4f8b pytest --durations=5 --cov=<module_or_path> \u751f\u6210\u7a0b\u5f0f\u78bc\u8986\u84cb\u7387\u5831\u544a\uff08\u9700\u8981 pytest-cov \u63d2\u4ef6\uff09 pytest --cov=my_module --reuse-db \u91cd\u65b0\u4f7f\u7528\u4e0a\u6b21\u7684\u8cc7\u6599\u5eab\u6e2c\u8a66\u74b0\u5883\uff08\u9069\u7528\u65bc\u6e2c\u8a66\u8cc7\u6599\u5eab\u74b0\u5883\uff09 pytest --reuse-db","title":"pytest \u5e38\u7528\u6307\u4ee4\u9078\u9805"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#html","text":"\u6211\u5011\u53ef\u4ee5\u5c07\u6e2c\u8a66\u7d50\u679c\u76f4\u63a5\u7522\u751f report.html\uff0c\u53ea\u9700\u8981\u5b89\u88dd pytest-html \u5957\u4ef6\u3002 pip install pytest-html \u63a5\u8457\u57f7\u884c\u6e2c\u8a66\u4e26\u751f\u6210 HTML \u5831\u544a\uff0c\u4f7f\u7528 --html \u9078\u9805\u4f86\u6307\u5b9a\u5831\u544a\u7684\u6a94\u6848\u540d\u7a31\u3002\u6b64\u5916\uff0c\u4e5f\u53ef\u4ee5\u540c\u6642\u642d\u914d\u4e0a\u65b9\u8868\u683c\u4e2d\u7684\u5176\u4ed6\u5e38\u7528\u6307\u4ee4\u4e00\u8d77\u4f7f\u7528\uff0c\u4ee5\u66f4\u9748\u6d3b\u5730\u63a7\u5236\u6e2c\u8a66\u6d41\u7a0b\u3002 pytest -v --html = report.html \u9019\u6a23\u6e2c\u8a66\u5b8c\u6210\u5f8c\uff0cpytest \u6703\u5728\u5c08\u6848\u76ee\u9304\u4e0b\u751f\u6210\u4e00\u500b report.html\uff0c\u88e1\u9762\u5305\u542b\u6e2c\u8a66\u7d50\u679c\u7684\u8a73\u7d30\u5831\u544a\u3002 \u4e0a\u8ff0\u65b9\u6cd5\u751f\u6210\u7684\u5831\u544a\uff0cCSS \u662f\u7368\u7acb\u7684\uff0c\u7576\u5206\u4eab\u5831\u544a\u6642\u6a23\u5f0f\u53ef\u80fd\u6703\u907a\u5931\u3002\u70ba\u4e86\u66f4\u597d\u5730\u5206\u4eab\u4e26\u901a\u904e\u90f5\u4ef6\u5c55\u793a\u5831\u544a\uff0c\u53ef\u4ee5\u5c07 CSS \u6a23\u5f0f\u5408\u4f75\u5230 HTML \u4e2d\u3002 pytest --html = report.html --self-contained-html","title":"\u57f7\u884c\u6e2c\u8a66\u4e26\u751f\u6210 HTML \u5831\u544a"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#pytest_2","text":"pytest \u5e38\u7528\u6a19\u8a18 \u6a19\u8a18 \u8aaa\u660e \u7528\u6cd5\u7bc4\u4f8b @pytest.mark.skip \u8df3\u904e\u6e2c\u8a66\u6848\u4f8b @pytest.mark.skip(reason=\"Not implemented\") @pytest.mark.xfail \u9810\u671f\u5931\u6557\u7684\u6e2c\u8a66\u6848\u4f8b @pytest.mark.xfail(raises=ZeroDivisionError) @pytest.mark.parametrize \u53c3\u6578\u5316\u6e2c\u8a66\uff0c\u5141\u8a31\u4f7f\u7528\u591a\u7d44\u53c3\u6578\u6e2c\u8a66\u540c\u4e00\u51fd\u6578 @pytest.mark.parametrize(\"a,b\", [(1, 2), (3, 4)]) @pytest.fixture \u5b9a\u7fa9\u6e2c\u8a66\u524d\u7f6e\u74b0\u5883 @pytest.fixture","title":"\u4f7f\u7528 pytest \u7684\u9032\u968e\u529f\u80fd"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#1-pytestfixture","text":"fixture \u53ef\u4ee5\u7528\u4f86\u8a2d\u7f6e\u6e2c\u8a66\u524d\u7684\u6e96\u5099\u6b65\u9a5f\uff0c\u4f8b\u5982\u521d\u59cb\u5316\u8cc7\u6599\u5eab\u6216\u5efa\u7acb\u7269\u4ef6\uff1a import pytest @pytest . fixture def sample_data (): return { \"key\" : \"value\" } def test_sample_data ( sample_data ): assert sample_data [ \"key\" ] == \"value\"","title":"(1)  pytest.fixture"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.1pytest \u5b78\u7fd2\u6307\u5357(\u57fa\u790e\u7bc7)/#2_1","text":"\u53ef\u4ee5\u4f7f\u7528 pytest.mark.parametrize \u4f86\u6e2c\u8a66\u591a\u7d44\u8f38\u5165\uff1a import pytest from math_func import add @pytest . mark . parametrize ( \"a, b, expected\" , [( 1 , 2 , 3 ), ( 0 , 0 , 0 ), ( - 1 , 1 , 0 )]) def test_add_multi ( a , b , expected ): assert add ( a , b ) == expected","title":"(2) \u6e2c\u8a66\u591a\u7d44\u8f38\u5165"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/","text":"pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7) \u63a5\u4e0b\u4f86\u7684\u6559\u5b78\u4e2d\uff0c\u6211\u5011\u5c07\u8a0e\u8ad6 pytest \u7684\u9032\u968e\u529f\u80fd\u3002\u6211\u5011\u9996\u5148\u8a2d\u7f6e\u4e86\u4e00\u500b\u7c21\u55ae\u7684\u9805\u76ee\u67b6\u69cb\uff0cpytest-ch2 \u5c08\u6848\u5305\u542b\u4e00\u500b libs \u8cc7\u6599\u593e\uff0c\u88e1\u9762\u6709\u4e00\u500b module.py \u6a94\u6848\uff0c\u4ee5\u53ca\u4e00\u500b tests \u8cc7\u6599\u593e\uff0c\u7528\u4f86\u653e\u7f6e\u6e2c\u8a66\u6a94\u6848 test_module.py\u3002 \u5c08\u6848\u7d50\u69cb\u5982\u4e0b\uff1a pytest-ch2 \u2502 \u251c\u2500libs \u2502 module.py \u2502 \u2514\u2500tests test_module.py \u5efa\u7acb\u4e00\u500b\u7d50\u69cb\u5316\u7684\u6e2c\u8a66\u5c08\u6848 \u5047\u8a2d libs/module.py \u5305\u542b\u4e00\u500b\u7c21\u55ae\u7684\u51fd\u6578\uff0c\u4f8b\u5982\uff1a # libs/module.py def add ( a , b ): return a + b \u63a5\u8457\u5728 tests/test_module.py \u4e2d\u70ba\u9019\u500b add \u51fd\u6578\u64b0\u5beb\u55ae\u5143\u6e2c\u8a66\u3002 # tests/test_module.py import pytest from libs.module import add @pytest . mark . parametrize ( \"a, b, expected\" , [ ( 1 , 2 , 3 ), ( 0 , 0 , 0 ), ( - 1 , - 1 , - 2 ), ( - 1 , 2 , 1 ) ]) def test_add ( a , b , expected ): assert add ( a , b ) == expected \u5efa\u7acb\u5c08\u6848\u8a2d\u5b9a\u6a94 \u7531\u65bc\u6211\u5011\u6703\u532f\u5165\u5176\u4ed6\u8cc7\u6599\u593e\u4e2d\u7684\u529f\u80fd\uff0c\u5982\u679c\u6c92\u6709\u6b63\u78ba\u914d\u7f6e\u5c08\u6848\u8def\u5f91\uff0c\u53ef\u80fd\u6703\u9047\u5230 ModuleNotFoundError \uff0c\u7121\u6cd5\u627e\u5230\u5c0d\u61c9\u7684\u6a21\u7d44\u3002\u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u6211\u5011\u53ef\u4ee5\u5efa\u7acb\u4e00\u500b\u8a2d\u5b9a\u6a94\uff0c\u544a\u8a34 pytest \u61c9\u8a72\u641c\u5c0b\u7684\u8def\u5f91\u3002\u4f60\u53ef\u4ee5\u5728\u5c08\u6848\u7684\u6839\u76ee\u9304\u4e0b\u5efa\u7acb pytest.ini \u6a94\u6848\uff0c\u4e26\u52a0\u5165\u4ee5\u4e0b\u5167\u5bb9\uff1a [pytest] pythonpath = . \u57f7\u884c\u6e2c\u8a66 \u5728\u5c08\u6848\u7684\u6839\u76ee\u9304\u4e0b\u57f7\u884c pytest\uff0c\u5176\u4e2d -v \u8868\u793a\u8a73\u7d30\u6a21\u5f0f\uff0c\u986f\u793a\u6bcf\u500b\u6e2c\u8a66\u6848\u4f8b\u7684\u7d50\u679c\u3002 pytest - v pytest.ini \u7684\u57fa\u672c\u529f\u80fd pytest.ini \u662f pytest \u7684\u914d\u7f6e\u6a94\u6848\uff0c\u901a\u5e38\u7528\u4f86\u70ba pytest \u6e2c\u8a66\u74b0\u5883\u8a2d\u5b9a\u5168\u57df\u7684\u9078\u9805\u548c\u53c3\u6578\u3002\u9019\u500b\u6a94\u6848\u7684\u4f5c\u7528\u662f\u8b93\u4f60\u53ef\u4ee5\u5728\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u5728\u547d\u4ee4\u5217\u4e0a\u6307\u5b9a\u53c3\u6578\u7684\u60c5\u6cc1\u4e0b\uff0c\u914d\u7f6e pytest \u7684\u884c\u70ba\u3002 1. \u4fee\u6539\u6e2c\u8a66\u8def\u5f91 \uff1a\u8a2d\u5b9a pytest \u61c9\u8a72\u5f9e\u54ea\u88e1\u958b\u59cb\u5c0b\u627e\u6e2c\u8a66\u6a94\u6848\u3002 2. \u8a2d\u5b9a pytest \u7684\u9810\u8a2d\u9078\u9805 \uff1a\u53ef\u4ee5\u8a2d\u5b9a\u5982\u555f\u52d5 verbose \u6a21\u5f0f\u3001\u8a2d\u7f6e\u6e2c\u8a66\u7684\u8f38\u51fa\u683c\u5f0f\u7b49\u3002 3. \u8a2d\u5b9a\u5ffd\u7565\u7684\u6a94\u6848 \uff1a\u53ef\u4ee5\u6307\u5b9a\u54ea\u4e9b\u6a94\u6848\u6216\u8cc7\u6599\u593e\u61c9\u88ab\u5ffd\u7565\uff0c\u907f\u514d pytest \u641c\u5c0b\u9019\u4e9b\u4f4d\u7f6e\u3002 4. \u8a2d\u5b9a\u81ea\u8a02\u7684\u6e2c\u8a66\u6a19\u7c64 \uff1a\u53ef\u4ee5\u70ba\u6e2c\u8a66\u6a19\u8a18\u4e0d\u540c\u7684\u6a19\u7c64\uff0c\u4e26\u6839\u64da\u6a19\u7c64\u4f86\u57f7\u884c\u6e2c\u8a66\u3002 \u57fa\u672c\u7684 pytest.ini \u7d50\u69cb \u683c\u5f0f\u5f88\u7c21\u55ae\uff0c\u5b83\u4f7f\u7528\u985e\u4f3c ini \u6a94\u6848\u7684\u683c\u5f0f\u3002\u4ee5\u4e0b\u662f\u4e00\u500b\u57fa\u672c\u7bc4\u4f8b\uff1a [pytest] addopts = -v --tb=short # \u8a2d\u7f6e\u9ed8\u8a8d\u9078\u9805\uff0c\u5982 verbose \u6a21\u5f0f\u548c\u7c21\u5316\u7684 traceback \u8f38\u51fa testpaths = tests # \u6307\u5b9a\u6e2c\u8a66\u6a94\u6848\u7684\u8def\u5f91\uff0c\u9019\u88e1\u662f tests \u8cc7\u6599\u593e python_files = test_*.py # \u6307\u5b9a pytest \u641c\u7d22\u7684\u6e2c\u8a66\u6a94\u6848\u540d\u7a31\u6a21\u5f0f python_classes = Test* # \u6307\u5b9a pytest \u641c\u7d22\u7684\u6e2c\u8a66\u985e\u5225\u540d\u7a31\u6a21\u5f0f python_functions = test_* # \u6307\u5b9a pytest \u641c\u7d22\u7684\u6e2c\u8a66\u51fd\u6578\u540d\u7a31\u6a21\u5f0f markers = slow : \u6e2c\u8a66\u904b\u884c\u8f03\u6162\u7684\u6a19\u8a18 integration : \u96c6\u6210\u6e2c\u8a66\u6a19\u8a18 pytest.ini \u7684\u5e38\u898b\u8a2d\u7f6e\u9078\u9805 1.addopts \u9019\u500b\u9078\u9805\u5141\u8a31\u4f60\u5728\u904b\u884c pytest \u6642\u6dfb\u52a0\u9ed8\u8a8d\u7684\u9078\u9805\u3002\u4f8b\u5982\uff0c-v \u7528\u4f86\u958b\u555f\u8a73\u7d30\u6a21\u5f0f\uff0c--tb=short \u7528\u4f86\u7c21\u5316\u932f\u8aa4\u8a0a\u606f\u7684 traceback \u8f38\u51fa\u3002 addopts = -v --tb=short 2.testpaths \u6307\u5b9a pytest \u641c\u7d22\u6e2c\u8a66\u6a94\u6848\u7684\u8def\u5f91\u3002\u9019\u53ef\u4ee5\u7528\u4f86\u544a\u8a34 pytest \u53ea\u5728\u7279\u5b9a\u8cc7\u6599\u593e\u4e0b\u5c0b\u627e\u6e2c\u8a66\u6a94\u6848\u3002 testpaths = tests 3.python_files \u63a7\u5236 pytest \u61c9\u8a72\u5c0b\u627e\u54ea\u4e9b\u6a94\u6848\u4f86\u9032\u884c\u6e2c\u8a66\u3002\u9810\u8a2d pytest \u6703\u5c0b\u627e\u6a94\u540d\u4ee5 test_ \u958b\u982d\u6216\u7d50\u5c3e\u7684\u6a94\u6848\u3002 python_files = test_*.py 4.python_classes \u63a7\u5236 pytest \u61c9\u8a72\u641c\u5c0b\u54ea\u4e9b\u985e\u5225\u4f86\u4f5c\u70ba\u6e2c\u8a66\u985e\u5225\u3002\u9810\u8a2d pytest \u6703\u5c0b\u627e\u540d\u7a31\u4ee5 Test \u958b\u982d\u7684\u985e\u5225\u3002 python_classes = Test* 5.python_functions \u63a7\u5236 pytest \u61c9\u8a72\u641c\u5c0b\u54ea\u4e9b\u51fd\u6578\u4f86\u4f5c\u70ba\u6e2c\u8a66\u51fd\u6578\u3002\u9810\u8a2d pytest \u6703\u5c0b\u627e\u540d\u7a31\u4ee5 test_ \u958b\u982d\u7684\u51fd\u6578\u3002 python_functions = test_* 6.markers \u81ea\u8a02\u6a19\u8a18\u4f86\u6a19\u7c64\u7279\u5b9a\u7684\u6e2c\u8a66\u6848\u4f8b\uff0c\u5141\u8a31\u4f60\u6839\u64da\u6a19\u7c64\u4f86\u57f7\u884c\u6e2c\u8a66\u3002\u4f8b\u5982\uff0c\u5c07\u904b\u884c\u8f03\u6162\u7684\u6e2c\u8a66\u6a19\u8a18\u70ba slow\uff0c\u5728\u57f7\u884c\u6e2c\u8a66\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528 pytest -m slow \u4f86\u9078\u64c7\u53ea\u57f7\u884c\u9019\u985e\u6a19\u8a18\u7684\u6e2c\u8a66\u3002 markers = slow : \u6e2c\u8a66\u904b\u884c\u8f03\u6162\u7684\u6a19\u8a18 integration : \u96c6\u6210\u6e2c\u8a66\u6a19\u8a18 \u64b0\u5beb pytest.ini \u7684\u6280\u5de7 1.\u4f7f\u7528\u81ea\u8a02\u6a19\u8a18\u9032\u884c\u5206\u985e \uff1a \u7576\u5c08\u6848\u898f\u6a21\u8f03\u5927\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u8a02\u6a19\u8a18\u4f86\u5c07\u6e2c\u8a66\u5206\u985e\uff0c\u4f8b\u5982\u6a19\u8a18\u67d0\u4e9b\u6e2c\u8a66\u70ba \"\u6162\u901f\u6e2c\u8a66\" \u6216 \"\u96c6\u6210\u6e2c\u8a66\"\u3002\u9019\u6a23\u4f60\u5c31\u53ef\u4ee5\u6839\u64da\u6a19\u7c64\u4f86\u57f7\u884c\u6e2c\u8a66\uff0c\u7bc0\u7701\u6642\u9593\u3002 2.\u7c21\u5316\u547d\u4ee4\u884c\u9078\u9805 \uff1a \u900f\u904e addopts \u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u8a2d\u5b9a\u9ed8\u8a8d\u9078\u9805\uff0c\u9019\u6a23\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u5728\u547d\u4ee4\u5217\u4e0a\u8f38\u5165\u76f8\u540c\u7684\u9078\u9805\uff0c\u8b93\u6e2c\u8a66\u904b\u884c\u66f4\u65b9\u4fbf\u3002 3.\u8abf\u6574\u6e2c\u8a66\u8def\u5f91\u548c\u547d\u540d\u898f\u5247 \uff1a \u5982\u679c\u4f60\u7684\u5c08\u6848\u67b6\u69cb\u4e0d\u7b26\u5408 pytest \u7684\u9810\u8a2d\u898f\u5247\uff08\u4f8b\u5982\uff0c\u6e2c\u8a66\u6a94\u6848\u4e0d\u4ee5 test_ \u958b\u982d\uff09\uff0c\u53ef\u4ee5\u901a\u904e python_files \u548c python_functions \u4f86\u5b9a\u5236\u6aa2\u6e2c\u898f\u5247\u3002","title":"pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#pytest","text":"\u63a5\u4e0b\u4f86\u7684\u6559\u5b78\u4e2d\uff0c\u6211\u5011\u5c07\u8a0e\u8ad6 pytest \u7684\u9032\u968e\u529f\u80fd\u3002\u6211\u5011\u9996\u5148\u8a2d\u7f6e\u4e86\u4e00\u500b\u7c21\u55ae\u7684\u9805\u76ee\u67b6\u69cb\uff0cpytest-ch2 \u5c08\u6848\u5305\u542b\u4e00\u500b libs \u8cc7\u6599\u593e\uff0c\u88e1\u9762\u6709\u4e00\u500b module.py \u6a94\u6848\uff0c\u4ee5\u53ca\u4e00\u500b tests \u8cc7\u6599\u593e\uff0c\u7528\u4f86\u653e\u7f6e\u6e2c\u8a66\u6a94\u6848 test_module.py\u3002 \u5c08\u6848\u7d50\u69cb\u5982\u4e0b\uff1a pytest-ch2 \u2502 \u251c\u2500libs \u2502 module.py \u2502 \u2514\u2500tests test_module.py","title":"pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#_1","text":"\u5047\u8a2d libs/module.py \u5305\u542b\u4e00\u500b\u7c21\u55ae\u7684\u51fd\u6578\uff0c\u4f8b\u5982\uff1a # libs/module.py def add ( a , b ): return a + b \u63a5\u8457\u5728 tests/test_module.py \u4e2d\u70ba\u9019\u500b add \u51fd\u6578\u64b0\u5beb\u55ae\u5143\u6e2c\u8a66\u3002 # tests/test_module.py import pytest from libs.module import add @pytest . mark . parametrize ( \"a, b, expected\" , [ ( 1 , 2 , 3 ), ( 0 , 0 , 0 ), ( - 1 , - 1 , - 2 ), ( - 1 , 2 , 1 ) ]) def test_add ( a , b , expected ): assert add ( a , b ) == expected","title":"\u5efa\u7acb\u4e00\u500b\u7d50\u69cb\u5316\u7684\u6e2c\u8a66\u5c08\u6848"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#_2","text":"\u7531\u65bc\u6211\u5011\u6703\u532f\u5165\u5176\u4ed6\u8cc7\u6599\u593e\u4e2d\u7684\u529f\u80fd\uff0c\u5982\u679c\u6c92\u6709\u6b63\u78ba\u914d\u7f6e\u5c08\u6848\u8def\u5f91\uff0c\u53ef\u80fd\u6703\u9047\u5230 ModuleNotFoundError \uff0c\u7121\u6cd5\u627e\u5230\u5c0d\u61c9\u7684\u6a21\u7d44\u3002\u70ba\u4e86\u89e3\u6c7a\u9019\u500b\u554f\u984c\uff0c\u6211\u5011\u53ef\u4ee5\u5efa\u7acb\u4e00\u500b\u8a2d\u5b9a\u6a94\uff0c\u544a\u8a34 pytest \u61c9\u8a72\u641c\u5c0b\u7684\u8def\u5f91\u3002\u4f60\u53ef\u4ee5\u5728\u5c08\u6848\u7684\u6839\u76ee\u9304\u4e0b\u5efa\u7acb pytest.ini \u6a94\u6848\uff0c\u4e26\u52a0\u5165\u4ee5\u4e0b\u5167\u5bb9\uff1a [pytest] pythonpath = .","title":"\u5efa\u7acb\u5c08\u6848\u8a2d\u5b9a\u6a94"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#_3","text":"\u5728\u5c08\u6848\u7684\u6839\u76ee\u9304\u4e0b\u57f7\u884c pytest\uff0c\u5176\u4e2d -v \u8868\u793a\u8a73\u7d30\u6a21\u5f0f\uff0c\u986f\u793a\u6bcf\u500b\u6e2c\u8a66\u6848\u4f8b\u7684\u7d50\u679c\u3002 pytest - v","title":"\u57f7\u884c\u6e2c\u8a66"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#pytestini","text":"pytest.ini \u662f pytest \u7684\u914d\u7f6e\u6a94\u6848\uff0c\u901a\u5e38\u7528\u4f86\u70ba pytest \u6e2c\u8a66\u74b0\u5883\u8a2d\u5b9a\u5168\u57df\u7684\u9078\u9805\u548c\u53c3\u6578\u3002\u9019\u500b\u6a94\u6848\u7684\u4f5c\u7528\u662f\u8b93\u4f60\u53ef\u4ee5\u5728\u4e0d\u5fc5\u6bcf\u6b21\u90fd\u5728\u547d\u4ee4\u5217\u4e0a\u6307\u5b9a\u53c3\u6578\u7684\u60c5\u6cc1\u4e0b\uff0c\u914d\u7f6e pytest \u7684\u884c\u70ba\u3002 1. \u4fee\u6539\u6e2c\u8a66\u8def\u5f91 \uff1a\u8a2d\u5b9a pytest \u61c9\u8a72\u5f9e\u54ea\u88e1\u958b\u59cb\u5c0b\u627e\u6e2c\u8a66\u6a94\u6848\u3002 2. \u8a2d\u5b9a pytest \u7684\u9810\u8a2d\u9078\u9805 \uff1a\u53ef\u4ee5\u8a2d\u5b9a\u5982\u555f\u52d5 verbose \u6a21\u5f0f\u3001\u8a2d\u7f6e\u6e2c\u8a66\u7684\u8f38\u51fa\u683c\u5f0f\u7b49\u3002 3. \u8a2d\u5b9a\u5ffd\u7565\u7684\u6a94\u6848 \uff1a\u53ef\u4ee5\u6307\u5b9a\u54ea\u4e9b\u6a94\u6848\u6216\u8cc7\u6599\u593e\u61c9\u88ab\u5ffd\u7565\uff0c\u907f\u514d pytest \u641c\u5c0b\u9019\u4e9b\u4f4d\u7f6e\u3002 4. \u8a2d\u5b9a\u81ea\u8a02\u7684\u6e2c\u8a66\u6a19\u7c64 \uff1a\u53ef\u4ee5\u70ba\u6e2c\u8a66\u6a19\u8a18\u4e0d\u540c\u7684\u6a19\u7c64\uff0c\u4e26\u6839\u64da\u6a19\u7c64\u4f86\u57f7\u884c\u6e2c\u8a66\u3002","title":"pytest.ini \u7684\u57fa\u672c\u529f\u80fd"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#pytestini_1","text":"\u683c\u5f0f\u5f88\u7c21\u55ae\uff0c\u5b83\u4f7f\u7528\u985e\u4f3c ini \u6a94\u6848\u7684\u683c\u5f0f\u3002\u4ee5\u4e0b\u662f\u4e00\u500b\u57fa\u672c\u7bc4\u4f8b\uff1a [pytest] addopts = -v --tb=short # \u8a2d\u7f6e\u9ed8\u8a8d\u9078\u9805\uff0c\u5982 verbose \u6a21\u5f0f\u548c\u7c21\u5316\u7684 traceback \u8f38\u51fa testpaths = tests # \u6307\u5b9a\u6e2c\u8a66\u6a94\u6848\u7684\u8def\u5f91\uff0c\u9019\u88e1\u662f tests \u8cc7\u6599\u593e python_files = test_*.py # \u6307\u5b9a pytest \u641c\u7d22\u7684\u6e2c\u8a66\u6a94\u6848\u540d\u7a31\u6a21\u5f0f python_classes = Test* # \u6307\u5b9a pytest \u641c\u7d22\u7684\u6e2c\u8a66\u985e\u5225\u540d\u7a31\u6a21\u5f0f python_functions = test_* # \u6307\u5b9a pytest \u641c\u7d22\u7684\u6e2c\u8a66\u51fd\u6578\u540d\u7a31\u6a21\u5f0f markers = slow : \u6e2c\u8a66\u904b\u884c\u8f03\u6162\u7684\u6a19\u8a18 integration : \u96c6\u6210\u6e2c\u8a66\u6a19\u8a18","title":"\u57fa\u672c\u7684 pytest.ini \u7d50\u69cb"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#pytestini_2","text":"","title":"pytest.ini \u7684\u5e38\u898b\u8a2d\u7f6e\u9078\u9805"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#1addopts","text":"\u9019\u500b\u9078\u9805\u5141\u8a31\u4f60\u5728\u904b\u884c pytest \u6642\u6dfb\u52a0\u9ed8\u8a8d\u7684\u9078\u9805\u3002\u4f8b\u5982\uff0c-v \u7528\u4f86\u958b\u555f\u8a73\u7d30\u6a21\u5f0f\uff0c--tb=short \u7528\u4f86\u7c21\u5316\u932f\u8aa4\u8a0a\u606f\u7684 traceback \u8f38\u51fa\u3002 addopts = -v --tb=short","title":"1.addopts"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#2testpaths","text":"\u6307\u5b9a pytest \u641c\u7d22\u6e2c\u8a66\u6a94\u6848\u7684\u8def\u5f91\u3002\u9019\u53ef\u4ee5\u7528\u4f86\u544a\u8a34 pytest \u53ea\u5728\u7279\u5b9a\u8cc7\u6599\u593e\u4e0b\u5c0b\u627e\u6e2c\u8a66\u6a94\u6848\u3002 testpaths = tests","title":"2.testpaths"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#3python_files","text":"\u63a7\u5236 pytest \u61c9\u8a72\u5c0b\u627e\u54ea\u4e9b\u6a94\u6848\u4f86\u9032\u884c\u6e2c\u8a66\u3002\u9810\u8a2d pytest \u6703\u5c0b\u627e\u6a94\u540d\u4ee5 test_ \u958b\u982d\u6216\u7d50\u5c3e\u7684\u6a94\u6848\u3002 python_files = test_*.py","title":"3.python_files"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#4python_classes","text":"\u63a7\u5236 pytest \u61c9\u8a72\u641c\u5c0b\u54ea\u4e9b\u985e\u5225\u4f86\u4f5c\u70ba\u6e2c\u8a66\u985e\u5225\u3002\u9810\u8a2d pytest \u6703\u5c0b\u627e\u540d\u7a31\u4ee5 Test \u958b\u982d\u7684\u985e\u5225\u3002 python_classes = Test*","title":"4.python_classes"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#5python_functions","text":"\u63a7\u5236 pytest \u61c9\u8a72\u641c\u5c0b\u54ea\u4e9b\u51fd\u6578\u4f86\u4f5c\u70ba\u6e2c\u8a66\u51fd\u6578\u3002\u9810\u8a2d pytest \u6703\u5c0b\u627e\u540d\u7a31\u4ee5 test_ \u958b\u982d\u7684\u51fd\u6578\u3002 python_functions = test_*","title":"5.python_functions"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#6markers","text":"\u81ea\u8a02\u6a19\u8a18\u4f86\u6a19\u7c64\u7279\u5b9a\u7684\u6e2c\u8a66\u6848\u4f8b\uff0c\u5141\u8a31\u4f60\u6839\u64da\u6a19\u7c64\u4f86\u57f7\u884c\u6e2c\u8a66\u3002\u4f8b\u5982\uff0c\u5c07\u904b\u884c\u8f03\u6162\u7684\u6e2c\u8a66\u6a19\u8a18\u70ba slow\uff0c\u5728\u57f7\u884c\u6e2c\u8a66\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528 pytest -m slow \u4f86\u9078\u64c7\u53ea\u57f7\u884c\u9019\u985e\u6a19\u8a18\u7684\u6e2c\u8a66\u3002 markers = slow : \u6e2c\u8a66\u904b\u884c\u8f03\u6162\u7684\u6a19\u8a18 integration : \u96c6\u6210\u6e2c\u8a66\u6a19\u8a18","title":"6.markers"},{"location":"6.\u55ae\u5143\u6e2c\u8a66/6.2pytest \u5b78\u7fd2\u6307\u5357(\u9032\u968e\u7bc7)/#pytestini_3","text":"1.\u4f7f\u7528\u81ea\u8a02\u6a19\u8a18\u9032\u884c\u5206\u985e \uff1a \u7576\u5c08\u6848\u898f\u6a21\u8f03\u5927\u6642\uff0c\u53ef\u4ee5\u4f7f\u7528\u81ea\u8a02\u6a19\u8a18\u4f86\u5c07\u6e2c\u8a66\u5206\u985e\uff0c\u4f8b\u5982\u6a19\u8a18\u67d0\u4e9b\u6e2c\u8a66\u70ba \"\u6162\u901f\u6e2c\u8a66\" \u6216 \"\u96c6\u6210\u6e2c\u8a66\"\u3002\u9019\u6a23\u4f60\u5c31\u53ef\u4ee5\u6839\u64da\u6a19\u7c64\u4f86\u57f7\u884c\u6e2c\u8a66\uff0c\u7bc0\u7701\u6642\u9593\u3002 2.\u7c21\u5316\u547d\u4ee4\u884c\u9078\u9805 \uff1a \u900f\u904e addopts \u914d\u7f6e\uff0c\u4f60\u53ef\u4ee5\u8a2d\u5b9a\u9ed8\u8a8d\u9078\u9805\uff0c\u9019\u6a23\u5c31\u4e0d\u9700\u8981\u6bcf\u6b21\u90fd\u5728\u547d\u4ee4\u5217\u4e0a\u8f38\u5165\u76f8\u540c\u7684\u9078\u9805\uff0c\u8b93\u6e2c\u8a66\u904b\u884c\u66f4\u65b9\u4fbf\u3002 3.\u8abf\u6574\u6e2c\u8a66\u8def\u5f91\u548c\u547d\u540d\u898f\u5247 \uff1a \u5982\u679c\u4f60\u7684\u5c08\u6848\u67b6\u69cb\u4e0d\u7b26\u5408 pytest \u7684\u9810\u8a2d\u898f\u5247\uff08\u4f8b\u5982\uff0c\u6e2c\u8a66\u6a94\u6848\u4e0d\u4ee5 test_ \u958b\u982d\uff09\uff0c\u53ef\u4ee5\u901a\u904e python_files \u548c python_functions \u4f86\u5b9a\u5236\u6aa2\u6e2c\u898f\u5247\u3002","title":"\u64b0\u5beb pytest.ini \u7684\u6280\u5de7"}]}